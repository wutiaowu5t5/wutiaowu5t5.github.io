<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nanami Kento</title>
  
  
  <link href="https://wutiaowu5t5.github.io/atom.xml" rel="self"/>
  
  <link href="https://wutiaowu5t5.github.io/"/>
  <updated>2024-04-09T07:24:24.000Z</updated>
  <id>https://wutiaowu5t5.github.io/</id>
  
  <author>
    <name>Nanami Kento</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Javascript设计模式汇总</title>
    <link href="https://wutiaowu5t5.github.io/posts/d342d2ec/"/>
    <id>https://wutiaowu5t5.github.io/posts/d342d2ec/</id>
    <published>2024-04-09T07:24:24.000Z</published>
    <updated>2024-04-09T07:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式是什么"><a href="#设计模式是什么" class="headerlink" title="设计模式是什么"></a>设计模式是什么</h2><p>设计模式是在软件工程中被反复使用的、经过验证的解决方案，用于解决特定问题或设计软件架构。它们提供了一种在设计和开发过程中重用的可靠方式，有助于解决常见的设计问题并促进代码的可维护性、可扩展性和可重用性。</p><p>设计模式并不是一种具体的编程语言特性或库，而是一种通用的解决方案。它们是从实际开发经验中总结出来的，并被广泛接受和使用。设计模式通常包括了面向对象设计的一些基本原则和惯例，通过它们可以更好地组织代码结构、降低耦合度、提高代码的灵活性和可维护性。</p><p>设计模式之所以出现，是因为在软件开发中经常会遇到一些常见的问题，比如对象创建、对象之间的关系、算法的选择等等。这些问题在不同的项目和场景中可能会多次出现，因此工程师们开始寻找并提炼出一些通用的解决方案，这就是设计模式产生的原因。</p><p>设计模式有助于开发人员更快速地理解和解决问题，提高了开发效率。此外，它们还有助于提高代码的可读性和可维护性，因为它们是经过验证的、被广泛认可的解决方案，可以减少因为设计上的错误而造成的后续问题。</p><h2 id="设计模式遵循原则"><a href="#设计模式遵循原则" class="headerlink" title="设计模式遵循原则"></a>设计模式遵循原则</h2><p>设计模式的原则通常指的是一些基本的设计理念和规范，它们指导着设计模式的实现和应用。以下是一些常见的设计模式原则：</p><ol><li><p><strong>单一责任原则（Single Responsibility Principle, SRP）</strong>：</p><p>一个类应该只有一个引起变化的原因</p><p>换句话说，一个类应该只负责一项职责</p></li><li><p><strong>开放-封闭原则（Open-Closed Principle, OCP）</strong>：</p><p>软件实体（类、模块、函数等）应该对扩展开放，对修改关闭</p><p>即应该通过扩展现有代码来实现新功能，而不是直接修改已有代码</p></li><li><p><strong>里氏替换原则（Liskov Substitution Principle, LSP）</strong>：</p><p>所有能够使用父类对象的地方都应该能够使用子类对象</p><p>即子类应该能够替换父类并且不影响程序的正确性</p></li><li><p><strong>依赖倒置原则（Dependency Inversion Principle, DIP）</strong>：</p><p>高层模块不应该依赖于低层模块，两者都应该依赖于抽象</p><p>抽象不应该依赖于具体实现细节，具体实现细节应该依赖于抽象</p></li><li><p><strong>接口隔离原则（Interface Segregation Principle, ISP）</strong>：</p><p>客户端不应该被迫依赖于它们不使用的接口</p><p>即应该将大接口拆分成更小、更具体的接口，以便客户端只需要知道它们需要使用的接口</p></li><li><p><strong>合成/聚合复用原则（Composition/Aggregation Reuse Principle, CARP）</strong>：</p><p>优先使用对象组合/聚合，而不是继承来达到代码复用的目的</p><p>通过将对象组合到新的对象中，而不是通过继承来实现代码复用，可以更灵活地实现代码的复用</p></li></ol><p>这些原则是面向对象设计的基础，设计模式通常都遵循这些原则，以提高代码的可维护性、可扩展性和可重用性</p><h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><ol><li><p>创建型</p><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/4fda2d18/">单例模式</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/14ddad5d/">原型模式</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/7e9872a1/">工厂模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/7aab53ba/">抽象工厂模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/7e3e0f32/">建造者模式</a></p>            </div></li><li><p>结构型</p><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/edf2252f/">适配器模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/f51f74c/">装饰器模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/54233691/">代理模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/bd865a4b/">外观模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/2b8aa55b/">桥接模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/79a1bf69/">组合模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/469c39d8/">享元模式</a></p>            </div></li><li><p>行为型</p><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/73dbb689/">观察者模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/b1de33a6/">迭代器模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/1445619f/">策略模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/8472c90e/">模板方法模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/ae2b73e3/">职责链模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/25e1ecde/">命令模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/e88d43d9/">备忘录模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/d207f3e/">状态模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/edaaf222/">访问者模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/957fddbf/">中介者模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/29dbf566/">解释器模式</a></p>            </div></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;设计模式是什么&quot;&gt;&lt;a href=&quot;#设计模式是什么&quot; class=&quot;headerlink&quot; title=&quot;设计模式是什么&quot;&gt;&lt;/a&gt;设计模式是什么&lt;/h2&gt;&lt;p&gt;设计模式是在软件工程中被反复使用的、经过验证的解决方案，用于解决特定问题或设计软件架构。它们提供了一</summary>
      
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>面经汇总</title>
    <link href="https://wutiaowu5t5.github.io/posts/ed392c85/"/>
    <id>https://wutiaowu5t5.github.io/posts/ed392c85/</id>
    <published>2024-04-09T03:10:24.000Z</published>
    <updated>2024-04-09T03:19:35.989Z</updated>
    
    <content type="html"><![CDATA[<div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/556519a1/">Html</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/179be34f/">Css</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/e82d9764/">Javascript</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>手写Javascript</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>Vue</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>React</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>工程化</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>Http</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>浏览器</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>Node</p>            </div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&#39;checkbox green checked&#39;&gt;&lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot;/&gt;
            &lt;p&gt;&lt;a href=&quot;https://wutiaowu5t5.github.io/posts/5</summary>
      
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="面试" scheme="https://wutiaowu5t5.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Git提交规范记录</title>
    <link href="https://wutiaowu5t5.github.io/posts/a70ec0c6/"/>
    <id>https://wutiaowu5t5.github.io/posts/a70ec0c6/</id>
    <published>2024-04-07T07:24:24.000Z</published>
    <updated>2024-04-08T07:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Commit-Message作用"><a href="#Commit-Message作用" class="headerlink" title="Commit Message作用"></a>Commit Message作用</h2><ol><li><p>提供更多的历史信息，方便快速浏览</p><p>比如，下面的命令显示上次发布后的变动，每个commit占据一行。你只看行首，就知道某次 commit 的目的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> &lt;last tag&gt; HEAD --pretty=format:%s</span><br></pre></td></tr></table></figure></li><li><p>可以过滤某些commit（比如文档改动），便于快速查找信息</p><p>比如，下面的命令仅仅显示本次发布新增加的功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> &lt;last release&gt; HEAD --grep feature</span><br></pre></td></tr></table></figure></li><li><p>可以直接从commit生成Change log</p><p>Change Log 是发布新版本时，用来说明与上一个版本差异的文档</p></li></ol><h2 id="Commit-Message-的格式"><a href="#Commit-Message-的格式" class="headerlink" title="Commit Message 的格式"></a>Commit Message 的格式</h2><p>每次提交，Commit message 都包括三个部分：Header，Body 和 Footer</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="built_in">type</span>&gt;(&lt;scope&gt;): &lt;subject&gt;// 空一行&lt;body&gt;// 空一行&lt;footer&gt;</span><br></pre></td></tr></table></figure><p>其中，Header 是必需的，Body 和 Footer 可以省略</p><p>不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）。这是为了避免自动换行影响美观</p><ol><li><p>Header</p><p>Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）</p><ul><li><p>type</p><p>type用于说明 commit 的类别，只允许使用下面7个标识</p><p>feat：新功能（feature）</p><p>fix：修补bug</p><p>docs：文档（documentation）</p><p>style： 格式（不影响代码运行的变动）</p><p>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</p><p>test：增加测试</p><p>chore：构建过程或辅助工具的变动</p></li><li><p>scope</p><p>scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同</p></li><li><p>subject</p><p>subject是 commit 目的的简短描述，不超过50个字符</p><p>以动词开头，使用第一人称现在时，比如change，而不是changed或changes</p><p>第一个字母小写</p><p>结尾不加句号（.）</p></li></ul></li><li><p>Body</p><p>Body 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">More detailed explanatory text, <span class="keyword">if</span> necessary.  Wrap it to </span><br><span class="line">about 72 characters or so. Further paragraphs come after blank lines.- Bullet points are okay, too- Use a hanging indent</span><br></pre></td></tr></table></figure><p>说明代码变动的动机，以及与以前行为的对比</p></li><li><p>Footer</p><ol><li><p>Footer 部分只用于两种情况</p><p>如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">BREAKING CHANGE: isolate scope bindings definition has changed.</span><br><span class="line"></span><br><span class="line">    To migrate the code follow the example below:</span><br><span class="line"></span><br><span class="line">    Before:</span><br><span class="line"></span><br><span class="line">    scope: &#123;</span><br><span class="line">      myAttr: <span class="string">&#x27;attribute&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    After:</span><br><span class="line"></span><br><span class="line">    scope: &#123;</span><br><span class="line">      myAttr: <span class="string">&#x27;@&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    The removed `inject` wasn<span class="string">&#x27;t generaly useful for directives so there should be no code using it.</span></span><br></pre></td></tr></table></figure></li><li><p>关闭 Issue</p><p>如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Closes <span class="comment">#234</span></span><br></pre></td></tr></table></figure><p>也可以一次关闭多个 issue </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Closes <span class="comment">#123, #245, #992</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>Revert</p><p>还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以revert:开头，后面跟着被撤销 Commit 的 Header</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">revert: feat(pencil): add <span class="string">&#x27;graphiteWidth&#x27;</span> option</span><br><span class="line"></span><br><span class="line">This reverts commit 667ecc1654a317a13331b17617d973392f415f02.</span><br></pre></td></tr></table></figure><p>Body部分的格式是固定的，必须写成This reverts commit <hash>.，其中的hash是被撤销 commit 的 SHA 标识符</p><p>如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的Reverts小标题下面</p></li></ol><h2 id="Commitizen"><a href="#Commitizen" class="headerlink" title="Commitizen"></a>Commitizen</h2><p>Commitizen是一个撰写合格 Commit message 的工具。</p><p>安装命令如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g commitizen</span><br></pre></td></tr></table></figure><p>然后，在项目目录里，运行下面的命令，使其支持 Angular 的 Commit message 格式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ commitizen init cz-conventional-changelog --save --save-exact</span><br></pre></td></tr></table></figure><p>以后，凡是用到git commit命令，一律改为使用git cz。这时，就会出现选项，用来生成符合格式的 Commit message。</p><p><img src="https://yqfile.alicdn.com/429b439c9f9f422039f8c2afbb4886bd034e5b3f.png" alt="screenshot"></p><h2 id="validate-commit-msg"><a href="#validate-commit-msg" class="headerlink" title="validate-commit-msg"></a>validate-commit-msg</h2><p>validate-commit-msg 用于检查 Node 项目的 Commit message 是否符合格式</p><p>它的安装是手动的。首先，拷贝下面这个JS文件，放入你的代码库。文件名可以取为validate-commit-msg.js</p><p>接着，把这个脚本加入 Git 的 hook。下面是在package.json里面使用 ghooks，把这个脚本加为commit-msg时运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;config&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;ghooks&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;commit-msg&quot;</span>: <span class="string">&quot;./validate-commit-msg.js&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，每次git commit的时候，这个脚本就会自动检查 Commit message 是否合格。如果不合格，就会报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add -A </span><br><span class="line">$ git commit -m <span class="string">&quot;edit markdown&quot;</span> INVALID COMMIT MSG: does not match <span class="string">&quot;&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;&quot;</span> ! was: edit markdown</span><br></pre></td></tr></table></figure><h2 id="生成-Change-log"><a href="#生成-Change-log" class="headerlink" title="生成 Change log"></a>生成 Change log</h2><p>如果你的所有 Commit 都符合 Angular 格式，那么发布新版本时， Change log 就可以用脚本自动生成（例1，例2，例3）</p><p>生成的文档包括以下三个部分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">New features</span><br><span class="line"></span><br><span class="line">Bug fixes</span><br><span class="line"></span><br><span class="line">Breaking changes.</span><br></pre></td></tr></table></figure><p>每个部分都会罗列相关的 commit ，并且有指向这些 commit 的链接。当然，生成的文档允许手动修改，所以发布前，你还可以添加其他内容</p><p>conventional-changelog 就是生成 Change log 的工具，运行下面的命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g conventional-changelog</span><br><span class="line">$ <span class="built_in">cd</span> my-project</span><br><span class="line">$ conventional-changelog -p angular -i CHANGELOG.md -w</span><br></pre></td></tr></table></figure><p>上面命令不会覆盖以前的 Change log，只会在CHANGELOG.md的头部加上自从上次发布以来的变动</p><p>如果你想生成所有发布的 Change log，要改为运行下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conventional-changelog -p angular -i CHANGELOG.md -w -r 0</span><br></pre></td></tr></table></figure><p>为了方便使用，可以将其写入package.json的scripts字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;changelog&quot;</span>: <span class="string">&quot;conventional-changelog -p angular -i CHANGELOG.md -w -r 0&quot;</span></span><br><span class="line">  &#125;&#125;</span><br></pre></td></tr></table></figure><p>以后，直接运行下面的命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run changelog</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Commit-Message作用&quot;&gt;&lt;a href=&quot;#Commit-Message作用&quot; class=&quot;headerlink&quot; title=&quot;Commit Message作用&quot;&gt;&lt;/a&gt;Commit Message作用&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;提供更多的</summary>
      
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="git" scheme="https://wutiaowu5t5.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《解释器模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/29dbf566/"/>
    <id>https://wutiaowu5t5.github.io/posts/29dbf566/</id>
    <published>2024-04-07T07:24:24.000Z</published>
    <updated>2024-04-07T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《中介者模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/957fddbf/"/>
    <id>https://wutiaowu5t5.github.io/posts/957fddbf/</id>
    <published>2024-04-06T07:24:24.000Z</published>
    <updated>2024-04-06T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《访问者模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/edaaf222/"/>
    <id>https://wutiaowu5t5.github.io/posts/edaaf222/</id>
    <published>2024-04-05T07:24:24.000Z</published>
    <updated>2024-04-05T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《状态模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/d207f3e/"/>
    <id>https://wutiaowu5t5.github.io/posts/d207f3e/</id>
    <published>2024-04-04T07:24:24.000Z</published>
    <updated>2024-04-04T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《备忘录模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/e88d43d9/"/>
    <id>https://wutiaowu5t5.github.io/posts/e88d43d9/</id>
    <published>2024-04-03T07:24:24.000Z</published>
    <updated>2024-04-03T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《命令模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/25e1ecde/"/>
    <id>https://wutiaowu5t5.github.io/posts/25e1ecde/</id>
    <published>2024-04-02T07:24:24.000Z</published>
    <updated>2024-04-02T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《职责链模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/ae2b73e3/"/>
    <id>https://wutiaowu5t5.github.io/posts/ae2b73e3/</id>
    <published>2024-04-01T07:24:24.000Z</published>
    <updated>2024-04-01T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《模版方法模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/8472c90e/"/>
    <id>https://wutiaowu5t5.github.io/posts/8472c90e/</id>
    <published>2024-03-30T07:24:24.000Z</published>
    <updated>2024-03-30T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《策略模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/1445619f/"/>
    <id>https://wutiaowu5t5.github.io/posts/1445619f/</id>
    <published>2024-03-29T07:24:24.000Z</published>
    <updated>2024-03-29T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《迭代器模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/b1de33a6/"/>
    <id>https://wutiaowu5t5.github.io/posts/b1de33a6/</id>
    <published>2024-03-28T07:24:24.000Z</published>
    <updated>2024-03-28T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《观察者模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/73dbb689/"/>
    <id>https://wutiaowu5t5.github.io/posts/73dbb689/</id>
    <published>2024-03-27T07:24:24.000Z</published>
    <updated>2024-03-27T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《享元模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/469c39d8/"/>
    <id>https://wutiaowu5t5.github.io/posts/469c39d8/</id>
    <published>2024-03-26T07:24:24.000Z</published>
    <updated>2024-03-26T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《组合模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/79a1bf69/"/>
    <id>https://wutiaowu5t5.github.io/posts/79a1bf69/</id>
    <published>2024-03-25T07:24:24.000Z</published>
    <updated>2024-03-25T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《桥接模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/2b8aa55b/"/>
    <id>https://wutiaowu5t5.github.io/posts/2b8aa55b/</id>
    <published>2024-03-24T07:24:24.000Z</published>
    <updated>2024-03-24T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《外观模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/bd865a4b/"/>
    <id>https://wutiaowu5t5.github.io/posts/bd865a4b/</id>
    <published>2024-03-23T07:24:24.000Z</published>
    <updated>2024-03-23T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《代理模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/54233691/"/>
    <id>https://wutiaowu5t5.github.io/posts/54233691/</id>
    <published>2024-03-22T07:24:24.000Z</published>
    <updated>2024-03-22T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《装饰器模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/f51f74c/"/>
    <id>https://wutiaowu5t5.github.io/posts/f51f74c/</id>
    <published>2024-03-21T07:24:24.000Z</published>
    <updated>2024-03-21T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
