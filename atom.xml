<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nanami Kento</title>
  
  
  <link href="https://wutiaowu5t5.github.io/atom.xml" rel="self"/>
  
  <link href="https://wutiaowu5t5.github.io/"/>
  <updated>2024-04-09T07:24:24.000Z</updated>
  <id>https://wutiaowu5t5.github.io/</id>
  
  <author>
    <name>Nanami Kento</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Javascript设计模式汇总</title>
    <link href="https://wutiaowu5t5.github.io/posts/d342d2ec/"/>
    <id>https://wutiaowu5t5.github.io/posts/d342d2ec/</id>
    <published>2024-04-09T07:24:24.000Z</published>
    <updated>2024-04-09T07:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式是什么"><a href="#设计模式是什么" class="headerlink" title="设计模式是什么"></a>设计模式是什么</h2><p>设计模式是在软件工程中被反复使用的、经过验证的解决方案，用于解决特定问题或设计软件架构。它们提供了一种在设计和开发过程中重用的可靠方式，有助于解决常见的设计问题并促进代码的可维护性、可扩展性和可重用性。</p><p>设计模式并不是一种具体的编程语言特性或库，而是一种通用的解决方案。它们是从实际开发经验中总结出来的，并被广泛接受和使用。设计模式通常包括了面向对象设计的一些基本原则和惯例，通过它们可以更好地组织代码结构、降低耦合度、提高代码的灵活性和可维护性。</p><p>设计模式之所以出现，是因为在软件开发中经常会遇到一些常见的问题，比如对象创建、对象之间的关系、算法的选择等等。这些问题在不同的项目和场景中可能会多次出现，因此工程师们开始寻找并提炼出一些通用的解决方案，这就是设计模式产生的原因。</p><p>设计模式有助于开发人员更快速地理解和解决问题，提高了开发效率。此外，它们还有助于提高代码的可读性和可维护性，因为它们是经过验证的、被广泛认可的解决方案，可以减少因为设计上的错误而造成的后续问题。</p><h2 id="设计模式遵循原则"><a href="#设计模式遵循原则" class="headerlink" title="设计模式遵循原则"></a>设计模式遵循原则</h2><p>设计模式的原则通常指的是一些基本的设计理念和规范，它们指导着设计模式的实现和应用。以下是一些常见的设计模式原则：</p><ol><li><p><strong>单一责任原则（Single Responsibility Principle, SRP）</strong>：</p><p>一个类应该只有一个引起变化的原因</p><p>换句话说，一个类应该只负责一项职责</p></li><li><p><strong>开放-封闭原则（Open-Closed Principle, OCP）</strong>：</p><p>软件实体（类、模块、函数等）应该对扩展开放，对修改关闭</p><p>即应该通过扩展现有代码来实现新功能，而不是直接修改已有代码</p></li><li><p><strong>里氏替换原则（Liskov Substitution Principle, LSP）</strong>：</p><p>所有能够使用父类对象的地方都应该能够使用子类对象</p><p>即子类应该能够替换父类并且不影响程序的正确性</p></li><li><p><strong>依赖倒置原则（Dependency Inversion Principle, DIP）</strong>：</p><p>高层模块不应该依赖于低层模块，两者都应该依赖于抽象</p><p>抽象不应该依赖于具体实现细节，具体实现细节应该依赖于抽象</p></li><li><p><strong>接口隔离原则（Interface Segregation Principle, ISP）</strong>：</p><p>客户端不应该被迫依赖于它们不使用的接口</p><p>即应该将大接口拆分成更小、更具体的接口，以便客户端只需要知道它们需要使用的接口</p></li><li><p><strong>合成/聚合复用原则（Composition/Aggregation Reuse Principle, CARP）</strong>：</p><p>优先使用对象组合/聚合，而不是继承来达到代码复用的目的</p><p>通过将对象组合到新的对象中，而不是通过继承来实现代码复用，可以更灵活地实现代码的复用</p></li></ol><p>这些原则是面向对象设计的基础，设计模式通常都遵循这些原则，以提高代码的可维护性、可扩展性和可重用性</p><h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><ol><li><p>创建型</p><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/4fda2d18/">单例模式</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/14ddad5d/">原型模式</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/7e9872a1/">工厂模式</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/7aab53ba/">抽象工厂模式</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/7e3e0f32/">建造者模式</a></p>            </div></li><li><p>结构型</p><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/edf2252f/">适配器模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/f51f74c/">装饰器模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/54233691/">代理模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/bd865a4b/">外观模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/2b8aa55b/">桥接模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/79a1bf69/">组合模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/469c39d8/">享元模式</a></p>            </div></li><li><p>行为型</p><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/73dbb689/">观察者模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/b1de33a6/">迭代器模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/1445619f/">策略模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/8472c90e/">模板方法模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/ae2b73e3/">职责链模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/25e1ecde/">命令模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/e88d43d9/">备忘录模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/d207f3e/">状态模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/edaaf222/">访问者模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/957fddbf/">中介者模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/29dbf566/">解释器模式</a></p>            </div></li></ol><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/wutiaowu5t5/DesignPattern"><img src="https://github-readme-stats.vercel.app/api/pin/?username=wutiaowu5t5&repo=DesignPattern&show_owner=true"/></a>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;设计模式是什么&quot;&gt;&lt;a href=&quot;#设计模式是什么&quot; class=&quot;headerlink&quot; title=&quot;设计模式是什么&quot;&gt;&lt;/a&gt;设计模式是什么&lt;/h2&gt;&lt;p&gt;设计模式是在软件工程中被反复使用的、经过验证的解决方案，用于解决特定问题或设计软件架构。它们提供了一</summary>
      
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>面经汇总</title>
    <link href="https://wutiaowu5t5.github.io/posts/ed392c85/"/>
    <id>https://wutiaowu5t5.github.io/posts/ed392c85/</id>
    <published>2024-04-09T03:10:24.000Z</published>
    <updated>2024-04-09T03:19:35.989Z</updated>
    
    <content type="html"><![CDATA[<div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/556519a1/">Html</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/179be34f/">Css</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/e82d9764/">Javascript</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>手写Javascript</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>Vue</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>React</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>工程化</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>Http</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>浏览器</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>Node</p>            </div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&#39;checkbox green checked&#39;&gt;&lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot;/&gt;
            &lt;p&gt;&lt;a href=&quot;https://wutiaowu5t5.github.io/posts/5</summary>
      
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="面试" scheme="https://wutiaowu5t5.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Git提交规范记录</title>
    <link href="https://wutiaowu5t5.github.io/posts/a70ec0c6/"/>
    <id>https://wutiaowu5t5.github.io/posts/a70ec0c6/</id>
    <published>2024-04-07T07:24:24.000Z</published>
    <updated>2024-04-08T07:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Commit-Message作用"><a href="#Commit-Message作用" class="headerlink" title="Commit Message作用"></a>Commit Message作用</h2><ol><li><p>提供更多的历史信息，方便快速浏览</p><p>比如，下面的命令显示上次发布后的变动，每个commit占据一行。你只看行首，就知道某次 commit 的目的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> &lt;last tag&gt; HEAD --pretty=format:%s</span><br></pre></td></tr></table></figure></li><li><p>可以过滤某些commit（比如文档改动），便于快速查找信息</p><p>比如，下面的命令仅仅显示本次发布新增加的功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> &lt;last release&gt; HEAD --grep feature</span><br></pre></td></tr></table></figure></li><li><p>可以直接从commit生成Change log</p><p>Change Log 是发布新版本时，用来说明与上一个版本差异的文档</p></li></ol><h2 id="Commit-Message-的格式"><a href="#Commit-Message-的格式" class="headerlink" title="Commit Message 的格式"></a>Commit Message 的格式</h2><p>每次提交，Commit message 都包括三个部分：Header，Body 和 Footer</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="built_in">type</span>&gt;(&lt;scope&gt;): &lt;subject&gt;// 空一行&lt;body&gt;// 空一行&lt;footer&gt;</span><br></pre></td></tr></table></figure><p>其中，Header 是必需的，Body 和 Footer 可以省略</p><p>不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）。这是为了避免自动换行影响美观</p><ol><li><p>Header</p><p>Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）</p><ul><li><p>type</p><p>type用于说明 commit 的类别，只允许使用下面7个标识</p><p>feat：新功能（feature）</p><p>fix：修补bug</p><p>docs：文档（documentation）</p><p>style： 格式（不影响代码运行的变动）</p><p>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</p><p>test：增加测试</p><p>chore：构建过程或辅助工具的变动</p></li><li><p>scope</p><p>scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同</p></li><li><p>subject</p><p>subject是 commit 目的的简短描述，不超过50个字符</p><p>以动词开头，使用第一人称现在时，比如change，而不是changed或changes</p><p>第一个字母小写</p><p>结尾不加句号（.）</p></li></ul></li><li><p>Body</p><p>Body 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">More detailed explanatory text, <span class="keyword">if</span> necessary.  Wrap it to </span><br><span class="line">about 72 characters or so. Further paragraphs come after blank lines.- Bullet points are okay, too- Use a hanging indent</span><br></pre></td></tr></table></figure><p>说明代码变动的动机，以及与以前行为的对比</p></li><li><p>Footer</p><ol><li><p>Footer 部分只用于两种情况</p><p>如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">BREAKING CHANGE: isolate scope bindings definition has changed.</span><br><span class="line"></span><br><span class="line">    To migrate the code follow the example below:</span><br><span class="line"></span><br><span class="line">    Before:</span><br><span class="line"></span><br><span class="line">    scope: &#123;</span><br><span class="line">      myAttr: <span class="string">&#x27;attribute&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    After:</span><br><span class="line"></span><br><span class="line">    scope: &#123;</span><br><span class="line">      myAttr: <span class="string">&#x27;@&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    The removed `inject` wasn<span class="string">&#x27;t generaly useful for directives so there should be no code using it.</span></span><br></pre></td></tr></table></figure></li><li><p>关闭 Issue</p><p>如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Closes <span class="comment">#234</span></span><br></pre></td></tr></table></figure><p>也可以一次关闭多个 issue </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Closes <span class="comment">#123, #245, #992</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>Revert</p><p>还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以revert:开头，后面跟着被撤销 Commit 的 Header</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">revert: feat(pencil): add <span class="string">&#x27;graphiteWidth&#x27;</span> option</span><br><span class="line"></span><br><span class="line">This reverts commit 667ecc1654a317a13331b17617d973392f415f02.</span><br></pre></td></tr></table></figure><p>Body部分的格式是固定的，必须写成This reverts commit <hash>.，其中的hash是被撤销 commit 的 SHA 标识符</p><p>如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的Reverts小标题下面</p></li></ol><h2 id="Commitizen"><a href="#Commitizen" class="headerlink" title="Commitizen"></a>Commitizen</h2><p>Commitizen是一个撰写合格 Commit message 的工具。</p><p>安装命令如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g commitizen</span><br></pre></td></tr></table></figure><p>然后，在项目目录里，运行下面的命令，使其支持 Angular 的 Commit message 格式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ commitizen init cz-conventional-changelog --save --save-exact</span><br></pre></td></tr></table></figure><p>以后，凡是用到git commit命令，一律改为使用git cz。这时，就会出现选项，用来生成符合格式的 Commit message。</p><p><img src="https://yqfile.alicdn.com/429b439c9f9f422039f8c2afbb4886bd034e5b3f.png" alt="screenshot"></p><h2 id="validate-commit-msg"><a href="#validate-commit-msg" class="headerlink" title="validate-commit-msg"></a>validate-commit-msg</h2><p>validate-commit-msg 用于检查 Node 项目的 Commit message 是否符合格式</p><p>它的安装是手动的。首先，拷贝下面这个JS文件，放入你的代码库。文件名可以取为validate-commit-msg.js</p><p>接着，把这个脚本加入 Git 的 hook。下面是在package.json里面使用 ghooks，把这个脚本加为commit-msg时运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;config&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;ghooks&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;commit-msg&quot;</span>: <span class="string">&quot;./validate-commit-msg.js&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，每次git commit的时候，这个脚本就会自动检查 Commit message 是否合格。如果不合格，就会报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add -A </span><br><span class="line">$ git commit -m <span class="string">&quot;edit markdown&quot;</span> INVALID COMMIT MSG: does not match <span class="string">&quot;&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;&quot;</span> ! was: edit markdown</span><br></pre></td></tr></table></figure><h2 id="生成-Change-log"><a href="#生成-Change-log" class="headerlink" title="生成 Change log"></a>生成 Change log</h2><p>如果你的所有 Commit 都符合 Angular 格式，那么发布新版本时， Change log 就可以用脚本自动生成（例1，例2，例3）</p><p>生成的文档包括以下三个部分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">New features</span><br><span class="line"></span><br><span class="line">Bug fixes</span><br><span class="line"></span><br><span class="line">Breaking changes.</span><br></pre></td></tr></table></figure><p>每个部分都会罗列相关的 commit ，并且有指向这些 commit 的链接。当然，生成的文档允许手动修改，所以发布前，你还可以添加其他内容</p><p>conventional-changelog 就是生成 Change log 的工具，运行下面的命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g conventional-changelog</span><br><span class="line">$ <span class="built_in">cd</span> my-project</span><br><span class="line">$ conventional-changelog -p angular -i CHANGELOG.md -w</span><br></pre></td></tr></table></figure><p>上面命令不会覆盖以前的 Change log，只会在CHANGELOG.md的头部加上自从上次发布以来的变动</p><p>如果你想生成所有发布的 Change log，要改为运行下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conventional-changelog -p angular -i CHANGELOG.md -w -r 0</span><br></pre></td></tr></table></figure><p>为了方便使用，可以将其写入package.json的scripts字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;changelog&quot;</span>: <span class="string">&quot;conventional-changelog -p angular -i CHANGELOG.md -w -r 0&quot;</span></span><br><span class="line">  &#125;&#125;</span><br></pre></td></tr></table></figure><p>以后，直接运行下面的命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run changelog</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Commit-Message作用&quot;&gt;&lt;a href=&quot;#Commit-Message作用&quot; class=&quot;headerlink&quot; title=&quot;Commit Message作用&quot;&gt;&lt;/a&gt;Commit Message作用&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;提供更多的</summary>
      
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="git" scheme="https://wutiaowu5t5.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《解释器模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/29dbf566/"/>
    <id>https://wutiaowu5t5.github.io/posts/29dbf566/</id>
    <published>2024-04-07T07:24:24.000Z</published>
    <updated>2024-04-07T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《中介者模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/957fddbf/"/>
    <id>https://wutiaowu5t5.github.io/posts/957fddbf/</id>
    <published>2024-04-06T07:24:24.000Z</published>
    <updated>2024-04-06T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《访问者模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/edaaf222/"/>
    <id>https://wutiaowu5t5.github.io/posts/edaaf222/</id>
    <published>2024-04-05T07:24:24.000Z</published>
    <updated>2024-04-05T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《状态模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/d207f3e/"/>
    <id>https://wutiaowu5t5.github.io/posts/d207f3e/</id>
    <published>2024-04-04T07:24:24.000Z</published>
    <updated>2024-04-04T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《备忘录模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/e88d43d9/"/>
    <id>https://wutiaowu5t5.github.io/posts/e88d43d9/</id>
    <published>2024-04-03T07:24:24.000Z</published>
    <updated>2024-04-03T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《命令模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/25e1ecde/"/>
    <id>https://wutiaowu5t5.github.io/posts/25e1ecde/</id>
    <published>2024-04-02T07:24:24.000Z</published>
    <updated>2024-04-02T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《职责链模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/ae2b73e3/"/>
    <id>https://wutiaowu5t5.github.io/posts/ae2b73e3/</id>
    <published>2024-04-01T07:24:24.000Z</published>
    <updated>2024-04-01T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《模版方法模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/8472c90e/"/>
    <id>https://wutiaowu5t5.github.io/posts/8472c90e/</id>
    <published>2024-03-30T07:24:24.000Z</published>
    <updated>2024-03-30T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《策略模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/1445619f/"/>
    <id>https://wutiaowu5t5.github.io/posts/1445619f/</id>
    <published>2024-03-29T07:24:24.000Z</published>
    <updated>2024-03-29T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《迭代器模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/b1de33a6/"/>
    <id>https://wutiaowu5t5.github.io/posts/b1de33a6/</id>
    <published>2024-03-28T07:24:24.000Z</published>
    <updated>2024-03-28T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《观察者模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/73dbb689/"/>
    <id>https://wutiaowu5t5.github.io/posts/73dbb689/</id>
    <published>2024-03-27T07:24:24.000Z</published>
    <updated>2024-03-27T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《享元模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/469c39d8/"/>
    <id>https://wutiaowu5t5.github.io/posts/469c39d8/</id>
    <published>2024-03-26T07:24:24.000Z</published>
    <updated>2024-03-26T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《组合模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/79a1bf69/"/>
    <id>https://wutiaowu5t5.github.io/posts/79a1bf69/</id>
    <published>2024-03-25T07:24:24.000Z</published>
    <updated>2024-03-25T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《桥接模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/2b8aa55b/"/>
    <id>https://wutiaowu5t5.github.io/posts/2b8aa55b/</id>
    <published>2024-03-24T07:24:24.000Z</published>
    <updated>2024-03-24T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《外观模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/bd865a4b/"/>
    <id>https://wutiaowu5t5.github.io/posts/bd865a4b/</id>
    <published>2024-03-23T07:24:24.000Z</published>
    <updated>2024-03-23T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《代理模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/54233691/"/>
    <id>https://wutiaowu5t5.github.io/posts/54233691/</id>
    <published>2024-03-22T07:24:24.000Z</published>
    <updated>2024-03-22T07:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>代理模式（Proxy Pattern）是一种设计模式，它提供了一个对象（通常称为 “代理”）来控制对另一个对象（通常称为 “目标对象”）的访问</p><p>代理对象在目标对象之前进行拦截，代理对象可以对目标对象的属性和方法进行操作，例如修改、验证、或增强</p><p>这种模式的主要目的是控制、管理和调整对象的访问、行为和功能</p><h2 id="实现条件"><a href="#实现条件" class="headerlink" title="实现条件"></a>实现条件</h2><ol><li><p><strong>目标对象</strong></p><p>代理模式需要有一个目标对象，它是需要被代理的对象</p><p>目标对象定义了要被代理的功能和行为</p></li><li><p><strong>代理对象</strong></p><p>代理对象是一个与目标对象具有相同接口的对象</p><p>代理对象在客户端和目标对象之间起到中间人的作用，通过拦截对目标对象的访问，可以对目标对象的行为进行控制、调整或增强</p></li><li><p><strong>一致的接口</strong></p><p>代理对象和目标对象通常应具有相同的接口</p><p>这意味着代理对象可以接受和处理客户端对目标对象的所有请求</p><p>客户端通过使用代理对象而不是直接使用目标对象，可以完全透明地调用目标对象的功能</p></li><li><p><strong>处理程序</strong></p><p>代理对象通常包含一个处理程序（handler），它定义了如何拦截并处理客户端对目标对象的请求</p><p>这可能包括操作前后的额外逻辑、权限控制、日志记录、数据验证等</p></li><li><p><strong>拦截机制</strong></p><p>代理对象需要能够拦截对目标对象的操作</p><p>这可以通过 JavaScript 中的 <code>Proxy</code> 对象来实现，<code>Proxy</code> 对象提供了一系列拦截器（如 <code>get</code>、<code>set</code>、<code>apply</code> 等）来处理属性访问和函数调用等操作</p></li><li><p><strong>透明性</strong></p><p>代理模式应保持对客户端的透明性，这意味着客户端不需要知道它正在与代理对象交互而不是目标对象</p><p>这使得客户端可以专注于业务逻辑而不必关心代理的细节</p></li><li><p><strong>控制访问和增强</strong></p><p>代理模式的核心是通过代理对象控制和增强对目标对象的访问</p><p>代理对象可以选择性地允许或拒绝客户端对目标对象的请求，或者在请求前后添加额外的逻辑</p></li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li><p><strong>分离关注点</strong></p><p>代理模式使目标对象和客户端之间的逻辑分离</p><p>这可以使目标对象的实现更加专注于其核心功能，而代理负责其他方面的逻辑（例如，验证、权限控制、缓存、日志记录等）</p></li><li><p><strong>增强对象功能</strong></p><p>通过代理对象，可以在不修改目标对象的情况下增强其功能</p><p>例如，可以在目标对象的操作前后添加额外的行为</p></li><li><p><strong>控制访问</strong></p><p>代理模式可以控制对目标对象的访问</p><p>代理可以决定是否允许访问目标对象的特定功能，并在必要时进行权限验证或日志记录</p></li><li><p><strong>延迟初始化</strong></p><p>通过代理模式，可以将目标对象的初始化延迟到实际需要的时候</p><p>这有助于优化性能，避免不必要的资源消耗</p></li><li><p><strong>安全性</strong></p><p>代理模式可以用于提高系统的安全性</p><p>例如，通过代理对象，可以在调用目标对象的方法之前进行权限验证，确保只有授权的用户才能访问目标对象的功能</p></li><li><p><strong>透明性</strong></p><p>代理对象通常提供与目标对象相同的接口，因此客户端不需要了解目标对象是否被代理</p><p>这样，客户端的代码可以保持简单和一致</p></li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li><p><strong>额外的复杂性</strong></p><p>引入代理对象可能会增加代码的复杂性，因为需要管理额外的对象和逻辑</p><p>特别是当代理对象和目标对象之间的逻辑较复杂时，这种复杂性会更明显</p></li><li><p><strong>性能开销</strong></p><p>代理模式可能引入一定的性能开销</p><p>例如，代理对象在执行操作时需要额外的拦截和逻辑处理，这可能会影响系统的性能</p></li><li><p><strong>调试难度</strong></p><p>由于代理对象在目标对象和客户端之间起到中间层的作用，这可能使调试变得更复杂，因为问题可能出现在代理对象、目标对象或二者之间的交互中</p></li><li><p><strong>维护难度</strong></p><p>代理模式可能导致代码维护难度增加，尤其是当代理对象和目标对象之间的逻辑复杂时</p><p>在设计代理对象时需要特别注意清晰的接口定义和职责划分</p></li></ol><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ol><li><p><strong>Vue.js</strong></p><p>Vue 使用代理模式来实现数据绑定和响应式编程</p><p>Vue 创建了一个代理对象，通过代理对象监视数据的变化，然后根据变化自动更新 UI</p></li><li><p><strong>Redux 中的 Middleware</strong></p><p>虽然 Redux 本身是一个状态管理库，但在中间件（middleware）的设计中有使用代理模式</p><p>中间件可以拦截并调整 Redux 的动作，这样可以在动作被派发和状态更新之间添加额外的逻辑，如日志记录、异步请求等</p></li><li><p><strong>Node.js 的 HTTP 代理</strong></p><p>在 Node.js 中，开发人员可以使用库如 <code>http-proxy</code> 来创建 HTTP 代理</p><p>这个代理模式允许开发人员在客户端和服务器之间创建一个中间层，通过该层可以调整 HTTP 请求和响应</p><p>例如，可以修改请求头、缓存请求或将请求重定向到其他服务器</p></li><li><p><strong>GraphQL 中的 Resolvers</strong></p><p>在 GraphQL 中，Resolvers 是用于处理 GraphQL 查询的函数</p><p>通过代理模式，可以在查询结果返回客户端之前，对结果进行拦截和调整</p><p>例如，添加额外的数据处理、权限控制等</p></li><li><p><strong>Angular</strong></p><p>Angular 框架中的依赖注入系统使用了代理模式</p><p>通过拦截服务的创建和调用，Angular 可以实现服务的生命周期管理、配置和注入依赖等</p></li><li><p><strong>jQuery</strong></p><p>虽然 jQuery 不直接使用原生的 JavaScript <code>Proxy</code> 对象，但 jQuery 中的一些功能，例如事件代理（event delegation），与代理模式的理念相似</p><p>通过事件代理，jQuery 可以在父元素上监听事件，然后根据事件的目标元素来执行特定的处理</p></li></ol><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/wutiaowu5t5/DesignPattern/tree/main/StructuralType/DecoratorPattern"><img src="https://github-readme-stats.vercel.app/api/pin/?username=wutiaowu5t5&repo=DesignPattern&show_owner=true"/></a>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;代理模式（Proxy Pattern）是一种设计模式，它提供了一个对象（通常称为 “代理”）来控制对另一个对象（通常称为 “目标对象”）的访</summary>
      
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《装饰器模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/f51f74c/"/>
    <id>https://wutiaowu5t5.github.io/posts/f51f74c/</id>
    <published>2024-03-21T07:24:24.000Z</published>
    <updated>2024-03-21T07:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>装饰器模式（Decorator Pattern）是一种结构型设计模式，它允许你在不改变对象自身的基础上，动态地给对象添加额外的职责（功能）</p><p>在JavaScript中，装饰器可以是一个函数，它用来包裹另一个函数或方法，以提供额外的行为</p><h2 id="实现条件"><a href="#实现条件" class="headerlink" title="实现条件"></a>实现条件</h2><p>要实现装饰器模式，通常需要以下条件：</p><ol><li><p>组件接口</p><p>一个定义了对象的基本功能的接口</p></li><li><p>具体组件</p><p>实现或继承自组件接口的类，它定义了基本功能</p></li><li><p>装饰器类</p><p>实现或继承自组件接口的类，它包含具体组件的实例，并添加新的功能</p></li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li><p><strong>增加职责</strong></p><p>可以在不修改原始代码的情况下，向对象添加新的功能</p></li><li><p><strong>灵活性</strong></p><p>可以动态地添加或删除功能</p></li><li><p><strong>功能组合</strong></p><p>可以组合多个装饰器，创造出复杂的功能</p></li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li><p><strong>复杂性</strong></p><p>使用大量装饰器会增加系统的复杂性</p></li><li><p><strong>维护难度</strong></p><p>过多的层次和装饰可能会使系统变得难以维护</p></li><li><p><strong>性能问题</strong></p><p>在某些情况下，过多的包装层可能会影响性能</p></li></ol><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>基本对象定义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义接口（或者抽象类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CoffeeInterface</span> &#123;</span><br><span class="line">    <span class="title function_">getCost</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Method &#x27;getCost()&#x27; must be implemented.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">getDescription</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Method &#x27;getDescription()&#x27; must be implemented.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本咖啡类</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SimpleCoffee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">CoffeeInterface</span> &#123;</span><br><span class="line">    <span class="title function_">getCost</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">getDescription</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Simple Coffee&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象装饰器类</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CoffeeDecorator</span> <span class="keyword">extends</span> <span class="title class_ inherited__">CoffeeInterface</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">coffee</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="keyword">if</span> (!(coffee <span class="keyword">instanceof</span> <span class="title class_">CoffeeInterface</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Decorator requires a CoffeeInterface instance.&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">coffee</span> = coffee</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在基本对象上增加新东西的装饰器类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 牛奶装饰器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MilkDecorator</span> <span class="keyword">extends</span> <span class="title class_ inherited__">CoffeeDecorator</span> &#123;</span><br><span class="line">    <span class="title function_">getCost</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">coffee</span>.<span class="title function_">getCost</span>() + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">getDescription</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.coffee.getDescription()&#125;</span>, Milk`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 糖装饰器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SugarDecorator</span> <span class="keyword">extends</span> <span class="title class_ inherited__">CoffeeDecorator</span> &#123;</span><br><span class="line">    <span class="title function_">getCost</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">coffee</span>.<span class="title function_">getCost</span>() + <span class="number">0.5</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">getDescription</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.coffee.getDescription()&#125;</span>, Sugar`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用装饰器</span></span><br><span class="line"><span class="keyword">let</span> myCoffee = <span class="keyword">new</span> <span class="title class_">SimpleCoffee</span>() <span class="comment">// 创建一个基本的咖啡对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myCoffee.<span class="title function_">getDescription</span>()) <span class="comment">// 输出：Simple Coffee</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myCoffee.<span class="title function_">getCost</span>()) <span class="comment">// 输出：5</span></span><br><span class="line"></span><br><span class="line">myCoffee = <span class="keyword">new</span> <span class="title class_">MilkDecorator</span>(myCoffee) <span class="comment">// 向咖啡中添加牛奶</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myCoffee.<span class="title function_">getDescription</span>()) <span class="comment">// 输出：Simple Coffee, Milk</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myCoffee.<span class="title function_">getCost</span>()) <span class="comment">// 输出：6</span></span><br><span class="line"></span><br><span class="line">myCoffee = <span class="keyword">new</span> <span class="title class_">SugarDecorator</span>(myCoffee) <span class="comment">// 向咖啡中添加糖</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myCoffee.<span class="title function_">getDescription</span>()) <span class="comment">// 输出：Simple Coffee, Milk, Sugar</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myCoffee.<span class="title function_">getCost</span>()) <span class="comment">// 输出：6.5</span></span><br></pre></td></tr></table></figure><ol><li><p><strong>接口定义</strong></p><p><code>CoffeeInterface</code> 是一个抽象接口或类，定义了 <code>getCost()</code> 和 <code>getDescription()</code> 两个方法</p><p>这些方法代表了咖啡对象的基本功能，装饰器和基本对象都应该实现这个接口</p></li><li><p><strong>基本对象</strong></p><p><code>SimpleCoffee</code> 类是一个基本的咖啡对象，继承自 <code>CoffeeInterface</code>，并实现了 <code>getCost()</code> 和 <code>getDescription()</code> 方法</p><p>这个类代表了最基本的咖啡，没有任何额外的添加</p></li><li><p><strong>抽象装饰器类</strong></p><p><code>CoffeeDecorator</code> 是一个抽象装饰器类，继承自 <code>CoffeeInterface</code></p><p>它的构造函数接受一个 <code>CoffeeInterface</code> 类型的对象，并确保传入的对象符合该接口</p></li><li><p><strong>具体装饰器类</strong></p><p><code>MilkDecorator</code> 和 <code>SugarDecorator</code> 类继承自 <code>CoffeeDecorator</code>，分别代表牛奶和糖装饰器</p><p>它们在原始对象的基础上扩展了 <code>getCost()</code> 和 <code>getDescription()</code> 方法，添加了相应的功能</p></li><li><p><strong>组合装饰器</strong></p><p>装饰器模式允许将不同的装饰器组合在一起</p><p>通过在装饰器链中逐一应用装饰器，<code>myCoffee</code> 对象依次被 <code>MilkDecorator</code> 和 <code>SugarDecorator</code> 装饰，从而在原始 <code>SimpleCoffee</code> 对象上添加了牛奶和糖的功能</p></li></ol><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ol><li><p><strong>React 高阶组件</strong></p><ul><li><strong>高阶组件</strong>（HOC，Higher-Order Component）是 React 中的一种模式，它类似于装饰器模式。高阶组件接受一个组件作为参数，并返回一个新的组件。这种方式可以用来增强组件的功能</li><li>例如，<code>react-redux</code> 中的 <code>connect</code> 函数就是一个高阶组件，它将组件与 Redux 的状态和派发函数相连接</li></ul></li><li><p><strong>Node.js 中的中间件</strong></p><ul><li>在 Node.js 中，特别是在 Web 框架（如 Express 和 Koa）中，中间件模式类似于装饰器模式。中间件通过将请求和响应对象传递给一系列函数，从而动态地添加或修改功能。</li><li>例如，在 Express 中，你可以使用中间件来对请求进行身份验证、解析数据、添加日志记录等</li></ul></li><li><p><strong>Python 装饰器</strong></p><ul><li><p>虽然 Python 不是 JavaScript，但其装饰器特性可以提供一个参考</p><p>Python 中的装饰器用于为函数或方法添加额外的行为</p><p>在 JavaScript 中，你可以通过闭包和高阶函数来模拟类似的效果</p></li></ul></li><li><p><strong>Angular 装饰器</strong></p><ul><li><p>Angular 框架使用装饰器</p><p>（如 <code>@Component</code>、<code>@Injectable</code> 等）来定义组件、服务、模块等</p><p>这些装饰器本质上是函数，用于为类添加元数据和功能</p></li></ul></li><li><p><strong>JavaScript 中的工具和库</strong></p><ul><li><p><strong>Lodash</strong> 和 <strong>underscore</strong> 等工具库提供了一些高阶函数</p><p>可以用于以装饰器的形式对函数进行封装，如 <code>_.debounce</code> 和 <code>_.throttle</code></p></li><li><p><strong>TypeScript 装饰器</strong></p><p>TypeScript 支持类和方法装饰器</p><p>它们可以用来为类或方法添加元数据或功能</p><p>虽然这在语法上不同于传统的装饰器模式，但它提供了类似的功能</p></li></ul></li></ol><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/wutiaowu5t5/DesignPattern/tree/main/StructuralType/DecoratorPattern"><img src="https://github-readme-stats.vercel.app/api/pin/?username=wutiaowu5t5&repo=DesignPattern&show_owner=true"/></a>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;装饰器模式（Decorator Pattern）是一种结构型设计模式，它允许你在不改变对象自身的基础上，动态地给对象添加额外的职责（功能）&lt;</summary>
      
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
