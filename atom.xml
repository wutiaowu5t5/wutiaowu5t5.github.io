<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nanami Kento</title>
  
  
  <link href="https://wutiaowu5t5.github.io/atom.xml" rel="self"/>
  
  <link href="https://wutiaowu5t5.github.io/"/>
  <updated>2024-04-18T07:24:24.000Z</updated>
  <id>https://wutiaowu5t5.github.io/</id>
  
  <author>
    <name>Nanami Kento</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>学习ThreeJS-《Camera（官网案例）》</title>
    <link href="https://wutiaowu5t5.github.io/posts/9462a334/"/>
    <id>https://wutiaowu5t5.github.io/posts/9462a334/</id>
    <published>2024-04-18T07:24:24.000Z</published>
    <updated>2024-04-18T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="3D" scheme="https://wutiaowu5t5.github.io/tags/3D/"/>
    
  </entry>
  
  <entry>
    <title>学习ThreeJS-基础环境搭建</title>
    <link href="https://wutiaowu5t5.github.io/posts/1d0a14b2/"/>
    <id>https://wutiaowu5t5.github.io/posts/1d0a14b2/</id>
    <published>2024-04-17T07:24:24.000Z</published>
    <updated>2024-04-17T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="3D" scheme="https://wutiaowu5t5.github.io/tags/3D/"/>
    
  </entry>
  
  <entry>
    <title>Webapck创建Vue3项目</title>
    <link href="https://wutiaowu5t5.github.io/posts/54d94922/"/>
    <id>https://wutiaowu5t5.github.io/posts/54d94922/</id>
    <published>2024-04-16T07:24:24.000Z</published>
    <updated>2024-04-16T07:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info modern"><h4 id="版本要求"><a href="#版本要求" class="headerlink" title="版本要求"></a>版本要求</h4><p><code>node</code>版本需要18及以上，否则下载最新的<code>webpack</code>一些包，运行起来会出问题</p><p><code>npm</code>版本一般都是跟随<code>node</code>的</p><h4 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h4><p>最好是可以利用<code>nvm</code>来对你电脑的<code>node</code>版本进行管理</p><h4 id="如何查看版本"><a href="#如何查看版本" class="headerlink" title="如何查看版本"></a>如何查看版本</h4><ol><li><p>调出来你的<code>cmd</code>工具</p><p>按键：<code>Win+R</code></p></li><li><p>查看node版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/05/17/VaZAtojXedkKRYL.png" alt="image-20240517160158000"></p><p>得到版本为<code>V 18.18.2</code></p></li><li><p>查看npm版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/05/17/ib8c5pIE9YBhN4G.png" alt="image-20240517160244635"></p><p>得到版本为<code>V 9.8.1</code></p></li></ol></div><h2 id="一、新建项目"><a href="#一、新建项目" class="headerlink" title="一、新建项目"></a>一、新建项目</h2><p>新建一个项目，并在编辑器里面打开，这里用的是<code>Webstorm</code>，项目名字是<code>WebpackCreateVue</code></p><p><br /></p><h2 id="二、初始化项目"><a href="#二、初始化项目" class="headerlink" title="二、初始化项目"></a>二、初始化项目</h2><p>打开终端， 运行下面这段命令，会给我们的项目初始化，生成一个<code>package.json</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/05/17/QJOlNMIkvWKrmpx.png" alt="image-20240517161006850"></p><p><br /></p><details class="folding-tag" purple><summary> package.json是什么 </summary>              <div class='content'>              <p><code>package.json</code> 文件是一个重要的文件，存在于 <code>Node.js</code> 应用或前端项目（通常用到了 <code>Node.js</code> 工具链，如使用 <code>npm/yarn</code> 进行包管理的项目）的根目录中</p><p>它用于存储项目的元数据和配置信息</p><p>这个文件是用 <code>JSON</code> 格式编写的，提供了一种标准化的方式来组织项目信息和管理项目的依赖</p><p>主要作用包括但不限于：</p><ol><li><p><strong>项目元数据</strong></p><p>定义项目的名称、版本、描述、作者、许可证等信息</p><p>这对于项目的标识和分发非常重要</p></li><li><p><strong>依赖管理</strong></p><p>列出了项目所需的各种依赖包及其版本号</p><p>这使得项目在不同环境中的部署变得容易和一致，因为 <code>npm</code> 或 <code>yarn</code> 这样的包管理器可以自动安装正确版本的依赖</p></li><li><p><strong>脚本</strong></p><p>定义一系列脚本命令，如启动项目、编译构建、测试等</p><p>这使得项目相关的任务可以轻松执行，增强了开发效率</p></li><li><p><strong>配置信息</strong></p><p>可以包含项目配置信息，如构建系统、测试框架和其他工具的配置</p><p>这些配置通常在开发过程中经常需要修改或参考</p></li><li><p><strong>私有标记</strong></p><p>如果 <code>package.json</code> 中包含 <code>&quot;private&quot;: true</code> 字段，可以防止不小心将私有仓库发布到 <code>npm</code> 上</p></li></ol><p>例如，一个典型的 <code>package.json</code> 文件可能看起来像这样：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my-awesome-project&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;A description of the project.&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Your Name&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;express&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.17.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;nodemon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.7&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在这个例子中，你可以看到项目名称、版本、描述、主入口文件、脚本、作者、许可证以及依赖和开发依赖等信息</p><p>通过这些信息，开发者和工具可以了解如何处理和运行项目</p>              </div>            </details><p><br /></p><h2 id="三、搭建项目"><a href="#三、搭建项目" class="headerlink" title="三、搭建项目"></a>三、搭建项目</h2><p>这一步将要实现目标就是：</p><ol><li>给<code>webpack</code>区分打包环境</li><li>给项目添加<code>vue</code></li><li>给项目添加<code>css</code>预处理器</li><li>把项目跑起来</li></ol><h3 id="3-1-Webpack基础包"><a href="#3-1-Webpack基础包" class="headerlink" title="3.1-Webpack基础包"></a>3.1-Webpack基础包</h3><p>执行下面这段命令，我们就可以启动<code>webpack</code>项目了，这些包在使用<code>Webpack</code>进行项目构建时常用到的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-dev-server webpack webpack-cli webpack-merge --save-dev</span><br></pre></td></tr></table></figure><p>这时候我们看到到项目里面多出来了一个目录<code>node_modules</code>，一个文件<code>package-lock.json</code>，<code>package.json</code>里面多出来了一个<code>devDependencies</code></p><details class="folding-tag" purple><summary> 多出来一个目录node_modules是干什么的 </summary>              <div class='content'>              <p><code>node_modules</code>目录在<code>JavaScript</code>和<code>Node.js</code>项目中扮演着非常重要的角色</p><p>当你使用<code>npm（Node Package Manager）</code>或<code>yarn</code>等包管理工具安装包<code>（libraries）</code>或依赖<code>（dependencies）</code>时，这些安装的包都会被放置在<code>node_modules</code>目录下</p><p>以下是<code>node_modules</code>的一些详细解释：</p><ol><li><p><strong>依赖存放地</strong></p><p>项目所需的所有第三方包和它们的依赖都会被下载并存放在这个目录里</p><p>这些依赖可能是你直接安装的，也可能是你安装的包所依赖的其他包</p></li><li><p><strong>项目与依赖隔离</strong></p><p>通过将所有依赖放在单独的目录中，<code>node_modules</code>帮助项目保持组织性，同时确保了项目的根目录清爽、有序</p><p>这也使得依赖管理更为集中和简单</p></li><li><p><strong>模块解析</strong></p><p>当你在项目中<code>require</code>或从ES6模块中<code>import</code>模块时，Node.js会默认在<code>node_modules</code>目录中查找这些模块</p><p>这是因为Node.js的模块解析算法会检查这个目录来寻找安装的包</p></li><li><p><strong>便于版本控制和部署</strong></p><p><code>node_modules</code>通常不会被提交到版本控制系统（如Git）中，因为依赖可以通过<code>package.json</code>文件中记录的信息重新安装</p><p>这样做可以避免不必要的文件被提交，减小仓库大小，并确保每个环境（开发、测试、生产）都使用确切相同版本的依赖</p></li><li><p><strong>本地化依赖</strong></p><p><code>node_modules</code>目录的存在确保了项目的依赖是本地化的，这意味着不同的项目可以使用不同版本的相同依赖而互不干扰</p><p>这对于处理依赖之间的潜在冲突、实现版本控制非常有帮助</p></li></ol><p><code>node_modules</code>是项目的基石之一，它存储项目所需的所有外部代码，使得开发者不需要手动复制或链接到全局安装的库</p><p>这个机制极大地简化了<code>JavaScript</code>和<code>Node.js</code>的开发流程，同时提高了项目的可移植性和易管理性</p>              </div>            </details><details class="folding-tag" purple><summary> 多出来一个文件package-lock.json是干什么的 </summary>              <div class='content'>              <p><code>package-lock.json</code>是一个由<code>npm</code>自动生成的文件，它在几个方面对<code>Node.js</code>项目非常重要：</p><ol><li><p><strong>锁定依赖版本</strong></p><p>此文件确保每次安装依赖时，无论安装环境或时间如何，都会得到相同版本的依赖</p><p><code>package-lock.json</code>详细记录了项目所使用的每个依赖包的确切版本，包括嵌套依赖（即依赖的依赖）</p></li><li><p><strong>确保一致性</strong></p><p>每当您或您的团队成员运行<code>npm install</code>时，<code>package-lock.json</code>文件都会让安装过程参考这个文件中记载的具体版本，这就确保了每个人的开发环境都是一致的，无论何时进行安装</p></li><li><p><strong>加快安装过程</strong></p><p>因为<code>package-lock.json</code>记录了整个依赖树的详细信息，所以<code>npm</code>可以利用这些信息来跳过部分依赖计算和版本解决步骤，从而加快安装过程</p></li><li><p><strong>安全性</strong></p><p><code>package-lock.json</code>可以为依赖关系树中的每一个包提供更详细的来源信息，包括包的来源地址和哈希校验码</p><p>如果安装的包的哈希码与<code>package-lock.json</code>不一致，<code>npm</code>会警告用户，这能够在一定程度上预防修改或损坏的依赖包对项目的破坏</p></li></ol><p>虽然<code>package-lock.json</code>不需要手动编辑，但它应该和项目一起被提交到版本控制系统（Git仓库）中</p><p>这样确保了所有参与项目的开发者以及部署环境可以使用同样版本的依赖，保持环境之间的一致性</p>              </div>            </details><details class="folding-tag" purple><summary> devDependencies和dependencies区别是什么 </summary>              <div class='content'>              <p>在<code>package.json</code>文件中，<code>dependencies</code>和<code>devDependencies</code>是两种不同类型的依赖声明，它们在Node.js项目中具有不同的用途和重要性：</p><ol><li><p><strong><code>dependencies</code></strong>:</p><ul><li>这些是项目运行时所必需的依赖。无论是在生产环境还是其他环境，只要你的应用正在运行，这里列出的模块就是必需的</li><li>例如，如果你的项目是一个web服务，那么像<code>express</code>这样的包就应该列在<code>dependencies</code>中</li><li>当你运行<code>npm install &lt;package_name&gt;</code>（没有指定任何范围标志）时，包会默认被添加到<code>dependencies</code>中</li></ul></li><li><p><strong><code>devDependencies</code></strong>:</p><ul><li><p>这些依赖仅在开发过程中需要，比如编译工具、测试框架或文档生成工具</p><p>它们不是项目运行时必须的，只是在开发过程中为了测试、构建或编译你的项目而需要</p></li><li><p>举例来说，如果你使用Jest来测试你的项目，那么<code>jest</code>应该被列为一个开发依赖</p></li><li><p>通过运行<code>npm install &lt;package_name&gt; --save-dev</code>来安装并将一个包添加为<code>devDependencies</code></p></li></ul></li></ol><p>主要区别在于它们的使用场景：<code>dependencies</code>是项目运行所需的依赖，而<code>devDependencies</code>是仅在开发过程中需要的依赖</p><p>在进行包管理时正确区分这两种依赖类型，对于确保项目的依赖清单既准确又高效尤为重要</p>              </div>            </details><details class="folding-tag" purple><summary> webpack-dev-server webpack webpack-cli webpack-merge这4个包是干什么的 </summary>              <div class='content'>              <p>下面我将逐一解释它们各自的作用：</p><ul><li><p><strong>webpack-dev-server</strong></p><p> 这是一个轻量级的服务器，它可以提供静态文件服务，同时具备热更新（hot reloading）功能</p><p>当你修改了代码后，它能自动重新加载显示在浏览器上的页面或组件，从而大大提高开发效率</p></li><li><p><strong>webpack</strong>:</p><p>Webpack是一个现代JavaScript应用程序的静态模块打包器（module bundler）</p><p>它会分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式以供浏览器使用</p></li><li><p><strong>webpack-cli</strong>:</p><p>这个包提供了可以在命令行中使用的webpack命令，让你能够通过命令行方式来运行webpack的打包、构建等任务</p></li><li><p><strong>webpack-merge</strong>:</p><p>在实际开发过程中，我们常常需要针对不同的环境（如开发环境、生产环境）进行不同的配置，webpack-merge可以帮助我们轻松合并这些配置</p><p>这意味着你可以有一个基本的webpack配置文件，并根据不同的需求，将与环境相关的配置合并进来</p></li></ul><p>为什么创建Webpack项目需要这些包：</p><ul><li><strong>webpack</strong>是核心包，负责整个项目的模块打包和构建</li><li><strong>webpack-cli</strong>允许我们通过命令行接口来使用Webpack，为开发者提供了操作Webpack的便利方式</li><li><strong>webpack-dev-server</strong>提供了一个开发服务器，带有热更新特性，极大地提高了开发效率</li><li><strong>webpack-merge</strong>是为了更灵活地控制不同环境下的配置需求</li></ul>              </div>            </details><p><br /></p><h3 id="3-2-配置文件"><a href="#3-2-配置文件" class="headerlink" title="3.2-配置文件"></a>3.2-配置文件</h3><p>项目内创建<code>webpackConfig</code>目录，用来保存和<code>webpack</code>相关的配置文件，和项目文件分离出来</p><p><img src="https://s2.loli.net/2024/05/17/E9k6XNRBlow4Sgt.png" alt="image-20240517172236108"></p><h4 id="webpack-common-js公共配置文件"><a href="#webpack-common-js公共配置文件" class="headerlink" title="webpack.common.js公共配置文件"></a><code>webpack.common.js</code>公共配置文件</h4><h5 id="配置模块解析规则-resolve"><a href="#配置模块解析规则-resolve" class="headerlink" title="配置模块解析规则 resolve"></a>配置模块解析规则 resolve</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 引入Node.js的path模块</span></span><br><span class="line"><span class="comment"> * 该模块提供了一系列处理文件路径的函数。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 配置模块解析规则</span></span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="comment">// 后缀名自动补全，当引入模块时，可以不写具体的后缀名，这里指定了可用的后缀名列表</span></span><br><span class="line">        <span class="attr">extensions</span>: [</span><br><span class="line">            <span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.vue&#x27;</span>, <span class="string">&#x27;.css&#x27;</span>, <span class="string">&#x27;less&#x27;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// 配置别名，方便在import时使用简写，提高编码效率</span></span><br><span class="line">        <span class="attr">alias</span>: &#123;</span><br><span class="line">            <span class="comment">// 使用&#x27;@&#x27;作为简写，指向项目的src目录</span></span><br><span class="line">            <span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../src&#x27;</span>),</span><br><span class="line">            <span class="comment">// &#x27;cmp&#x27;别名指向组件目录，方便直接引入组件</span></span><br><span class="line">            <span class="string">&#x27;cmp&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../src/components&#x27;</span>),</span><br><span class="line">            <span class="comment">// &#x27;api&#x27;别名指向API接口目录，便于调用接口</span></span><br><span class="line">            <span class="string">&#x27;api&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../src/api&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" purple><summary> extensions的作用 </summary>              <div class='content'>              <p>在Webpack的配置文件中，<code>resolve.extensions</code> 数组用于指定哪些文件扩展名可以省略不写</p><p>当你尝试通过 <code>import</code> 或 <code>require</code> 语句导入一个模块，而没有指定文件扩展名时，Webpack将按照 <code>resolve.extensions</code> 数组中指定的顺序尝试解析文件扩展名</p><p>此功能的好处是，当你引入模块时可以不必每次都写上文件的扩展名，从而使得导入语句更简洁。这在一个大型项目中能显著提高开发效率</p><p>以一个Vue 3项目为例，Vue 3通常会使用 <code>.vue</code>文件，同时也可能会包含JavaScript <code>.js</code> 文件或是 TypeScript <code>.ts</code> 文件</p><p>假设你的文件结构如下，并且希望在导入一些文件时不必指定扩展名，只要你写入了上面的<code>resolve.extensions</code>配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">├── components</span><br><span class="line">│   └── MyComponent.vue</span><br><span class="line">└── main.js</span><br></pre></td></tr></table></figure><p>在<code>main.js</code>文件中，你可以像这样导入<code>MyComponent.vue</code>组件，而不需要指定文件扩展名：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">MyComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./components/MyComponent&#x27;</span></span><br></pre></td></tr></table></figure><p>由于<code>.vue</code>在<code>resolve.extensions</code>数组中列出，Webpack会自动解析<code>MyComponent</code>为<code>./components/MyComponent.vue</code></p><p>正确使用这个配置可以简化模块导入语句，减少冗余，提升开发体验</p>              </div>            </details><details class="folding-tag" purple><summary> alias的作用 </summary>              <div class='content'>              <p>在 Webpack 的配置文件中，<code>resolve.alias</code> 配置项允许你为模块路径设置一个或多个别名（alias），这使得在导入模块时可以使用这些简短、易懂的别名，而不是长且复杂的相对路径或绝对路径</p><p>这个功能对于提高代码的可读性和减少在大型项目中导入模块时路径查找的复杂性非常有帮助</p><p>使用 <code>resolve.alias</code> 可以让你在引入模块时更加方便</p><p>对于频繁访问的深层目录，你不再需要写出繁琐的相对路径，从而使代码更加清晰</p><p>假设你的 Vue 3 项目结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">project-root/</span><br><span class="line">├─ src/</span><br><span class="line">│  ├─ components/</span><br><span class="line">│  ├─ views/</span><br><span class="line">│  ├─ utils/</span><br><span class="line">│  └─ App.vue</span><br><span class="line">└─ ...</span><br></pre></td></tr></table></figure><p>在没有设置别名的情况下，如果你想从位于 <code>views</code> 目录下的某个组件中导入位于 <code>utils</code> 目录下的某个工具函数，你可能需要写出类似这样的导入语句：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; someUtilityFunction &#125; <span class="keyword">from</span> <span class="string">&#x27;../../utils/someUtilityFunction&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这种相对路径不仅难以阅读，而且当文件结构变动时，路径很可能会被破坏，需要手动更新路径</p><p>通过使用 <code>resolve.alias</code>，我们可以为 <code>utils</code> 目录设置一个别名</p><p>配置后，在项目中就可以使用别名来代替长路径了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; someUtilityFunction &#125; <span class="keyword">from</span> <span class="string">&#x27;@utils/someUtilityFunction&#x27;</span>;</span><br></pre></td></tr></table></figure><p>同理，<code>@</code> 别名被设置为 <code>src/</code> 目录的路径，因此你可以更方便地从项目的任何地方引用 <code>src</code> 目录下的文件</p><p>使用 <code>resolve.alias</code> 使得模块导入语句更短、清晰，并且当项目目录结构发生变化时，你只需要更新 <code>webpack.config.js</code> 中的相应别名配置，而不需要去每个文件中修改路径，极大提高了维护效率</p>              </div>            </details><p><br /></p><h5 id="配置入口文件entry"><a href="#配置入口文件entry" class="headerlink" title="配置入口文件entry"></a>配置入口文件entry</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ... other code ...</span><br><span class="line">    <span class="comment">// 配置入口文件</span></span><br><span class="line">    <span class="attr">entry</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../src/main.js&#x27;</span>),</span><br><span class="line">... other code ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" purple><summary> entry是什么 </summary>              <div class='content'>              <p>在Webpack的配置中，<code>entry</code> 属性用于定义入口点（或入口点集），指示Webpack从哪个文件开始构建依赖图</p><p>依赖图用于确定哪些模块和库是项目中需要被打包的</p><p>简单来说，<code>entry</code> 是Webpack开始构建打包过程的起点</p><p><code>entry</code> 的值可以是一个字符串、一个数组，或是一个对象</p><p>对于简单的单页面应用（SPA），通常使用字符串形式直接指向一个文件</p><p>对于更复杂的设置（例如，多页面应用或需要多个入口点的场景），则可以使用对象形式，以便为每个入口指定一个名称及其对应的起始文件</p>              </div>            </details><details class="folding-tag" purple><summary> Vue里面的main.js可以干什么 </summary>              <div class='content'>              <p>对于 Vue.js 项目，<code>main.js</code> 通常是最为常见的入口文件</p><p>在这个文件中，你会创建 Vue 实例，并指定该实例挂载(mount)到页面的哪个元素上</p><p>此外，<code>main.js</code> 也用于执行一些全局性的配置或初始化任务，比如：</p><ul><li>导入 Vue 框架本身</li><li>导入 App 组件，这是应用的根组件</li><li>配置路由(Vue Router)</li><li>配置状态管理(Vuex)，如果项目中使用了</li><li>引入和使用全局样式文件</li><li>配置全局插件、混入(mixins)或自定义指令等</li></ul><p>这表示Webpack将从 <code>src/main.js</code> 文件开始构建依赖图，并进一步分析该文件内部引用的其他模块和库，以决定哪些资源需要被打包</p><p>在 <code>main.js</code> 中，通常会有如下的几项关键任务：</p><ol><li><p><strong>创建和挂载根 Vue 实例</strong></p><p>Vue 应用由一个通过 <code>new Vue()</code> 创建的根 Vue 实例，以及通过 <code>.vue</code> 文件定义的可嵌套的组件树构成</p><p>main.js` 文件负责创建这个实例并将其挂载到 DOM 上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>全局配置</strong></p><p>在这个阶段，可能会设置Vue的一些全局配置项，比如关闭生产模式下的提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.productionTip = false;</span><br></pre></td></tr></table></figure></li><li><p><strong>插件和依赖的引入</strong></p><p>如果你的 Vue 项目中使用了 Vue Router、Vuex 或其他 Vue 插件，这些插件通常会在 <code>main.js</code> 中引入并配置</p><p>这确保了这些插件在 Vue 应用的任何地方都可用</p></li></ol>              </div>            </details><p><br /></p><h5 id="配置输出选项output"><a href="#配置输出选项output" class="headerlink" title="配置输出选项output"></a>配置输出选项output</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ... other code ...</span><br><span class="line">    <span class="comment">// 配置输出选项</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="comment">// 指定输出的文件名，[chunkhash:8]表示使用8位的块哈希值作为文件名的一部分</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;[name].[chunkhash:8].js&#x27;</span>,</span><br><span class="line">        <span class="comment">// 指定输出文件的路径</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../dist&#x27;</span>),</span><br><span class="line">        <span class="comment">// 启用异步块加载</span></span><br><span class="line">        <span class="attr">asyncChunks</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 设置资源的公共路径，对于在页面中引用的静态资源，都将以此路径为基础</span></span><br><span class="line">        <span class="attr">publicPath</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="comment">// 清除上一次打包构建出来的文件</span></span><br><span class="line">        <span class="attr">clean</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">... other code ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Webpack配置中，<code>output</code> 属性告诉Webpack如何写出它所创建的bundles（打包后的文件），以及在哪里写出它们</p><p>这个属性定义了打包过程生成的文件的输出方式和位置</p><p>它的配置对于确定你打包后的资源如何分发和使用至关重要</p><p><br /></p><h5 id="定义模块的规则配置module"><a href="#定义模块的规则配置module" class="headerlink" title="定义模块的规则配置module"></a>定义模块的规则配置module</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ... other code ...</span><br><span class="line">    <span class="comment">// 定义模块的规则配置</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            <span class="comment">// 这里是模块规则的数组，用于配置不同类型的文件如何被处理</span></span><br><span class="line">            <span class="comment">// 每个规则包括测试表达式（test）、加载器（loader）和选项（options）等</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">... other code ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写好之后进行下一步操作，后续随着配置增加，会给这个rules数组添加新东西</p><details class="folding-tag" purple><summary> module可以干什么 </summary>              <div class='content'>              <p><code>module</code> 属性用于决定如何处理项目中的不同类型的模块</p><p>Webpack 本身只能理解 JavaScript，如果你要导入 CSS、图片、字体文件，或者其他Web资源，就需要对这些资源使用不同的加载器（loader）</p><p>加载器可以预处理文件，使你能够将任何静态资源当作模块导入</p><p>在Webpack中，加载器可以转换文件，或者是作为其他打包或加载过程的中间步骤</p><p>你可以使用加载器告诉Webpack如何去给特定的文件赋予正确的加载器</p>              </div>            </details><p><br /></p><h5 id="插件配置数组plugins"><a href="#插件配置数组plugins" class="headerlink" title="插件配置数组plugins"></a>插件配置数组plugins</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ... other code ...</span><br><span class="line">    <span class="comment">// 插件配置数组</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="comment">// 这里放置项目使用的插件列表</span></span><br><span class="line">        <span class="comment">// 插件可以执行各种任务，如自动优化和压缩代码、注入环境变量等</span></span><br><span class="line">    ]</span><br><span class="line">... other code ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写好之后进行下一步操作，后续随着配置增加，会给这个数组添加新东西</p><details class="folding-tag" purple><summary> plugins可以干什么 </summary>              <div class='content'>              <p><code>plugins</code> 属性用于处理Webpack打包构建过程中的各种任务，扩展Webpack的功能</p><p>它们会在构建过程的不同阶段执行，能够完成各种各样的任务，比如打包优化、资源管理、注入环境变量等</p><p>Webpack插件是一个具有 <code>apply</code> 方法的JavaScript对象</p><p><code>apply</code> 方法会被Webpack compiler调用，并且在整个编译生命周期都可以访问compiler对象</p>              </div>            </details><p><br /></p><h4 id="webpack-dev-js开发环境配置文件"><a href="#webpack-dev-js开发环境配置文件" class="headerlink" title="webpack.dev.js开发环境配置文件"></a><code>webpack.dev.js</code>开发环境配置文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 合并基础的webpack配置文件与开发环境的特定配置。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@module</span> <span class="variable">exports</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; <span class="variable">base</span> - 来自webpack.common.js的基础配置对象。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">Object</span>&#125; 返回一个合并后的webpack配置对象，专用于开发环境。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; merge &#125; = <span class="built_in">require</span>(<span class="string">&quot;webpack-merge&quot;</span>) <span class="comment">// 引入webpack合并配置的工具</span></span><br><span class="line"><span class="keyword">const</span> base = <span class="built_in">require</span>(<span class="string">&quot;./webpack.common.js&quot;</span>) <span class="comment">// 引入基础的webpack配置文件</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">merge</span>(base, &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>, <span class="comment">// 设置为开发模式</span></span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>, <span class="comment">// 启用source-map，便于调试</span></span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">compress</span>: <span class="literal">true</span>, <span class="comment">// 启用gzip压缩</span></span><br><span class="line">        <span class="attr">port</span>: <span class="number">3000</span>, <span class="comment">// 设置监听的端口号</span></span><br><span class="line">        <span class="attr">hot</span>: <span class="literal">true</span>, <span class="comment">// 启用热更新</span></span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 自动打开浏览器</span></span><br><span class="line">        <span class="attr">historyApiFallback</span>: <span class="literal">true</span>, <span class="comment">// 使得HTML5 History API可以正常工作</span></span><br><span class="line">        <span class="attr">client</span>: &#123;</span><br><span class="line">            <span class="attr">progress</span>: <span class="literal">true</span>, <span class="comment">// 显示编译进度</span></span><br><span class="line">            <span class="attr">logging</span>: <span class="string">&#x27;error&#x27;</span>, <span class="comment">// 仅输出错误日志</span></span><br><span class="line">            <span class="attr">overlay</span>: &#123;</span><br><span class="line">                <span class="attr">errors</span>: <span class="literal">true</span>, <span class="comment">// 在浏览器上覆盖错误警告</span></span><br><span class="line">                <span class="attr">warnings</span>: <span class="literal">true</span> <span class="comment">// 在浏览器上覆盖警告</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">proxy</span>: &#123;</span><br><span class="line">            <span class="comment">// 设置对&quot;/apis&quot;开头的请求的代理</span></span><br><span class="line">            <span class="string">&quot;/apis&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">target</span>: <span class="string">&quot;your-target-url&quot;</span>, <span class="comment">// 目标服务器URL</span></span><br><span class="line">                <span class="attr">pathRewrite</span>: &#123;<span class="string">&quot;^/apis&quot;</span>: <span class="string">&quot;&quot;</span> &#125;, <span class="comment">// 将请求路径中的&quot;/apis&quot;移除</span></span><br><span class="line">                <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">// 设置请求的origin为目标服务器的origin</span></span><br><span class="line">                <span class="attr">secure</span>: <span class="literal">false</span> <span class="comment">// 目标服务器地址是否为https，false表示不是</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这段代码使用 <code>webpack-merge</code> 工具来合并基础的Webpack配置和开发环境特定的配置，生成一个适用于开发环境的Webpack配置对象</p><ol><li><p>引入了 “<code>webpack-merge</code>“ 模块的 “<code>merge</code>“ 函数</p><p><code>webpack-merge</code> 是一个可以简化多个Webpack配置合并的工具</p></li><li><p>引入了基础的Webpack配置文件 “<code>webpack.common.js</code>“</p><p>这个文件包含适用于开发和生产环境的通用配置</p></li><li><p>使用 “<code>module.exports</code>“ 导出了合并后的Webpack配置对象</p><p>我们通过调用 “<code>merge</code>“ 函数并传递基础配置（”<code>base</code>“）及开发特定配置实现配置的合并</p><p>合并的配置包括：</p><ul><li><code>mode: &#39;development&#39;</code>：设置Webpack的模式为开发模式。这会启用一些默认的Webpack优化，方便开发者进行调试</li><li><code>devtool: &quot;source-map&quot;</code>：启用source-map，这有助于调试代码，因为它可以让你看到原始代码而不是转换后的代码</li><li><code>devServer</code>：配置了Webpack的开发服务器（<code>webpack-dev-server</code>）的相关选项，提升开发体验<ul><li><code>compress: true</code>: 启用gzip压缩，加快文件传输速率</li><li><code>port: 3000</code>: 开发服务器监听的端口号设为3000</li><li><code>hot: true</code>: 启用热替换功能(HMR)，无需完全刷新浏览器就可以更新模块</li><li><code>open: true</code>: 在开发服务器启动时自动打开浏览器</li><li><code>historyApiFallback: true</code>: 当使用HTML5 History API时，任意的404响应都可能需要被替换为<code>index.html</code></li><li>client: 配置客户端执行期间的选项，如进度展示和日志级别<ul><li><code>progress: true</code>: 在客户端（浏览器）显示编译进度</li><li><code>logging: &#39;error&#39;</code>: 仅在客户端记录错误日志</li><li><code>overlay</code>: 在发生错误或警告时，通过覆盖层在浏览器上直接显示</li></ul></li></ul></li><li><code>proxy</code>: 配置了一个代理，用于在开发过程中跨域请求API<ul><li>对于以”/apis”开头的请求，请求会被代理到指定的 “<code>target</code>“ URL</li><li><code>pathRewrite</code> 用于重写URL路径，这里把路径中的”/apis”移除</li><li><code>changeOrigin</code>: 设置为true来伪装请求的源头，使目标服务器认为请求是从自己的域名发起的</li><li><code>secure: false</code>: 如果目标服务器不是HTTPS，这个选项要设置为false</li></ul></li></ul></li></ol><p><br /></p><h4 id="webpack-pros-js生产环境配置文件"><a href="#webpack-pros-js生产环境配置文件" class="headerlink" title="webpack.pros.js生产环境配置文件"></a><code>webpack.pros.js</code>生产环境配置文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; merge &#125; = <span class="built_in">require</span>(<span class="string">&quot;webpack-merge&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> base = <span class="built_in">require</span>(<span class="string">&quot;./webpack.common.js&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">merge</span>(base, &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">       </span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><br /></p><details class="folding-tag" purple><summary> 为什么webpack的配置文件要用module.exports </summary>              <div class='content'>              <p>使用 <code>module.exports</code> 来导出 <code>Webpack</code> 的配置文件是因为<code>Webpack</code>配置文件本质上是一个<code>Node.js</code>模块</p><p>在<code>Node.js</code>中，<code>module.exports</code> 是 <code>CommonJS</code> 规范的一部分，用于指定一个模块导出的内容，使其可以被其他模块通过 <code>require()</code> 函数导入和使用</p><p><code>Webpack</code> 本身是一个运行在 <code>Node.js</code> 环境中的模块打包工具，它的配置文件 <code>webpack.config.js</code> 就是一个普通的 <code>Node.js</code> 模块</p><p>当你运行 <code>webpack</code> 命令时，<code>Webpack</code> 会通过 <code>require()</code> 来加载这个配置文件，然后读取其中用 <code>module.exports</code> 导出的配置对象</p><p>这些配置包含了入口文件、输出路径、加载器（<code>loaders</code>）、插件（<code>plugins</code>）和其他配置项</p><p>使用 <code>module.exports</code> 的好处之一是它支持更加灵活和复杂的配置逻辑</p><p>由于 <code>webpack.config.js</code> 是一个普通的 <code>Node.js</code> 模块，你不仅可以导出一个对象，还可以在模块中使用 JavaScript 代码来生成配置</p><p>这意味着你可以根据不同的环境变量来动态地更改配置，或者根据需要编写和组合多个配置对象</p>              </div>            </details><p><br /></p><h4 id="修改script启动项目命令"><a href="#修改script启动项目命令" class="headerlink" title="修改script启动项目命令"></a>修改script启动项目命令</h4><p>运行这段命令，安装<code>cross-env</code>包，用于设置跨平台环境变量，通常用于设置NODE_ENV等环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cross-env --save-dev</span><br></pre></td></tr></table></figure><p>然后修改<code>package.json</code>文件的<code>script</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env NODE_ENV=development webpack serve --config ./webpackConfig/webpack.dev.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env NODE_ENV=production webpack --config ./webpackConfig/webpack.prod.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><ol><li><p>dev脚本</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env NODE_ENV=development webpack serve --config config/webpack.dev.js&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>cross-env</strong></p><p>这是一个跨平台的环境变量设置工具</p><p>确保无论在什么操作系统上（例如Windows，Linux，或macOS），都能以一致的方式设置和使用环境变量</p><p>在这里，它被用来设置<code>NODE_ENV</code>环境变量的值为<code>development</code></p></li><li><p><strong>NODE_ENV=development</strong></p><p>设置环境变量<code>NODE_ENV</code>的值为<code>development</code>，通常这个设置被用来通知脚本运行在开发环境中</p><p>很多工具和框架，如Webpack和Babel，会根据这个值调整它们的行为，例如启用更适合开发的配置（更详细的错误消息，源代码映射等）</p></li><li><p><strong>webpack serve</strong></p><p>这是启动Webpack的开发服务器<code>webpack-dev-server</code>的命令</p><p>webpack-dev-server`提供一个简单的web服务器和能够实时重新加载（live reloading）的能力</p></li><li><p><strong>—config config/webpack.dev.js</strong>:</p><p>这个参数告诉Webpack使用特定的配置文件启动</p><p>在这个例子里，使用的是<code>config/webpack.dev.js</code>文件</p><p>该文件应该包含了开发环境特定的Webpack配置</p></li></ul></li><li><p>build脚本</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env NODE_ENV=production webpack --config ./config/webpack.prod.js&quot;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>cross-env NODE_ENV=production</strong></p><p>类似于<code>dev</code>脚本，但这里设置的环境变量<code>NODE_ENV</code>的值为<code>production</code>，意味着接下来的操作是为生产环境准备的</p><p>在生产环境中，通常需要代码压缩、优化等操作，以确保应用运行高效、安全</p></li><li><p><strong>webpack</strong></p><p>这是启动Webpack的构建过程的命令</p><p>与<code>webpack serve</code>不同，这个命令是用于生成生产环境下使用的打包文件，并不启动一个开发服务器</p></li><li><p><strong>—config ./config/webpack.prod.js</strong></p><p>类似于<code>dev</code>脚本，但这里使用的是针对生产环境优化的Webpack配置文件：<code>webpack.prod.js</code></p></li></ul></li></ol><p><br /></p><h3 id="3-3-Vue系列"><a href="#3-3-Vue系列" class="headerlink" title="3.3-Vue系列"></a>3.3-Vue系列</h3><p>安装<code>Vue3</code>全家桶</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue3 vue-router pinia</span><br></pre></td></tr></table></figure><p>这时候会发现<code>package.json</code>文件的<code>dependencies</code>多出来3个<code>npm</code>包</p><p><img src="https://s2.loli.net/2024/05/20/CxLR8aoK6Ap1JHy.png" alt="image-20240520114428180"></p><p>这时候我们的<code>Vue3</code>已经安装好了，我们直接创建项目文件去测试打包</p><h4 id="新建src文件"><a href="#新建src文件" class="headerlink" title="新建src文件"></a>新建src文件</h4><p>这个目录是我们<code>Vue</code>项目的主要存放地方，所有<code>Vue</code>的东西都是包含在这里面的</p><h4 id="新建assets"><a href="#新建assets" class="headerlink" title="新建assets"></a>新建assets</h4><p>这个目录主要存放我们的资源：图片、字体、css</p><h4 id="新建apis"><a href="#新建apis" class="headerlink" title="新建apis"></a>新建apis</h4><p>这个目录主要存放我们的接口，分成不同的模块js文件去存放对应的接口</p><h4 id="新建utils"><a href="#新建utils" class="headerlink" title="新建utils"></a>新建utils</h4><p>这个目录主要存放我们的一些公共函数</p><h4 id="新建hooks"><a href="#新建hooks" class="headerlink" title="新建hooks"></a>新建hooks</h4><p>这个目录主要存放我们的一些hooks函数</p><h4 id="新建components"><a href="#新建components" class="headerlink" title="新建components"></a>新建components</h4><p>这个目录主要存放我们的公共组件</p><h4 id="新建store"><a href="#新建store" class="headerlink" title="新建store"></a>新建store</h4><p>这个目录是要存放公共状态管理，是<code>pinia</code>的使用入口</p><h4 id="新建views"><a href="#新建views" class="headerlink" title="新建views"></a>新建views</h4><p>这个目录存放项目的Vue主要页面</p><h4 id="新建main-js"><a href="#新建main-js" class="headerlink" title="新建main.js"></a>新建main.js</h4><p>这个文件是Webpack的项目入口，也是Vue的实例创建文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Description: Vue入口文件</span></span><br><span class="line"><span class="comment"> * @Author: 5t5</span></span><br><span class="line"><span class="comment"> * @Time: 2024/5/17 17:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 创建Vue</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入Pinia</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store/store&#x27;</span></span><br><span class="line">app.<span class="title function_">use</span>(store)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入Router</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/router&#x27;</span></span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>到此为止的目录结构如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">├─node<span class="emphasis">_modules     </span></span><br><span class="line"><span class="emphasis">├─src</span></span><br><span class="line"><span class="emphasis">│  ├─apis         // 项目接口</span></span><br><span class="line"><span class="emphasis">│  ├─assets       // css、图片、字体资源</span></span><br><span class="line"><span class="emphasis">│  │  ├─css</span></span><br><span class="line"><span class="emphasis">│  │  ├─fonts</span></span><br><span class="line"><span class="emphasis">│  │  └─images</span></span><br><span class="line"><span class="emphasis">│  ├─components   // 公共组件</span></span><br><span class="line"><span class="emphasis">│  ├─directive    // 自定义指令</span></span><br><span class="line"><span class="emphasis">│  ├─hooks        // hooks函数</span></span><br><span class="line"><span class="emphasis">│  ├─router       // 路由管理</span></span><br><span class="line"><span class="emphasis">│  ├─store        // Pinia状态管理</span></span><br><span class="line"><span class="emphasis">│  │  └─modules</span></span><br><span class="line"><span class="emphasis">│  ├─utils        // 公共工具函数</span></span><br><span class="line"><span class="emphasis">│  └─views        // 项目页面</span></span><br><span class="line"><span class="emphasis">│      ├─Home</span></span><br><span class="line"><span class="emphasis">│      └─Login</span></span><br><span class="line"><span class="emphasis">└─webpackConfig   // webpack公共、开发、生产配置</span></span><br></pre></td></tr></table></figure><h4 id="指定html文件"><a href="#指定html文件" class="headerlink" title="指定html文件"></a>指定html文件</h4><p>在项目的根目录下面新建一个<code>index.html</code>文件，内容如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpack Create Vue3<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code>这一段千万不能变，因为上面我们的<code>main.js</code>里面挂载到<code>#app</code>这个节点上面</p><p>所以如果这里的<code>id</code>改变的话，<code>main.js</code>里面的也要改变</p><p>接着运行这段命令，安装一下<code>html-webpack-plugin</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install html-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><p>这个插件可以帮助我们将打包好的文件都引入到<code>index.html</code>里面，不再需要我们自己手动去引入</p><p>修改<code>webpack.common.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ... other code ...</span><br><span class="line">    <span class="comment">// 插件配置数组</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="comment">// 这里放置项目使用的插件列表</span></span><br><span class="line">        <span class="comment">// 插件可以执行各种任务，如自动优化和压缩代码、注入环境变量等</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;./index.html&#x27;</span>,</span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&#x27;./index.html&#x27;</span>,</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;Vue3 + webpack -&gt; Web App&#x27;</span>,</span><br><span class="line">            <span class="attr">minify</span>: &#123;</span><br><span class="line">                <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>, <span class="comment">// 去掉空格</span></span><br><span class="line">                <span class="attr">removeComments</span>: <span class="literal">true</span> <span class="comment">// 去掉注释</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">    ]</span><br><span class="line">    ... other code ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" purple><summary> html-webpack-plugin可以干什么 </summary>              <div class='content'>              <p><code>html-webpack-plugin</code> 是一个用于处理 <code>HTML</code> 文件的 <code>Webpack</code> 插件，它非常的实用并且在 <code>Webpack</code> 项目中被广泛使用</p><p>它的主要功能包括：</p><ol><li><p>生成一个新的 <code>HTML</code> 文件</p><p>一旦插件被加入到 <code>webpack</code> 配置中，运行 <code>webpack</code> 打包后会在 <code>output</code> 指定的目录下生成一个新的 <code>HTML</code> 文件</p></li><li><p>自动引入打包生成的 <code>JavaScript</code> 和 <code>CSS</code> 文件</p><p>生成的 <code>HTML</code> 文件会自动包含 <code>webpack</code> 打包生成的所有 <code>JavaScript</code> 和 <code>CSS</code> 文件的引用。插件会自动添加 <code>script</code> 和 <code>link</code> 标签</p></li><li><p>可以使用模板</p><p>你可以自定义一个 <code>HTML</code> 文件作为模板</p><p>插件会以此模板为基础来生成最终的 <code>HTML</code> 文件</p><p>模板文件可以包含一些特殊的占位符，插件在生成 HTML 文件时会自动对这些占位符进行替换</p><p>例如，你可以在模板的 <code>title</code> 标签中使用 <code>&lt;%= htmlWebpackPlugin.options.title %&gt;</code>，这样就可以在 <code>webpack</code> 配置中通过 <code>html-webpack-plugin</code> 的 <code>options</code> 自定义你的 <code>title</code></p></li></ol><p>这个插件非常适合用来生成单页应用程序（SPA）的 <code>HTML</code> 文件</p><p>因为在这种应用程序中，通常只需要一个包含所有 <code>JavaScript</code> 和 <code>CSS</code> 引用的 <code>HTML</code> 文件</p><p>另外，你也可以在多页面应用程序（MPA）使用此插件，每个页面实例化一个插件的实例</p><p>它与 <code>webpack-dev-server</code> 的 <code>hot module replacement</code> 功能 (HMR) 无缝集成，使开发过程更为流畅</p>              </div>            </details><h4 id="让webpack可以识别Vue"><a href="#让webpack可以识别Vue" class="headerlink" title="让webpack可以识别Vue"></a>让webpack可以识别Vue</h4><p><code>webpack</code>是一个智能识别<code>js</code>文件的打包器，想要识别<code>vue</code>，就需要<code>vue</code>相关的加载器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-loader @vue/compiler-sfc --save-dev</span><br></pre></td></tr></table></figure><p><code>vue-loader</code> 和 <code>@vue/compiler-sfc</code> 是 Vue.js 单文件组件（Single File Components, SFC）的处理工具</p><p>它们在将 <code>.vue</code> 文件转换为 JavaScript 模块的过程中起到了核心作用</p><p>修改<code>webpack.common.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue-loader配置</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">VueLoaderPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;vue-loader&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ... other code ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义模块的规则配置</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            <span class="comment">// 这里是模块规则的数组，用于配置不同类型的文件如何被处理</span></span><br><span class="line">            <span class="comment">// 每个规则包括测试表达式（test）、加载器（loader）和选项（options）等</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 匹配.vue文件</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">                <span class="comment">// 使用vue-loader处理</span></span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&#x27;vue-loader&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 插件配置数组</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="comment">// 这里放置项目使用的插件列表</span></span><br><span class="line">        <span class="comment">// 插件可以执行各种任务，如自动优化和压缩代码、注入环境变量等</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// VueLoaderPlugin是一个Vue.js的加载器插件，它自动处理Vue组件的加载</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">VueLoaderPlugin</span>(),</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">... other code ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" purple><summary> @vue/compiler-sfc可以干什么 </summary>              <div class='content'>              <ul><li><code>@vue/compiler-sfc</code> 是 Vue 3 的一个官方库，主要用于编译 Vue 3 的单文件组件</li><li>它包含 Vue 3 的 SFC 编译逻辑，并负责将组件模板编译为渲染函数</li><li>使用这个库可以解析 <code>.vue</code> 文件的 <code>&lt;template&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;style&gt;</code> 以及其他自定义块，并编译模板成为渲染函数</li><li><code>@vue/compiler-sfc</code> 通常和 <code>vue-loader</code> 一同工作，在 webpack 构建流程中协同工作，进行源码到最终 JavaScript 代码的转换</li></ul>              </div>            </details><details class="folding-tag" purple><summary> vue-loader可以干什么 </summary>              <div class='content'>              <ul><li><p><code>vue-loader</code> </p><p>一个 webpack 的 loader，它允许你以一种名为单文件组件（SFCs）的格式编写 Vue 组件</p><p>SFCs 通常保存在扩展名为 <code>.vue</code> 的文件中</p></li><li><p><code>.vue</code> 文件是一个自定义的文件类型，它允许开发者将一个组件的模板、脚本和样式封装在单个文件中</p></li><li><p>在构建过程中，<code>vue-loader</code> 会解析文件，抽取每个语言块（template、script、style 等），并需要相应的 loader 来处理它们，例如 <code>vue-template-compiler</code> 用于模板编译、<code>css-loader</code> 用于处理 CSS、<code>babel-loader</code> 用于处理 JavaScript 等</p></li></ul>              </div>            </details><p><br /></p><h4 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h4><p>控制台输入<code>npm run dev</code></p><p>这时候编辑器会自动在打包好以后给你在浏览器打开端口3000的地址</p><p><img src="https://s2.loli.net/2024/05/20/AXjsW5o4YJR1FMx.png" alt="image-20240520161359316"></p><p><br /></p><h4 id="控制台警告"><a href="#控制台警告" class="headerlink" title="控制台警告"></a>控制台警告</h4><p>打开控制台会发现</p><blockquote><p>[!WARNING]</p><p>Feature flags <strong>VUE_OPTIONS_API</strong>, <strong>VUE_PROD_DEVTOOLS</strong>, <strong>VUE_PROD_HYDRATION_MISMATCH_DETAILS</strong> are not explicitly defined. You are running the esm-bundler build of Vue, which expects these compile-time feature flags to be globally injected via the bundler config in order to get better tree-shaking in the production bundle.</p></blockquote><p>这是因为你正在使用 Vue 的 ESM Bundler 构建，但没有在你的构建配置中显式地定义这些 Vue 的特性标志（Feature flag）</p><p>这些特性标志在 Vue 3 中用于启用或禁用 Vue 的一些特性</p><ul><li><p><code>__VUE_OPTIONS_API__</code></p><p>是否启用 Options API，如果你仅使用 Composition API，可以将其设置为 false，以减小最终的构建大小</p></li><li><p><code>__VUE_PROD_DEVTOOLS__</code></p><p>是否在生产环境中启用 Vue Devtools，如果不需要，可以设置为 false 来优化应用性能</p></li><li><p><code>__VUE_PROD_HYDRATION_MISMATCH_DETAILS__</code></p><p>对于服务器端渲染 (SSR) 的应用，是否应在生产环境中公开 hydration 不匹配细节，为了避免关键的信息泄露，可以设置为 false</p></li></ul><p>修改<code>webpack.common.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> webpack.<span class="title class_">DefinePlugin</span>(&#123;</span><br><span class="line">      <span class="attr">__VUE_OPTIONS_API__</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">__VUE_PROD_DEVTOOLS__</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">__VUE_PROD_HYDRATION_MISMATCH_DETAILS__</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br /></p><h3 id="3-4-样式系列"><a href="#3-4-样式系列" class="headerlink" title="3.4-样式系列"></a>3.4-样式系列</h3><p>在前端工程化里面，常用的预编译的<code>css</code>就是<code>less</code>、<code>scss</code>、<code>sass</code>，这里我们选用<code>less</code>来作为项目的预编译器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install css-loader style-loader less-loader less --save-dev</span><br></pre></td></tr></table></figure><p>修改<code>webpack.common.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue-loader配置</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">VueLoaderPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;vue-loader&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ... other code ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义模块的规则配置</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            <span class="comment">// 这里是模块规则的数组，用于配置不同类型的文件如何被处理</span></span><br><span class="line">            <span class="comment">// 每个规则包括测试表达式（test）、加载器（loader）和选项（options）等</span></span><br><span class="line">    </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 匹配.css文件</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                    <span class="comment">// 将CSS样式插入到DOM中</span></span><br><span class="line">                    <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">                    <span class="comment">// 处理CSS文件，支持模块化、压缩等</span></span><br><span class="line">                    <span class="string">&quot;css-loader&quot;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 匹配.less文件</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                    <span class="comment">// 将CSS样式插入到DOM中</span></span><br><span class="line">                    <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">                    <span class="comment">// 处理CSS文件，支持模块化、压缩等</span></span><br><span class="line">                    <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">                    <span class="comment">// 编译LESS到CSS</span></span><br><span class="line">                    <span class="string">&quot;less-loader&quot;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">... other code ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" purple><summary> 为什么样式的use需要这么写 </summary>              <div class='content'>              <ol><li><p><strong>处理顺序</strong></p><p><code>webpack</code> 使用 <code>loaders</code> 时遵循从右到左（或从下到上）的处理顺序</p><p>也就是说，在 <code>.less</code> 文件的处理链中，<code>less-loader</code> 首先工作，将 <code>LESS</code> 代码编译成 <code>CSS</code></p><p>然后 <code>css-loader</code> 处理得到的 <code>CSS</code> 代码，支持模块化等特性</p><p>最后 <code>style-loader</code> 将最终的 <code>CSS</code> 代码插入到 <code>DOM</code> 中</p><p>对于 <code>.css</code> 文件，由于不需要编译，所以不用 <code>less-loader</code></p></li><li><p><strong>功能划分</strong></p><p>每个 <code>loader</code> 都有自己的责任范围。<code>style-loader</code> 负责样式的加载到 <code>DOM</code>，<code>css-loader</code> 负责处理 CSS 文件中的依赖（如<code>@import</code>、<code>url()</code>等），<code>less-loader</code> 负责将 <code>LESS</code> 编译成 <code>CSS</code></p><p>这样的设计使得 <code>webpack</code> 配置更加灵活和模块化</p></li></ol>              </div>            </details><details class="folding-tag" purple><summary> css预编译是什么 </summary>              <div class='content'>              <p><code>CSS</code> 预编译器是一种用于扩展 <code>CSS</code> 语言的工具，它允许开发者使用更动态、更丰富的语法来书写样式，然后再将这些代码编译成标准的 <code>CSS</code> 文件，以便浏览器可以解析</p><p><code>CSS</code> 预编译器添加了许多编程特性，比如变量、嵌套规则、混入（<code>Mixins</code>）、函数等，这些特性使得编写 <code>CSS</code> 更加高效和可维护</p><ul><li><p><strong>Sass(SCSS)</strong></p><p>提供了很多高级功能，如变量，嵌套和混合等</p><p><code>Sass</code> 的语法是符合 <code>CSS3</code> 标准的，因此它看起来就像是增强了的 <code>CSS</code> 代码</p></li><li><p><strong>LESS</strong></p><p>与 Sass 类似，也提供了变量，嵌套，混合以及其他高级功能，主要差异在于语法和一些功能的实现</p></li><li><p><strong>Stylus</strong></p><p>提供了强大的功能和极其灵活的语法，与其他预处理器相比，它有着更加丰富的选择和高度的自定义</p></li></ul><p>使用 <code>CSS</code> 预处理器的好处包括：</p><ol><li><strong>更轻松地维护大型样式表</strong>：通过嵌套规则，可以更清晰地表示元素之间的层级关系</li><li><strong>代码的复用</strong>：使用混合（<code>mixins</code>），可以将一组属性从一个规则集引入到另一个规则集</li><li><strong>更快的开发速度</strong>：可以定义具有有参数的混合，以及使用循环构建复杂的样式网络</li><li><strong>更丰富的表现力</strong>：使用函数和条件语句可以更灵活地控制样式</li><li><strong>代码组织</strong>：允许分割 <code>CSS</code> 到多个文件中，可以有助于组织和管理样式代码</li></ol><p>这些预处理器通常需要使用特定的构建工具（如 <code>webpack</code> 或 <code>Gulp</code>）来编译为浏览器可解析的标准 <code>CSS</code> 文件</p><p>在现代 <code>web</code> 开发流程中，这些工具通常会集成在自动化构建系统中，以优化开发流程</p>              </div>            </details><p><br /></p><h2 id="四、优化项目"><a href="#四、优化项目" class="headerlink" title="四、优化项目"></a>四、优化项目</h2><h3 id="4-1-Javascript代码兼容"><a href="#4-1-Javascript代码兼容" class="headerlink" title="4.1-Javascript代码兼容"></a>4.1-Javascript代码兼容</h3><p>运行命令安装<code>npm</code>包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-loader @babel/core @babel/plugin-transform-runtime @babel/preset-env @babel/plugin-proposal-class-properties</span><br></pre></td></tr></table></figure><p>通过合并这些工具，你可以编写使用最新JavaScript语法（ES6/ES7及以上）的代码，然后将其转译为更广泛兼容的JavaScript版本（通常是ES5），以确保你的应用或网站可以在旧版浏览器和环境中运行</p><p>这对于前端项目来说是非常重要的，因为这意味着开发者可以利用最新的语言特性来编写更简洁、更易于维护的代码，同时又不牺牲兼容性</p><p>项目目录下新建<code>.babelrc</code>的配置文件并写入</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;presets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;@babel/preset-env&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;@babel/plugin-transform-runtime&quot;</span><span class="punctuation">,</span> <span class="string">&quot;@babel/plugin-proposal-class-properties&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>修改<code>webpack.common.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ... other code ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义模块的规则配置</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                    <span class="string">&#x27;babel-loader&#x27;</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">                </span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ... other code ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" purple><summary> babel-loader干什么的 </summary>              <div class='content'>              <p>这是一个Webpack的loader，用于在Webpack构建过程中调用Babel转译器</p><p>它允许Webpack处理JavaScript代码，将其通过Babel转换成浏览器兼容的版本</p>              </div>            </details><details class="folding-tag" purple><summary> @babel/plugin-transform-runtime干什么的 </summary>              <div class='content'>              <p>这个插件优化了Babel转译过程中的辅助代码</p><p>使用这个插件后，可以减少编译后代码的冗余（比如，避免多个文件重复包含同一辅助函数)，并能够使用<code>@babel/runtime</code>包来重复使用Babel转译的辅助代码</p>              </div>            </details><details class="folding-tag" purple><summary> @babel/plugin-proposal-class-properties干什么的 </summary>              <div class='content'>              <p>这个Babel插件使你能在JavaScript类中使用静态属性和实例属性的声明语法</p><p>此特性曾是草案提案的一部分，在未来版本的JavaScript正式标准中得到支持之前，这个插件可以让你在当前的JavaScript代码中使用这些特性</p>              </div>            </details><details class="folding-tag" purple><summary> @babel/core干什么的 </summary>              <div class='content'>              <p>Babel的核心功能包含在这个包中</p><p>它提供了Babel转译器的核心API，用于转译JavaScript代码</p><p>没有它，Babel的其他插件或预设都无法运行</p>              </div>            </details><details class="folding-tag" purple><summary> @babel/preset-env干什么的 </summary>              <div class='content'>              <p>一个Babel预设（preset）是一系列插件的集合，旨在支持特定的语言特性</p><p><code>@babel/preset-env</code>是一个智能预设，它能够根据你的目标环境（如特定版本的浏览器或Node.js）自动确定需要转译的JavaScript特性</p><p>它可以让你使用最新的JavaScript，而不用担心兼容性问题</p><p><code>@babel/preset-env</code>根据<code>browserslist</code>配置，只包含所需的Babel插件和polyfills来转译新的JavaScript语法，从而为你的目标环境量身定制输出</p>              </div>            </details><p><br /></p><h3 id="4-2-Css代码兼容"><a href="#4-2-Css代码兼容" class="headerlink" title="4.2-Css代码兼容"></a>4.2-Css代码兼容</h3><p>运行命令安装<code>npm</code>包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install postcss-loader postcss-flexbugs-fixes postcss-preset-env postcss-normalize autoprefixer postcss-nested --save-dev</span><br></pre></td></tr></table></figure><p><code>user-select</code>是一个很特殊的属性, 因为针对不同的浏览器要对它做不同的适配</p><p>这个写法兼容了这个属性</p><p>项目目录下创建<code>.browserslistrc</code>文件添加下面代码</p><p>用于指明想要支持的浏览器版本</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">last <span class="number">1</span> version</span><br><span class="line">&gt; <span class="number">1</span>%</span><br><span class="line">IE <span class="number">10</span></span><br></pre></td></tr></table></figure><p>项目目录下创建<code>postcss.config.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> flexbugsFixes = <span class="built_in">require</span>(<span class="string">&#x27;postcss-flexbugs-fixes&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> presetEnv = <span class="built_in">require</span>(<span class="string">&#x27;postcss-preset-env&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> normalize = <span class="built_in">require</span>(<span class="string">&#x27;postcss-normalize&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> nested = <span class="built_in">require</span>(<span class="string">&#x27;postcss-nested&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出一个配置对象，用于PostCSS的处理</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 标识这个配置是为PostCSS准备的</span></span><br><span class="line">    <span class="attr">ident</span>: <span class="string">&#x27;postcss&#x27;</span>,</span><br><span class="line">    <span class="comment">// 使用的插件列表</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        flexbugsFixes,</span><br><span class="line">        <span class="title function_">presetEnv</span>(&#123;</span><br><span class="line">            <span class="attr">autoprefixer</span>: &#123;</span><br><span class="line">                <span class="attr">flexbox</span>: <span class="string">&#x27;no-2009&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">stage</span>: <span class="number">3</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="title function_">normalize</span>(),</span><br><span class="line">        nested</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">sourceMap</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<code>webpack.common.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ... other code ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义模块的规则配置</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            </span><br><span class="line">    &#123;</span><br><span class="line">                <span class="comment">// 匹配.css文件的规则配置</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                    <span class="comment">// 根据开发环境选择使用style-loader或将CSS提取到单独的文件中</span></span><br><span class="line">                    <span class="title class_">IsDev</span> ? <span class="string">&quot;style-loader&quot;</span> : <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">                    <span class="comment">// 对CSS文件进行处理，支持模块化、压缩等操作</span></span><br><span class="line">                    <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;postcss-loader&quot;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">                </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 匹配.less文件的规则配置</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                    <span class="comment">// 同上，根据开发环境选择合适的CSS加载器</span></span><br><span class="line">                    <span class="title class_">IsDev</span> ? <span class="string">&quot;style-loader&quot;</span> : <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">                    <span class="comment">// 处理CSS文件，支持模块化、压缩等</span></span><br><span class="line">                    <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">                    <span class="comment">// 将LESS编译为CSS</span></span><br><span class="line">                    <span class="string">&quot;less-loader&quot;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">                </span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ... other code ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" purple><summary> postcss-loader可以干什么 </summary>              <div class='content'>              <p>用于在Webpack中集成PostCSS</p><p>它允许你使用PostCSS来处理CSS文件，通常与其他PostCSS插件配合使用</p>              </div>            </details><details class="folding-tag" purple><summary> postcss-flexbugs-fixes可以干什么 </summary>              <div class='content'>              <p>一个PostCSS插件，用于尝试修复一些常见的flexbox的bug</p>              </div>            </details><details class="folding-tag" purple><summary> postcss-preset-env可以干什么 </summary>              <div class='content'>              <p>这个插件包含了一组现代的CSS特性，使开发者可以使用未来CSS标准的语法，并且会根据浏览器的兼容情况自动做出适当的转换</p>              </div>            </details><details class="folding-tag" purple><summary> postcss-normalize可以干什么 </summary>              <div class='content'>              <p>根据<code>browserslist</code>配置和CSS规则自动引入适当的<code>normalize.css</code>内容，以确保不同浏览器之间的一致性</p>              </div>            </details><details class="folding-tag" purple><summary> autoprefixer可以干什么 </summary>              <div class='content'>              <p>一个自动添加浏览器前缀的PostCSS插件，使开发者编写的CSS规则兼容多种浏览器</p>              </div>            </details><details class="folding-tag" purple><summary> postcss-nested可以干什么 </summary>              <div class='content'>              <p>允许你在写CSS时使用嵌套语法，类似于Sass和Less之类的预处理器提供的功能</p>              </div>            </details><p><br /></p><h3 id="4-3-压缩Javascript代码"><a href="#4-3-压缩Javascript代码" class="headerlink" title="4.3-压缩Javascript代码"></a>4.3-压缩Javascript代码</h3><p>在开发环境中，通常更关注的是构建速度和增量构建的效率，以便快速预览和测试更改</p><p>因此，开发环境下一般不会开启压缩这样的耗时步骤</p><p>相对的，生产环境打包时的目标是减少应用的加载时间和网络传输成本，所以会使用<code>terser-webpack-plugin</code>这样的压缩工具来移除JavaScript代码中的所有多余空格、注释、未使用的代码等，以实现代码的最小化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install terser-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><p>修改<code>webpack.prod.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 压缩代码</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TerserPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;terser-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">merge</span>(base, &#123;</span><br><span class="line">    ... other code ...</span><br><span class="line">    </span><br><span class="line">    <span class="attr">optimization</span>: &#123;</span><br><span class="line">        <span class="attr">minimize</span>: <span class="literal">true</span>, <span class="comment">// 开启代码压缩</span></span><br><span class="line">        <span class="attr">minimizer</span>: [</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">TerserPlugin</span>(&#123; <span class="comment">// 使用TerserPlugin作为压缩工具</span></span><br><span class="line">                <span class="attr">terserOptions</span>: &#123;</span><br><span class="line">                    <span class="attr">mangle</span>: &#123; <span class="comment">// 代码混淆相关选项</span></span><br><span class="line">                        <span class="attr">safari10</span>: <span class="literal">true</span>, <span class="comment">// 处理Safari 10/11的bug，避免在这些老版本Safari浏览器中出现的“删除”bug（删除let和const变量会抛出错误）</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">compress</span>: &#123; <span class="comment">// 代码压缩相关选项</span></span><br><span class="line">                        <span class="comment">// 下面的选项都是用来指定terser在压缩过程中是否应用某些转换</span></span><br><span class="line">                        <span class="attr">arrows</span>: <span class="literal">false</span>, <span class="comment">// 不转换箭头函数为ES5函数表达式</span></span><br><span class="line">                        <span class="attr">collapse_vars</span>: <span class="literal">false</span>, <span class="comment">// 不折叠具有单一使用的变量</span></span><br><span class="line">                        <span class="attr">comparisons</span>: <span class="literal">false</span>, <span class="comment">// 不进行优化比较操作</span></span><br><span class="line">                        <span class="attr">computed_props</span>: <span class="literal">false</span>, <span class="comment">// 不优化计算属性</span></span><br><span class="line">                        <span class="attr">hoist_funs</span>: <span class="literal">false</span>, <span class="comment">// 不提升函数声明</span></span><br><span class="line">                        <span class="attr">hoist_props</span>: <span class="literal">false</span>, <span class="comment">// 不提升对象属性</span></span><br><span class="line">                        <span class="attr">hoist_vars</span>: <span class="literal">false</span>, <span class="comment">// 变量提升关闭 (var 声明会被提升至函数作用域的顶部)</span></span><br><span class="line">                        <span class="attr">inline</span>: <span class="literal">false</span>, <span class="comment">// 不内联函数</span></span><br><span class="line">                        <span class="attr">loops</span>: <span class="literal">false</span>, <span class="comment">// 不优化循环</span></span><br><span class="line">                        <span class="attr">negate_iife</span>: <span class="literal">false</span>, <span class="comment">// 不否定立即执行的函数表达式</span></span><br><span class="line">                        <span class="attr">properties</span>: <span class="literal">false</span>, <span class="comment">// 不优化属性访问</span></span><br><span class="line">                        <span class="attr">reduce_funcs</span>: <span class="literal">false</span>, <span class="comment">// 不内联仅用一次的函数</span></span><br><span class="line">                        <span class="attr">reduce_vars</span>: <span class="literal">false</span>, <span class="comment">// 不减少非常量变量的引用</span></span><br><span class="line">                        <span class="attr">switches</span>: <span class="literal">false</span>, <span class="comment">// 不移除switch的分支</span></span><br><span class="line">                        <span class="attr">toplevel</span>: <span class="literal">false</span>, <span class="comment">// 不删除顶级函数和变量定义</span></span><br><span class="line">                        <span class="attr">typeofs</span>: <span class="literal">false</span>, <span class="comment">// 不进行typeofs优化</span></span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">// 以下选项开启了一些常见的压缩优化策略</span></span><br><span class="line">                        <span class="attr">booleans</span>: <span class="literal">true</span>, <span class="comment">// 优化布尔表达式</span></span><br><span class="line">                        <span class="attr">if_return</span>: <span class="literal">true</span>, <span class="comment">// 优化if-return和if-continue</span></span><br><span class="line">                        <span class="attr">sequences</span>: <span class="literal">true</span>, <span class="comment">// 使用逗号运算符合并多个语句到一个表达式</span></span><br><span class="line">                        <span class="attr">unused</span>: <span class="literal">true</span>, <span class="comment">// 删除未使用的变量/function</span></span><br><span class="line">                        <span class="attr">conditionals</span>: <span class="literal">true</span>, <span class="comment">// 优化if-s和条件表达式</span></span><br><span class="line">                        <span class="attr">dead_code</span>: <span class="literal">true</span>, <span class="comment">// 移除不可到达的代码</span></span><br><span class="line">                        <span class="attr">evaluate</span>: <span class="literal">true</span>, <span class="comment">// 计算常量表达式</span></span><br><span class="line">                        <span class="attr">warnings</span>: <span class="literal">false</span>, <span class="comment">// 关闭Terser的警告信息，使构建输出更干净</span></span><br><span class="line">                        <span class="attr">drop_console</span>: <span class="literal">true</span>, <span class="comment">// 删除所有的console语句，可以减少最终输出的文件大小，对于生产环境是推荐的</span></span><br><span class="line">                        <span class="attr">pure_funcs</span>: [<span class="string">&#x27;console.log&#x27;</span>], <span class="comment">// 移除代码中的console.log调用</span></span><br><span class="line">                        <span class="comment">// 与drop_console相似，但是提供了更细致的控制，可以指定只删除某些特定的console方法</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">parallel</span>: <span class="literal">true</span>, <span class="comment">// 并行压缩以提升构建速度</span></span><br><span class="line">                <span class="attr">extractComments</span>: <span class="literal">false</span>, <span class="comment">// 不把注释提取到一个单独的文件中，即去掉所有注释</span></span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">... other code ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><details class="folding-tag" purple><summary> TerserPlugin解析 </summary>              <div class='content'>              <ol><li><p><code>optimization</code>配置</p><ul><li><p><strong>minimize</strong></p><p> 设置为<code>true</code>，表示启用代码压缩</p><p>这是生产环境构建时常用的设置，旨在减小最终生成文件的大小，以提高加载速度和执行效率</p></li><li><p><strong>minimizer</strong></p><p>这是一个数组，允许为压缩过程指定一个或多个压缩插件</p><p>在此配置中，使用了<code>TerserPlugin</code>作为压缩工具</p></li></ul></li><li><p><code>TerserPlugin</code>配置</p><ul><li><p><strong>parallel</strong></p><p>设置为<code>true</code>，启用并行压缩</p><p>这意味着将同时使用多个子进程来进行代码压缩，可以显著加快构建速度</p></li><li><p><strong>extractComments</strong></p><p>设置为<code>false</code>，表示不将注释抽取到单独的文件中，即去除代码中的所有注释</p><p>这有助于进一步减小文件体积</p></li></ul></li><li><p><code>terserOptions</code>配置</p><ul><li><p><code>mangle</code>配置</p><ul><li><p><strong>safari10</strong></p><p>设置为<code>true</code>可避免在Safari 10/11上发生的一个已知问题，即在这些早期版本的Safari浏览器中，错误地删除<code>let</code>和<code>const</code>声明可能会导致脚本错误</p></li></ul></li><li><p><code>compress</code>配置</p><ul><li><p><strong>arrows、collapse_vars、comparisons、computed_props、hoist_funs、hoist_props、hoist_vars、inline、loops、negate_iife、properties、reduce_funcs、reduce_vars、switches、toplevel、typeofs</strong></p><p>这些选项被设置为<code>false</code>，意味着在压缩过程中不应用这些特定的代码转换</p><p>这些设置保证了代码转换的精细控制，避免可能导致代码运行出现问题的激进优化策略</p></li><li><p><strong>booleans、if_return、sequences、unused、conditionals、dead_code、evaluate</strong></p><p>这些选项被设置为<code>true</code>，允许Terser应用这些常见的压缩优化策略，如优化布尔表达式、if-返回模式、无用代码的剔除等，以达到减少代码体积和提高执行效率的目的</p></li><li><p><strong>warnings</strong></p><p>设置为<code>false</code>以在压缩过程中不显示警告信息，使构建输出更干净</p></li><li><p><strong>drop_console</strong></p><p>设置为<code>true</code>以删除所有的console语句</p><p>这有助于在生产环境中减少文件大小，提升运行性能</p></li><li><p><strong>pure_funcs</strong></p><p>设置为<code>[&#39;console.log&#39;]</code>，指示Terser删除所有<code>console.log</code>调用</p><p>这是一种比<code>drop_console</code>更细粒度的控制方式，允许保留如<code>console.error</code>或<code>console.warn</code>等可能对调试有用的console调用</p></li></ul></li></ul></li></ol>              </div>            </details><details class="folding-tag" purple><summary> terser-webpack-plugin是干什么的 </summary>              <div class='content'>              <p><code>terser-webpack-plugin</code>是一个用于Webpack的插件</p><p>它的主要作用是在Webpack构建过程中压缩和优化JavaScript代码</p><p>这个插件使用Terser作为其压缩引擎，Terser是一个专为ES6+代码设计的JavaScript解析器和压缩器</p><p>通过去除代码中的所有不必要的字符（例如空格和注释）以及执行代码转换优化（如缩短变量名和删除未使用的代码），它能够减小JavaScript文件的大小，从而加快页面加载速度和提高应用程序的性能</p><p><code>terser-webpack-plugin</code>插件的主要特性包括：</p><ol><li><p><strong>删除未使用的代码</strong>（Dead code elimination）</p><p>删除那些已经写在代码中但实际上从未被执行或使用的部分</p></li><li><p><strong>压缩代码</strong></p><p>通过各种转换（如变量名缩短和优化逻辑表达式）来减少代码体积</p></li><li><p><strong>删除调试语句</strong></p><p>例如，可以配置插件来删除所有<code>console.log</code>语句</p></li><li><p><strong>支持ES6+语法</strong></p><p>能够压缩和优化ES6+语法的代码</p></li><li><p><strong>多线程压缩</strong></p><p>支持并行压缩，可以利用多核CPU加速代码的压缩过程</p></li><li><p><strong>自定义压缩选项</strong></p><p>用户可以通过自定义<code>terserOptions</code>来控制具体的压缩行为</p></li><li><p><strong>条件性注释的提取</strong></p><p>可以配置插件提取和保留特定的注释（例如版权声明）</p></li></ol><p>在使用<code>Webpack</code>进行现代<code>JavaScript</code>应用程序的构建过程中，压缩和优化代码是一个重要步骤</p><p><code>terser-webpack-plugin</code>提供了一个高效且灵活的方式来实现这一步骤，它可以帮助开发者缩短构建时间和减小最终生成文件的大小，改善用户体验</p>              </div>            </details><p><br /></p><h3 id="4-4-压缩Css代码"><a href="#4-4-压缩Css代码" class="headerlink" title="4.4-压缩Css代码"></a>4.4-压缩Css代码</h3><p>运行以下代码安装对应的<code>npm</code>包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install css-minimizer-webpack-plugin mini-css-extract-plugin -D</span><br></pre></td></tr></table></figure><p>修改<code>webpack.common.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Css提取分离</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;mini-css-extract-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否开发环境</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">IsDev</span> = process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ... other code ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义模块的规则配置</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 匹配.css文件的规则配置</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                    <span class="comment">// 根据开发环境选择使用style-loader或将CSS提取到单独的文件中</span></span><br><span class="line">                    <span class="title class_">IsDev</span> ? <span class="string">&quot;style-loader&quot;</span> : <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">                    <span class="comment">// 对CSS文件进行处理，支持模块化、压缩等操作</span></span><br><span class="line">                    <span class="string">&quot;css-loader&quot;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 匹配.less文件的规则配置</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                    <span class="comment">// 同上，根据开发环境选择合适的CSS加载器</span></span><br><span class="line">                    <span class="title class_">IsDev</span> ? <span class="string">&quot;style-loader&quot;</span> : <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">                    <span class="comment">// 处理CSS文件，支持模块化、压缩等</span></span><br><span class="line">                    <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">                    <span class="comment">// 将LESS编译为CSS</span></span><br><span class="line">                    <span class="string">&quot;less-loader&quot;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 插件配置数组</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">filename</span>:<span class="string">&#x27;[name]_[chunkhash:8].css&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    ... other code ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<code>webpack.prod.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 压缩Css代码</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CssMinimizerWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;css-minimizer-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">merge</span>(base, &#123;</span><br><span class="line">    ... other code ...</span><br><span class="line">    </span><br><span class="line">    <span class="attr">optimization</span>: &#123;</span><br><span class="line">        <span class="attr">minimize</span>: <span class="literal">true</span>, <span class="comment">// 开启代码压缩</span></span><br><span class="line">        <span class="attr">minimizer</span>: [</span><br><span class="line">            <span class="comment">// 使用css-minimizer-webpack-plugin插件实例进行CSS优化</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">CssMinimizerWebpackPlugin</span>(&#123;</span><br><span class="line">                <span class="comment">// 启用并行处理，提高构建性能，特别是在有大量CSS文件需要被压缩的情况下</span></span><br><span class="line">                <span class="attr">parallel</span>: <span class="literal">true</span>,</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// minimizerOptions用于传递选项到cssnano，它是css-minimizer-webpack-plugin背后的CSS压缩工具</span></span><br><span class="line">                <span class="attr">minimizerOptions</span>: &#123;</span><br><span class="line">                    <span class="comment">// &#x27;default&#x27;预设意味着使用cssnano的默认压缩选项，</span></span><br><span class="line">                    <span class="comment">// 这是一个适用于大多数场景的平衡配置，它既压缩了代码，也考虑了性能和兼容性</span></span><br><span class="line">                    <span class="attr">preset</span>: <span class="string">&#x27;default&#x27;</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;),</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">... other code ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><details class="folding-tag" purple><summary> css-minimizer-webpack-plugin是干什么的 </summary>              <div class='content'>              <p><code>mini-css-extract-plugin</code>是一个用于将CSS从JavaScript文件中提取到独立的CSS文件中的插件</p><p>这对于那些想要将CSS代码分离出来，以便单独缓存和加载的项目非常实用</p><p>它的主要特点包括：</p><ul><li><p><strong>分离CSS</strong></p><p>允许你将CSS从JavaScript中提取成单独的文件</p><p>这意味着CSS可以独立于JavaScript被浏览器加载和缓存，也就是说可以无需执行JavaScript就预先加载CSS</p></li><li><p><strong>异步加载</strong></p><p>支持加载非关键CSS，并异步加载次要的CSS文件，从而提升页面的渲染速度</p></li><li><p><strong>缓存优化</strong></p><p>由于CSS文件是独立的，这有助于客户端更高效地缓存它们，只有在文件发生变动时才需要重新下载</p></li></ul>              </div>            </details><details class="folding-tag" purple><summary> mini-css-extract-plugin是干什么的 </summary>              <div class='content'>              <p><code>css-minimizer-webpack-plugin</code> 是一个用于压缩和优化CSS资源的插件</p><p>它利用了各种CSS压缩器，如cssnano，以最小化CSS文件的大小</p><p>这对于生产环境特别有用，因为它可以减少CSS资源的加载时间，从而提高网页加载速度并提升用户体验</p><p>它的主要特点包括：</p><ul><li><p><strong>压缩CSS文件</strong></p><p>它可以减少CSS文件的大小，通过移除空格、注释、不必要的后缀等</p></li><li><p><strong>支持Source Maps</strong></p><p>它可以生成Source Maps，帮助开发人员在开发工具中跟踪CSS源代码</p></li><li><p><strong>使用PostCSS</strong></p><p>它通常使用PostCSS生态中的工具进行CSS处理</p></li></ul>              </div>            </details><p><br /></p><h3 id="4-5-自动引入Element-Plus组件"><a href="#4-5-自动引入Element-Plus组件" class="headerlink" title="4.5-自动引入Element Plus组件"></a>4.5-自动引入Element Plus组件</h3><p>项目使用的<code>UI</code>框架以<code>Element Plus</code>为例子，需要运行以下命令安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-plus @element-plus/icons-vue --save</span><br></pre></td></tr></table></figure><p>并且安装对应的自动导入的<code>webpack</code>插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D unplugin-vue-components unplugin-auto-import unplugin-icons</span><br></pre></td></tr></table></figure><p>这3个npm包截止目前2024年5月20日为止，最新的版本都是有问题的，运行的时候webpack会报错，类似</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TypeError: IconsResolver is not a function</span><br><span class="line">TypeError: Components is not a function</span><br><span class="line">TypeError: AutoImport is not a function</span><br></pre></td></tr></table></figure><p>所以为了解决这个问题，回退一下版本就可以了</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;unplugin-auto-import&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.16.1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;unplugin-icons&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.14.1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;unplugin-vue-components&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.25.0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>最后修改<code>webpack.common.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Element Plus</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AutoImport</span> = <span class="built_in">require</span>(<span class="string">&#x27;unplugin-auto-import/webpack&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Components</span> = <span class="built_in">require</span>(<span class="string">&#x27;unplugin-vue-components/webpack&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">ElementPlusResolver</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;unplugin-vue-components/resolvers&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">IconsResolver</span> = <span class="built_in">require</span>(<span class="string">&#x27;unplugin-icons/resolver&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Icons</span> = <span class="built_in">require</span>(<span class="string">&#x27;unplugin-icons/webpack&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ... other code ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 插件配置数组</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 配置自动导入组件的功能</span></span><br><span class="line"><span class="comment">         * 使用ElementPlusResolver以便自动解析并导入Element Plus组件库中的组件。</span></span><br><span class="line"><span class="comment">         * 这样做旨在避免手动导入组件，从而提高开发效率。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="title class_">AutoImport</span>(&#123;</span><br><span class="line">            <span class="attr">resolvers</span>: [</span><br><span class="line">                <span class="title class_">ElementPlusResolver</span>()</span><br><span class="line">            ]</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 注册组件的配置</span></span><br><span class="line"><span class="comment">         * 通过使用ElementPlusResolver，自动注册Element Plus组件库中的所有组件。</span></span><br><span class="line"><span class="comment">         * 使得这些组件在应用中可以直接使用，简化了组件注册流程。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="title class_">Components</span>(&#123;</span><br><span class="line">            <span class="attr">resolvers</span>: [</span><br><span class="line">                <span class="title class_">ElementPlusResolver</span>(),</span><br><span class="line">                <span class="title class_">IconsResolver</span>(&#123;</span><br><span class="line">                    <span class="comment">// 修改Icon组件前缀，不设置则默认为i,禁用则设置为false</span></span><br><span class="line">                    <span class="attr">prefix</span>: <span class="string">&#x27;icon&#x27;</span>,</span><br><span class="line">                    <span class="comment">// 仅启用名为&#x27;ep&#x27;的图标集合</span></span><br><span class="line">                    <span class="attr">enabledCollections</span>: [<span class="string">&#x27;ep&#x27;</span>],</span><br><span class="line">                &#125;)</span><br><span class="line">            ]</span><br><span class="line">        &#125;),</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 配置图标插件，自动安装所需的图标库</span></span><br><span class="line">        <span class="title class_">Icons</span>(&#123;</span><br><span class="line">            <span class="attr">autoInstall</span>: <span class="literal">true</span> <span class="comment">// 自动安装图标库</span></span><br><span class="line">        &#125;),</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">... other code ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br /></p><h3 id="4-6-运行进度展示"><a href="#4-6-运行进度展示" class="headerlink" title="4.6-运行进度展示"></a>4.6-运行进度展示</h3><p>修改<code>webpack.common.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ... other code ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 插件配置数组</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">new</span> webpack.<span class="title class_">ProgressPlugin</span>(), <span class="comment">// 运行进度</span></span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">... other code ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样子可以帮助我们清晰的知道<code>webpack</code>的打包进度</p><p><img src="https://s2.loli.net/2024/05/20/T7Sys8C1RcgU62W.png" alt="image-20240520173808174"></p><p><br /></p><h3 id="4-7-Css的Tree-Shaking"><a href="#4-7-Css的Tree-Shaking" class="headerlink" title="4.7-Css的Tree-Shaking"></a>4.7-Css的Tree-Shaking</h3><p>运行下面的命令安装<code>npm</code>包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install purgecss-webpack-plugin glob -D</span><br></pre></td></tr></table></figure><p><code>purgecss-webpack-plugin</code>和<code>glob</code>是两个Node.js的包</p><p>它们通常在使用Webpack进行前端项目构建时用于优化CSS</p><p>修改<code>webpack.prod.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Css Tree-Shaking优化</span></span><br><span class="line"><span class="keyword">const</span> glob = <span class="built_in">require</span>(<span class="string">&#x27;glob&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">PurgeCSSPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;purgecss-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ... other code ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 插件配置数组</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">PurgeCSSPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// paths是一个配置项，该项接受一个文件路径数组。</span></span><br><span class="line">            <span class="comment">// 这些路径指向你的项目中的HTML文件或者模板，以及可能包含CSS类的JavaScript组件文件。</span></span><br><span class="line">            <span class="attr">paths</span>: glob.<span class="title function_">sync</span>([</span><br><span class="line">                    <span class="comment">// path.join(__dirname, &#x27;./public/index.html&#x27;)生成了指向项目中的index.html文件的绝对路径。</span></span><br><span class="line">                    <span class="comment">// __dirname是Node.js中的一个全局变量，它返回当前正在执行的脚本所在的目录。</span></span><br><span class="line">                    path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;../index.html&#x27;</span>),</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// path.join(__dirname, &#x27;./src/**/*&#x27;)生成了一个glob模式，这个模式匹配src目录及其所有子目录下的所有文件。</span></span><br><span class="line">                    <span class="comment">// &#x27;./src/**/*&#x27; 是一个使用glob语法的模式字符串，表示src目录下的任意深度的所有文件。</span></span><br><span class="line">                    <span class="comment">// ** 是一个glob星号，匹配任意数量的目录和子目录。</span></span><br><span class="line">                    <span class="comment">// * 是一个glob星号，匹配任意数量的字符，除了路径分隔符（如/）。</span></span><br><span class="line">                    path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;../src/**/*&#x27;</span>),</span><br><span class="line">                ],</span><br><span class="line">                <span class="comment">// nodir选项设置为true，意味着返回的匹配结果中不包含目录路径，只有文件路径。</span></span><br><span class="line">                <span class="comment">// 这确保PurgeCSSPlugin只会接收到文件路径，而不是目录路径，因为插件需要文件内容来确定哪些CSS类是被使用的。</span></span><br><span class="line">                &#123;<span class="attr">nodir</span>: <span class="literal">true</span>&#125;),</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">... other code ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" purple><summary> purgecss-webpack-plugin是干什么的 </summary>              <div class='content'>              <p><code>purgecss-webpack-plugin</code>是Webpack的一个插件，用于从你的最终CSS文件中删除未使用的样式，从而减小CSS文件的大小，加快加载速度</p><p>在构建过程中，特别是在生产环境中，移除那些在HTML文件或者JSX/模板组件中没有用到的CSS规则可以显著减少文件大小，从而提高性能</p><p>使用<code>purgecss-webpack-plugin</code>通常涉及在webpack配置中引入并配置该插件，指定它应该检查的文件路径（例如HTML模板、JS/JSX文件等），以便于分析哪些CSS类被实际使用了。</p>              </div>            </details><details class="folding-tag" purple><summary> glob是干什么的 </summary>              <div class='content'>              <p><code>glob</code>是一个小而强大的Node.js库，提供了一种根据所提供的模式匹配对文件进行搜索的方式，模式匹配通常被称作 “globbing”</p><p><code>glob</code>的功能不仅限于Node.js脚本中使用，它也经常与其他工具和插件一起用于前端项目中，比如与<code>purgecss-webpack-plugin</code>一起使用来指定需要分析的文件集合</p><p>在与<code>purgecss-webpack-plugin</code>一起使用时，<code>glob</code>可以帮助定义要清除未使用CSS的文件路径的模式（比如：”src/<em>*/</em>.html”表示项目src目录下的所有HTML文件），这使得<code>purgecss-webpack-plugin</code>能够有效地识别和移除所有未使用的CSS样式</p>              </div>            </details><p><br /></p><h3 id="4-8-删除上一次打包残留的dist文件"><a href="#4-8-删除上一次打包残留的dist文件" class="headerlink" title="4.8-删除上一次打包残留的dist文件"></a>4.8-删除上一次打包残留的dist文件</h3><p>运行下面的命令安装<code>npm</code>包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install clean-webpack-plugin -D</span><br></pre></td></tr></table></figure><p>修改<code>webpack.prod.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 清除上次打包的残留</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ... other code ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 插件配置数组</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// cleanStaleWebpackAssets: 当值为true时，插件将会在构建完成后，</span></span><br><span class="line">            <span class="comment">// 清理Webpack在上一次构建时生成，但这一次构建未再次生成的文件资产（assets）。</span></span><br><span class="line">            <span class="comment">// 这是一个用于控制是否应该清理在重新构建时不再使用的旧文件的布尔值。</span></span><br><span class="line">            <span class="comment">// 默认情况下，这个值是true——每次只有新产生的文件会被保留，</span></span><br><span class="line">            <span class="comment">// 所有的旧文件会在下一次构建完成之后被删除。</span></span><br><span class="line">            <span class="attr">cleanStaleWebpackAssets</span>: <span class="literal">true</span>,</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// cleanOnceBeforeBuildPatterns: 这个选项允许你定义一个模式数组（patterns array），</span></span><br><span class="line">            <span class="comment">// 插件会在Webpack构建前根据这些模式清理文件和目录。</span></span><br><span class="line">            <span class="comment">// 不同的模式可以匹配不同的文件或目录，以供清理。</span></span><br><span class="line">            <span class="comment">// 在此例中，它使用glob模式，以确保Webpack在构建之前清理指定目录。</span></span><br><span class="line">            <span class="comment">// path.resolve(__dirname, &quot;../dist&quot;) 用于生成“dist”目录的绝对路径。</span></span><br><span class="line">            <span class="comment">// 通常 &quot;__dirname&quot; 是Node.js中的一个全局变量，</span></span><br><span class="line">            <span class="comment">// 它返回代表当前执行脚本所在的目录的路径。</span></span><br><span class="line">            <span class="comment">// 通过 &quot;..&quot; 返回到上一级目录，再与 &quot;dist&quot; 连接起来形成清理路径，</span></span><br><span class="line">            <span class="comment">// 确保不管在哪个工作目录下执行Webpack，指定的“dist”文件夹路径都是正确的。</span></span><br><span class="line">            <span class="attr">cleanOnceBeforeBuildPatterns</span>: [ path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../dist&quot;</span>) ]</span><br><span class="line">        &#125;),</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">... other code ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" purple><summary> clean-webpack-plugin可以干什么 </summary>              <div class='content'>              <p><code>CleanWebpackPlugin</code>是一个在每次构建前自动清理/删除Webpack的<code>output.path</code>目录中的所有文件的插件</p><p>这个插件确保你的输出目录只包含用当前配置和源代码生成的文件，从而避免了构建残留文件的积累</p><p>使用<code>CleanWebpackPlugin</code>的主要好处包括：</p><ol><li><p><strong>保持输出目录的清洁</strong></p><p>在新的构建过程中自动删除过时的文件，保证你的发布目录始终只包含最新的输出资源</p></li><li><p><strong>减少手动干预</strong></p><p>自动处理文件删除，减少了需要手动清理输出目录的情况，特别是在频繁构建的开发过程中</p></li><li><p><strong>避免潜在的构建错误</strong></p><p>有时候，旧的文件和新生成的文件冲突会引发意外的问题</p><p>通过清除旧文件，可以减少这种问题的发生</p></li><li><p><strong>简化部署过程</strong></p><p>确保你部署的只是新生成的文件，而不是一堆已经过时的资源</p></li></ol>              </div>            </details><p><br /></p><h3 id="4-9-图片资源处理"><a href="#4-9-图片资源处理" class="headerlink" title="4.9-图片资源处理"></a>4.9-图片资源处理</h3><p>webpack5不需要安装额外的loader来处理，直接写就可以</p><p>修改<code>webpack.common.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ... other code ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义模块的规则配置</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 处理图像文件的规则配置</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp|avif)(\?.*)?$/</span>, <span class="comment">// 匹配多种图像文件格式</span></span><br><span class="line">                <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>, <span class="comment">// 将图像文件作为资产处理</span></span><br><span class="line">                <span class="attr">parser</span>: &#123;</span><br><span class="line">                    <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">                        <span class="attr">maxSize</span>: <span class="number">10</span> * <span class="number">1024</span>, <span class="comment">// 图片大小小于10KB将会被转成base64</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">generator</span>: &#123;</span><br><span class="line">                    <span class="attr">filename</span>: <span class="string">&quot;static/images/[hash:8][ext]&quot;</span>, <span class="comment">// 输出文件的命名规则，在images目录下，使用8位哈希值加原始扩展名</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ... other code ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br /></p><h3 id="4-10-压缩图片"><a href="#4-10-压缩图片" class="headerlink" title="4.10-压缩图片"></a>4.10-压缩图片</h3><p>运行命令安装<code>npm</code>包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install image-minimizer-webpack-plugin imagemin imagemin-gifsicle imagemin-jpegtran imagemin-optipng imagemin-svgo --save-dev</span><br></pre></td></tr></table></figure><p>修改<code>webpack.prod.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ... other code ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义模块的规则配置</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 处理图像文件的规则配置</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp|avif)(\?.*)?$/</span>, <span class="comment">// 匹配多种图像文件格式</span></span><br><span class="line">                <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>, <span class="comment">// 将图像文件作为资产处理</span></span><br><span class="line">                <span class="attr">parser</span>: &#123;</span><br><span class="line">                    <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">                        <span class="attr">maxSize</span>: <span class="number">10</span> * <span class="number">1024</span>, <span class="comment">// 图片大小小于10KB将会被转成base64</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">generator</span>: &#123;</span><br><span class="line">                    <span class="attr">filename</span>: <span class="string">&quot;images/[hash:8][ext]&quot;</span>, <span class="comment">// 输出文件的命名规则，在images目录下，使用8位哈希值加原始扩展名</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ... other code ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图片压缩是一个计算密集型的过程，尤其是当你有大量图片需要处理时</p><p>这可能是导致你的打包过程变慢的原因</p><p>有一些方法可以尝试优化这一过程：</p><ol><li><p><strong>仅在生产构建中启用图片压缩</strong></p><p>你可以通过设置只在生产模式下启用这个插件来减少开发时的构建延迟</p></li><li><p><strong>并行处理</strong></p><p>如果可能的话，试着并行化图片的处理过程</p><p><code>ImageMinimizerPlugin</code>有一个<code>parallel</code>选项，可以显著加快处理速度，特别是在多核CPU上</p></li><li><p><strong>限制压缩的图片数量</strong></p><p>如果你的项目中有些图片不需要优化，可以配置规则来排除这些文件，从而减少处理时间</p></li><li><p><strong>预先压缩</strong></p><p>对于一些不经常变化的图片，可以考虑在添加到项目之前就手动压缩它们，避免在每次构建过程中重复压缩</p></li></ol><details class="folding-tag" purple><summary> image-minimizer-webpack-plugin是干什么的 </summary>              <div class='content'>              <p>这是一个Webpack插件，它允许你通过多种<code>imagemin</code>插件来优化构建过程中的图片</p><p>它的主要角色是作为图片压缩任务的协调者，调用不同的<code>imagemin</code>插件来处理不同格式的图片</p>              </div>            </details><details class="folding-tag" purple><summary> imagemin是干什么的 </summary>              <div class='content'>              <p>这是一个用于优化图片的模块</p><p>它本身不对图片进行优化，而是依赖于一系列插件来处理特定格式的图片</p>              </div>            </details><details class="folding-tag" purple><summary> imagemin-gifsicle是干什么的 </summary>              <div class='content'>              <p>用于优化GIF格式图片</p><p>它可以减少GIF文件的大小，而不会影响到动画效果或质量</p>              </div>            </details><details class="folding-tag" purple><summary> imagemin-jpegtran是干什么的 </summary>              <div class='content'>              <p>用于优化JPEG/JPG格式图片</p><p>它主要进行无损压缩，意味着图片质量不会降低</p>              </div>            </details><details class="folding-tag" purple><summary> imagemin-optipng是干什么的 </summary>              <div class='content'>              <p>用于优化PNG格式图片</p><p>它可以进行无损压缩，也可以通过调整优化级别来达到更高的压缩率，但可能会影响图片质量</p>              </div>            </details><details class="folding-tag" purple><summary> imagemin-svgo是干什么的 </summary>              <div class='content'>              <p>针对SVG格式图片的优化工具</p><p>SVGO可以去除SVG文件中的不必要的信息，比如编辑器元数据、注释、隐藏的元素等，从而减小文件大小</p>              </div>            </details><p><br /></p><h3 id="4-11-公共代码提取"><a href="#4-11-公共代码提取" class="headerlink" title="4.11-公共代码提取"></a>4.11-公共代码提取</h3><p>一些概念了解：</p><ul><li><p><strong>module</strong></p><p>简单来说就是你通过import语句引入的代码，一个js文件就是一个module</p></li><li><p><strong>chunk</strong></p><p> chunk是webpack根据功能拆分出来的，包含三种情况：</p><ul><li>你的项目入口（entry）</li><li>通过import()动态引入的代码</li><li>通过splitChunks拆分出来的代码（公共代码）<br>chunk包含着module，可能是一对多也可能是一对一。</li></ul></li><li><p><strong>bundle</strong></p><p>bundle是webpack打包之后的各个文件，一般就是和chunk是一对一的关系</p><p>bundle就是对chunk进行编译压缩打包等处理之后的产出</p><ul><li>通过splitChunks拆分出来的chunk不能算作bundle</li><li>bundle只指入口entry和import()动态导入生成的chunk （这样的bundle和chunk才是一对一的关系）<ul><li>一个entry对应一个chunk</li><li>一个import()动态导入对应一个chunk</li></ul></li></ul></li></ul><p>修改<code>webpack.prod.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ... other code ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义模块的规则配置</span></span><br><span class="line">    <span class="attr">optimization</span>: &#123;</span><br><span class="line">        <span class="comment">// splitChunks 用于控制如何拆分代码块</span></span><br><span class="line">        <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">            <span class="attr">chunks</span>: <span class="string">&quot;all&quot;</span>, <span class="comment">// 对所有类型的chunks进行拆分（包括动态和非动态模块）</span></span><br><span class="line">            <span class="attr">minSize</span>: <span class="number">20000</span>, <span class="comment">// 新chunk的最小体积为20KB</span></span><br><span class="line">            <span class="attr">maxAsyncRequests</span>: <span class="number">6</span>, <span class="comment">// 每个异步加载的模块最多能被拆分成6个chunks</span></span><br><span class="line">            <span class="attr">maxInitialRequests</span>: <span class="number">6</span>, <span class="comment">// 入口点的最大并行请求数量</span></span><br><span class="line">            <span class="attr">enforceSizeThreshold</span>: <span class="number">50000</span>, <span class="comment">// 忽视其他限制，强制拆分体积为50KB的chunks</span></span><br><span class="line">            <span class="comment">// cacheGroups 用于定义如何共享模块/合并chunks</span></span><br><span class="line">            <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">                <span class="attr">libs</span>: &#123; <span class="comment">// 针对从node_modules中导入的模块</span></span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&quot;chunk-libs&quot;</span>,</span><br><span class="line">                    <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]/</span>, <span class="comment">// 指定是node_modules下的模块</span></span><br><span class="line">                    <span class="attr">priority</span>: <span class="number">10</span>, <span class="comment">// 优先级</span></span><br><span class="line">                    <span class="attr">chunks</span>: <span class="string">&quot;initial&quot;</span> <span class="comment">// 仅对入口块进行处理</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">echarts</span>: &#123; <span class="comment">// 针对ECharts的单独拆分</span></span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&quot;chunk-echarts&quot;</span>,</span><br><span class="line">                    <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]echarts[\\/]/</span>,</span><br><span class="line">                    <span class="attr">priority</span>: <span class="number">20</span> <span class="comment">// 优先级高于libs</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">elementPlus</span>: &#123; <span class="comment">// Element Plus 单独拆包</span></span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&quot;chunk-elementPlus&quot;</span>,</span><br><span class="line">                    <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]element-plus[\\/]/</span>, <span class="comment">// 更新匹配 Element Plus 的路径</span></span><br><span class="line">                    <span class="attr">priority</span>: <span class="number">20</span> <span class="comment">// 权重要大于 libs</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">src</span>: &#123; <span class="comment">// 对src目录下的文件进行拆分</span></span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&quot;chunk-src&quot;</span>,</span><br><span class="line">                    <span class="attr">test</span>: <span class="regexp">/[\\/]src[\\/]/</span>,</span><br><span class="line">                    <span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">                    <span class="attr">priority</span>: <span class="number">10</span> <span class="comment">// 优先级等于libs，但因为特定配置可能在实际中优先级表现不同</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">commons</span>: &#123; <span class="comment">// 针对公共模块的拆分</span></span><br><span class="line">                    <span class="attr">name</span>: <span class="string">`chunk-commons`</span>,</span><br><span class="line">                    <span class="attr">minChunks</span>: <span class="number">2</span>, <span class="comment">// 最小引用次数</span></span><br><span class="line">                    <span class="attr">priority</span>: <span class="number">0</span>, <span class="comment">// 低优先级</span></span><br><span class="line">                    <span class="attr">reuseExistingChunk</span>: <span class="literal">true</span> <span class="comment">// 如果一个模块已经被打包过，则复用它而不是再次打包</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ... other code ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" purple><summary> splitChunks是干什么的 </summary>              <div class='content'>              <p><code>splitChunks</code> 是一个 Webpack 的配置选项，用于优化输出包的大小和加载性能</p><p>它的主要目的是从你的代码中自动提取和分割出通用的依赖模块、第三方库或者自定义的重复代码块到独立的文件(chunks)中</p><p>这样做的好处有很多：</p><ol><li><p><strong>减少重复</strong></p><p>通过将公共的代码分割成独立的chunks，多个入口或懒加载的模块可以共享相同的依赖，避免在每个bundle中重复打包相同的代码</p></li><li><p><strong>缓存优化</strong></p><p>分割出来的公共代码块通常变化较少，因此通过浏览器缓存可以减少加载时间</p></li><li><p><strong>并行加载</strong></p><p>将大的代码块拆分成更小的块可以并行加载，提高加载速度</p></li><li><p><strong>按需加载</strong></p><p>对于路由懒加载的场景，splitChunks可以帮助实现更细粒度的代码分割，按需加载资源，进一步减少首屏加载时间</p></li></ol><p>Webpack中的<code>splitChunks</code>配置提供了多种细粒度的控制选项，包括但不限于：</p><ul><li><p><code>chunks</code></p><p>指定哪些类型的块应该被拆分</p><p>可以是<code>initial</code>（只对入口文件处理）、<code>async</code>（只对异步加载的模块处理）和<code>all</code>（全部块）</p></li><li><p><code>minSize</code></p><p>生成块的最小大小。如果拆分后的块小于此值，则不会被拆分</p></li><li><p><code>maxAsyncRequests</code></p><p>按需加载时并行请求的最大数量</p></li><li><p><code>maxInitialRequests</code></p><p>入口点的最大并行请求数量</p></li><li><p><code>name</code></p><p>拆分块的名称。可以是固定的字符串或者函数返回值</p></li><li><p><code>cacheGroups</code></p><p>缓存组可以继承和/或覆盖splitChunks中的任何选项</p><p>通过cacheGroups，可以实现更细粒度的拆分策略，比如将React和Vue等框架代码拆分到独立的文件</p></li></ul>              </div>            </details><p><br /></p><h3 id="4-12-分割代码按需加载"><a href="#4-12-分割代码按需加载" class="headerlink" title="4.12-分割代码按需加载"></a>4.12-分割代码按需加载</h3><p>修改<code>webpack.common.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ... other code ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 配置输出选项</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="comment">// 指定输出的文件名，[chunkhash:8]表示使用8位的块哈希值作为文件名的一部分</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;[name].[chunkhash:8].js&#x27;</span>,</span><br><span class="line">        <span class="comment">// 指定输出文件的路径</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../dist&#x27;</span>),</span><br><span class="line">        <span class="comment">// 启用异步块加载</span></span><br><span class="line">        <span class="attr">asyncChunks</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 设置资源的公共路径，对于在页面中引用的静态资源，都将以此路径为基础</span></span><br><span class="line">        <span class="attr">publicPath</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="comment">// 清除上一次打包构建出来的文件</span></span><br><span class="line">        <span class="attr">clean</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 用于指定非入口(non-initial) chunk 文件的名称，这通常是用于懒加载模块时Webpack按需加载的块</span></span><br><span class="line">        <span class="attr">chunkFilename</span>: <span class="string">&#x27;[name].js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ... other code ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>chunkFilename</code> 用于指定非入口(non-initial) chunk 文件的名称，这通常是用于懒加载模块时Webpack按需加载的块</p><p>这意味着，这些异步加载的块将以它们各自的 chunk 名称命名，不包含哈希值</p><p>在实际应用中，它有助于区分主bundle文件和异步加载的chunk文件</p><p><br /></p><h3 id="4-13-查看编译速度"><a href="#4-13-查看编译速度" class="headerlink" title="4.13-查看编译速度"></a>4.13-查看编译速度</h3><p>运行命令安装npm包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install speed-measure-webpack-plugin -D</span><br></pre></td></tr></table></figure><p>新建一个<code>webpack.analysis.js</code>文件</p><p>这个文件不会输出dist文件，只是进行<code>webpack</code>的分析</p><p>执行编译速度分析一般都是针对需要极致性能的生产环境，所以开发环境就不配置分析了</p><p>修改<code>webpack.analysis.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; merge &#125; = <span class="built_in">require</span>(<span class="string">&quot;webpack-merge&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> prodConfig = <span class="built_in">require</span>(<span class="string">&quot;./webpack.prod.js&quot;</span>)</span><br><span class="line"><span class="comment">// 构建速度分析</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">SpeedMeasurePlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;speed-measure-webpack-plugin&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> smp = <span class="keyword">new</span> <span class="title class_">SpeedMeasurePlugin</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = smp.<span class="title function_">wrap</span>(</span><br><span class="line">    <span class="title function_">merge</span>(prodConfig, &#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><details class="folding-tag" purple><summary> speed-measure-webpack-plugin可以干什么 </summary>              <div class='content'>              <p><code>speed-measure-webpack-plugin</code>（简称 SMP）是一个用于测量各个插件和加载器(<code>loaders</code>)在Webpack构建过程中的速度的webpack插件</p><p>它对于优化构建时间非常有用，因为它可以帮助你明确地看到构建过程中每一步的耗时，从而识别出哪些部分可能需要优化</p><ul><li><p><strong>性能监测</strong></p><p>它会显示Webpack构建过程中每个插件和loader的处理时间，帮助你理解构建时间被怎样花费的</p></li><li><p><strong>优化指导</strong></p><p>通过准确的性能数据，你可以优先对耗时最长的部分进行优化，以提高构建速度</p></li><li><p><strong>配置简单</strong></p><p>集成到现有的Webpack配置中非常简单，只需要几行代码即可启动和运行</p></li></ul>              </div>            </details><p><br /></p><h3 id="4-14-多进程"><a href="#4-14-多进程" class="headerlink" title="4.14-多进程"></a>4.14-多进程</h3><p>运行命令安装npm包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install thread-loader -D</span><br></pre></td></tr></table></figure><details class="folding-tag" purple><summary> thread-loader可以干什么 </summary>              <div class='content'>              <p><code>thread-loader</code> 是一个Webpack的加载器，它可以将资源文件的加载和处理工作分配到一个独立的worker线程池中去执行</p><p>这样做可以显著提高构建速度，特别是在处理大量和耗时的任务时（如大型项目中的Babel转译），因为这允许你利用多核CPU的能力来并行处理任务</p><ul><li><p><strong>并行处理</strong></p><p>在多个worker线程中并行处理模块，使得资源文件的转译和加载更加快速</p></li><li><p><strong>提高构建效率</strong></p><p>通过减少主线程的负载，使得Webpack的构建过程更加高效</p></li><li><p><strong>可配置的</strong></p><p>你可以控制线程的数量，优化构建性能和资源的使用</p></li></ul>              </div>            </details><p>修改<code>webpack.common.js</code>文件</p><p>将<code>thread-loader</code>放在其他比较耗时的加载器之前</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ... other code ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义模块的规则配置</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                    <span class="string">&#x27;thread-loader&#x27;</span>, <span class="comment">// 在这里添加`thread-loader`</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                        <span class="attr">options</span>: &#123;</span><br><span class="line">                            <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">                </span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ... other code ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br /></p><h3 id="4-15-精简终端输出"><a href="#4-15-精简终端输出" class="headerlink" title="4.15-精简终端输出"></a>4.15-精简终端输出</h3><p>如果觉得控制台的输出很多，很乱，你可以进行精简</p><p>修改<code>webpack.dev.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="attr">stats</span>: <span class="string">&#x27;errors-only&#x27;</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><br /></p><h3 id="4-16-字体资源处理"><a href="#4-16-字体资源处理" class="headerlink" title="4.16-字体资源处理"></a>4.16-字体资源处理</h3><p>修改<code>webpack.common.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ... other code ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义模块的规则配置</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/.(woff2?|eot|ttf|otf)$/</span>, <span class="comment">// 匹配字体图标文件</span></span><br><span class="line">                <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>, <span class="comment">// type选择asset</span></span><br><span class="line">                <span class="attr">parser</span>: &#123;</span><br><span class="line">                    <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">                        <span class="attr">maxSize</span>: <span class="number">10</span> * <span class="number">1024</span>, <span class="comment">// 小于10kb转base64位</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">generator</span>:&#123;</span><br><span class="line">                    <span class="attr">filename</span>:<span class="string">&#x27;static/fonts/[hash:8][ext]&#x27;</span>, <span class="comment">// 文件输出目录和命名</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ... other code ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br /></p><h3 id="4-18-打包生成gz"><a href="#4-18-打包生成gz" class="headerlink" title="4.18-打包生成gz"></a>4.18-打包生成gz</h3><p><br /></p><h3 id="4-19-打包分析"><a href="#4-19-打包分析" class="headerlink" title="4.19-打包分析"></a>4.19-打包分析</h3><p>运行命令安装npm包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-bundle-analyzer -D</span><br></pre></td></tr></table></figure><p>修改<code>webpack.analysis.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入分析打包结果插件</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">BundleAnalyzerPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack-bundle-analyzer&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = smp.<span class="title function_">wrap</span>(<span class="title function_">merge</span>(prodConfig, &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">BundleAnalyzerPlugin</span>() <span class="comment">// 配置分析打包结果插件</span></span><br><span class="line">    ]</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p><br /></p><h3 id="4-20-开启缓存"><a href="#4-20-开启缓存" class="headerlink" title="4.20-开启缓存"></a>4.20-开启缓存</h3><p>开启持久化缓存（Webpack5 新特性），缓存生成的 webpack 模块和 chunk，来改善构建速度</p><p>首次构建耗时增加 15% 左右，但是二次构建耗时减少 90% 左右</p><p>修改<code>webpack.dev.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">merge</span>(base, &#123;</span><br><span class="line">    <span class="attr">cache</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;filesystem&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><br /></p><h3 id="4-21-编译过程美化"><a href="#4-21-编译过程美化" class="headerlink" title="4.21-编译过程美化"></a>4.21-编译过程美化</h3><p>运行命令安装npm包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @nuxt/friendly-errors-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><p>这个插件可以帮助我们优化构建过程的<code>webpack</code>在终端的输出，可以直接体验</p><p>修改<code>webpack.dev.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译过程终端美化</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">FriendlyErrorsWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;@nuxt/friendly-errors-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">merge</span>(base, &#123;</span><br><span class="line">     <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FriendlyErrorsWebpackPlugin</span>()</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><br /></p><h3 id="4-22-进度条美化"><a href="#4-22-进度条美化" class="headerlink" title="4.22-进度条美化"></a>4.22-进度条美化</h3><p>运行命令安装npm包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D webpackbar</span><br></pre></td></tr></table></figure><p>觉得webpack提供的默认进度条不是很好看，可以下载这个包</p><p>并替换掉<code>new webpack.ProgressPlugin()</code></p><p>修改<code>webpack.dev.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">merge</span>(base, &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="comment">// 进度条插件：用于显示webpack构建的进度</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">WebpackBar</span>(&#123;</span><br><span class="line">            <span class="attr">color</span>: <span class="string">&quot;#85d&quot;</span>,  <span class="comment">// 默认green，进度条颜色支持HEX</span></span><br><span class="line">            <span class="attr">basic</span>: <span class="literal">false</span>,   <span class="comment">// 默认true，启用一个简单的日志报告器</span></span><br><span class="line">            <span class="attr">profile</span>:<span class="literal">false</span>,  <span class="comment">// 默认false，启用探查器。</span></span><br><span class="line">        &#125;),</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><br /></p><h3 id="4-23-Eslint配置代码规范"><a href="#4-23-Eslint配置代码规范" class="headerlink" title="4.23-Eslint配置代码规范"></a>4.23-Eslint配置代码规范</h3><p>运行命令安装npm包</p><p>为什么安装8.57.0的版本呢？因为9的版本实在是太难用了，跟以前的配置完全不一样</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install eslint@8.57.0 eslint-plugin-vue --save-dev</span><br></pre></td></tr></table></figure><p>ESLint 是一款非常流行的JavaScript和JSX代码检测工具</p><p>主要原因在于它可以帮助开发者保持代码质量并确保代码风格的一致性</p><p>以下是使用ESLint的一些主要理由：</p><ol><li><p><strong>提高代码质量</strong></p><p>ESLint可以检测代码中的错误，比如未使用的变量、循环中错误的逻辑判断、语法错误等，这些都是在代码审查中可能漏检的错误</p><p>通过自动检测，可以在代码提交前发现并修正它们，从而避免了潜在的运行时错误</p></li><li><p><strong>保持代码风格一致性</strong></p><p>在团队开发过程中，不同的开发者可能有不同的代码编写习惯，这可能会导致项目中出现不一致的代码风格</p><p>ESLint 通过强制执行一套预定的规则（如缩进、分号使用、变量命名规范等），帮助团队成员保持代码的一致性，使得代码更易于读写和维护</p></li><li><p><strong>促进团队协作</strong></p><p>当团队成员使用ESLint，并遵循相同的代码规范时，会减少代码审查时的摩擦和误解</p><p>这不仅可以提高开发效率，也能促进团队间的沟通和协作</p></li><li><p><strong>自定义和灵活性</strong></p><p>ESLint提供了大量的内建规则，并且允许开发者自定义规则，这意味着你可以根据自己或团队的需求调整规则</p><p>此外，你还可以使用社区提供的配置集合，如<code>airbnb</code>、<code>google</code>等，或者集成到现有的构建系统中</p></li><li><p><strong>减少审查时间和成本</strong></p><p>自动检测代码中的问题可以显著减少人工代码审查所需的时间和精力</p><p>开发者可以集中精力解决更复杂的问题，而非一些基础的编码规范问题</p></li><li><p><strong>促进学习和指导</strong></p><p>对于新手开发者来说，ESLint不仅可以指出代码中的错误，还可以提供错误修正的建议，这对于学习JavaScript语言和提升编码技能非常有帮助</p></li></ol><p>项目目录下新建<code>.eslintignore</code>文件，用于排除应用eslint规则的文件或目录</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 忽略 node_modules 目录</span></span><br><span class="line">node_modules/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略构建输出目录</span></span><br><span class="line">/dist/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略配置目录</span></span><br><span class="line">webpackConfig/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略特定文件</span></span><br><span class="line">.babelrc</span><br><span class="line">.browserslistrc</span><br><span class="line">.gitignore</span><br><span class="line">package.json</span><br><span class="line">package-lock.json</span><br><span class="line"><span class="comment">#src/someFileToIgnore.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略某个目录中的所有文件</span></span><br><span class="line">src/assets</span><br><span class="line"><span class="comment">#src/someDirectoryToIgnore/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略所有的配置文件</span></span><br><span class="line">**/*.config.js</span><br></pre></td></tr></table></figure><p>项目目录下新建<code>.eslintrc.js</code>，具体代码可以直接看源码，如果想要个性化规则可以去翻阅Eslint文档</p><p>如果想在终端里面测试所有项目的话，可以在<code>package.json</code>里面的<code>script</code>配置<code>&quot;eslint&quot;: &quot;eslint ./src&quot;</code></p><p>这样子就可以直接运行检查项目<code>src</code>目录下面的所有文件了</p><p>如果想要在运行webpack的时候发现，可以下载npm包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i eslint-webpack-plugin -D</span><br></pre></td></tr></table></figure><p>因为是开发环境才会有eslint规范，所以直接修改<code>webpack.dev.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 终端检查代码</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;eslint-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">merge</span>(base, &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ESLintPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">//运行的时候自动帮你修复错误</span></span><br><span class="line">            <span class="attr">fix</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">exclude</span>: <span class="string">&#x27;node_modules&#x27;</span>,</span><br><span class="line">            <span class="attr">extensions</span>: [<span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;vue&#x27;</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" purple><summary> eslint可以干什么 </summary>              <div class='content'>              <p>ESLint是一个插件化的JavaScript代码检查工具</p><p>它可以识别和报告模式中的问题，并且能被配置为在代码中自动修复某些简单的问题</p><p>其主要用途是提高代码质量和保持代码风格的一致性</p>              </div>            </details><details class="folding-tag" purple><summary> eslint-plugin-vue可以干什么 </summary>              <div class='content'>              <p>ESLint的一个插件，提供了针对Vue.js模板的特定规则</p><p>这允许ESLint检查<code>.vue</code>文件中<code>&lt;template&gt;</code>部分的代码</p>              </div>            </details><details class="folding-tag" purple><summary> eslint-webpack-plugin可以干什么 </summary>              <div class='content'>              <p><code>eslint-webpack-plugin</code> 是一个 Webpack 插件，用于在 Webpack 构建过程中运行 ESLint 检查</p><p>这意味着你可以在编译代码时自动进行代码质量检查，而不需要单独运行 ESLint 命令</p>              </div>            </details><p><br /></p><h3 id="4-24-配置husky"><a href="#4-24-配置husky" class="headerlink" title="4.24-配置husky"></a>4.24-配置husky</h3><p>运行命令安装npm包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i husky lint-staged -D</span><br></pre></td></tr></table></figure><p>修改<code>package.json</code>文件，在<code>script</code>下面添加</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prepare&quot;</span><span class="punctuation">:</span> <span class="string">&quot;husky install&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pre-check&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npx lint-staged&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lint-staged&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;src/**/*.&#123;js,vue&#125;&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;eslint --fix&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>生成<code>.husky</code>目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx husky install</span><br></pre></td></tr></table></figure><p>在该目录下新建文件<code>pre-commit</code>，并写入</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">. <span class="string">&quot;<span class="subst">$(dirname <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>/_/husky.sh&quot;</span></span><br><span class="line"></span><br><span class="line">npm run pre-check</span><br></pre></td></tr></table></figure><p>这时候运行代码提交操作的时候就会使用eslint检测你的代码规范了</p><details class="folding-tag" purple><summary> husky可以干什么 </summary>              <div class='content'>              <p>用于在 Git 钩子（hooks）上运行脚本，常用于在提交代码前进行代码检查、测试等任务</p>              </div>            </details><details class="folding-tag" purple><summary> lint-staged可以干什么 </summary>              <div class='content'>              <p>在 Git 暂存文件（staged files）上运行 linters，确保只有通过检查的代码才能被提交</p>              </div>            </details><p><br /></p><h3 id="4-25-commit信息规范化"><a href="#4-25-commit信息规范化" class="headerlink" title="4.25-commit信息规范化"></a>4.25-commit信息规范化</h3><p>运行命令安装npm包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @commitlint/config-conventional @commitlint/cli -D</span><br></pre></td></tr></table></figure><p>在项目目录下创建<code>commitlint.config.js</code>文件， 并写入代码，具体代码看源代码</p><p>在该目录下新建文件<code>commit-msg</code>，并写入</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">. <span class="string">&quot;<span class="subst">$(dirname <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>/_/husky.sh&quot;</span></span><br><span class="line"></span><br><span class="line">npx --no-install commitlint --edit <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br></pre></td></tr></table></figure><p>这时候运行代码提交操作的时候就会使用commitlint.config.js检测你提交的信息规范了</p><details class="folding-tag" purple><summary> @commitlint/cli可以干什么 </summary>              <div class='content'>              <p>命令行工具，用于检查提交消息是否符合指定的规则</p>              </div>            </details><details class="folding-tag" purple><summary> @commitlint/config-conventional可以干什么 </summary>              <div class='content'>              <p>提供一组符合 “Conventional Commits” 规范的默认提交消息规则配置</p>              </div>            </details><p><br /></p><h3 id="4-26-commit提交辅助备注信息"><a href="#4-26-commit提交辅助备注信息" class="headerlink" title="4.26-commit提交辅助备注信息"></a>4.26-commit提交辅助备注信息</h3><p>运行命令安装npm包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D commitizen cz-conventional-changelog</span><br></pre></td></tr></table></figure><p>项目目录下新建<code>.czrc</code>文件，下入以下代码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;path&quot;</span>:<span class="string">&quot;cz-conventional-changelog&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>修改<code>package.json</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;commit&quot;</span>: <span class="string">&quot;git-cz&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;config&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;commitizen&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;path&quot;</span>:<span class="string">&quot;node_modules/cz-conventional-changelog&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候可以在<code>git add .</code>命令之后使用<code>npm run commit</code>就可以帮助我们规范commit的提交</p><p>如果你还想要自定义commit的规范，那么我们可以这么操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D commitlint-config-cz cz-customizable</span><br></pre></td></tr></table></figure><p>在根目录下面新建<code>.cz-config.js</code>，写入代码看源代码</p><p>这时候我们就可以发现我们<code>.cz-config.js</code>里面配置的都会在命令行里</p><details class="folding-tag" purple><summary> commitizen可以干什么 </summary>              <div class='content'>              <p>用于帮助开发者编写符合规范的提交消息</p><p>它提供了一个交互式的命令行界面，引导用户填写提交信息，从而确保提交消息符合预定的格式和规则</p>              </div>            </details><details class="folding-tag" purple><summary> cz-conventional-changelog可以干什么 </summary>              <div class='content'>              <p><strong>commitizen</strong> 的一个适配器，使用 “Conventional Commits” 规范来格式化提交消息</p><p>它定义了一组标准的提交类型（如 <code>feat</code>、<code>fix</code>、<code>chore</code> 等），帮助生成一致的提交历史记录</p>              </div>            </details><details class="folding-tag" purple><summary> commitlint-config-cz可以干什么 </summary>              <div class='content'>              <p><strong>commitlint</strong> 的一个配置扩展，旨在与 <strong>commitizen</strong> 和 <strong>cz-conventional-changelog</strong> 兼容</p><p>它提供了一组预定义的提交消息规则，确保提交消息符合 “Conventional Commits” 规范</p>              </div>            </details><details class="folding-tag" purple><summary> cz-customizable可以干什么 </summary>              <div class='content'>              <p><strong>commitizen</strong> 的一个可定制适配器，允许用户根据自己的需求自定义提交消息的提示和格式</p><p>你可以配置提交类型、范围、详细描述等，从而适应不同的项目需求</p>              </div>            </details><p><br /></p><h2 id="五、推送远程"><a href="#五、推送远程" class="headerlink" title="五、推送远程"></a>五、推送远程</h2><h3 id="5-1-添加-gitignore-文件"><a href="#5-1-添加-gitignore-文件" class="headerlink" title="5.1-添加.gitignore 文件"></a>5.1-添加<code>.gitignore</code> 文件</h3><p><code>.gitignore</code> 文件用于指定 <code>Git</code> 版本控制要忽略的未跟踪文件和目录</p><p>在一个 <code>Vue.js</code> 项目中，有多种文件和目录通常应该被添加到 <code>.gitignore</code> 文件中，特别是当开发工具是 <code>WebStorm (ws)</code> 和 <code>Visual Studio Code (vs)</code> 时</p><p><code>.gitignore</code> 文件应该根据项目需求和团队约定进行自定义</p><p>正式使用时还需要根据实际情况来调整和增减规则</p><p>写入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># 依赖</span><br><span class="line">/node_modules</span><br><span class="line"></span><br><span class="line"># 打包输出</span><br><span class="line">/dist</span><br><span class="line"></span><br><span class="line"># 环境变量文件</span><br><span class="line">.env</span><br><span class="line">.env.local</span><br><span class="line">.env.*.local</span><br><span class="line"></span><br><span class="line"># 开发工具目录</span><br><span class="line">.idea</span><br><span class="line">.vscode</span><br><span class="line"></span><br><span class="line"># 日志文件</span><br><span class="line">*.log</span><br><span class="line"></span><br><span class="line"># 源映射</span><br><span class="line">*.map</span><br><span class="line"></span><br><span class="line"># MacOS系统文件</span><br><span class="line">.DS_Store</span><br><span class="line"></span><br><span class="line"># Windows系统文件</span><br><span class="line">Thumbs.db</span><br><span class="line">ehthumbs.db</span><br><span class="line">Desktop.ini</span><br></pre></td></tr></table></figure><h2 id="六、文档、源代码"><a href="#六、文档、源代码" class="headerlink" title="六、文档、源代码"></a>六、文档、源代码</h2><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/wutiaowu5t5/WebpackCreateVue3"><img src="https://github-readme-stats.vercel.app/api/pin/?username=wutiaowu5t5&repo=WebpackCreateVue3&show_owner=true"/></a><p><a href="https://guojiongwei.top/article/649d7c17c0cd245c9f55bf68">掘金大佬文档</a></p><p><a href="https://webpack.docschina.org/configuration/">配置 | webpack 中文文档 (docschina.org)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info modern&quot;&gt;&lt;h4 id=&quot;版本要求&quot;&gt;&lt;a href=&quot;#版本要求&quot; class=&quot;headerlink&quot; title=&quot;版本要求&quot;&gt;&lt;/a&gt;版本要求&lt;/h4&gt;&lt;p&gt;&lt;code&gt;node&lt;/code&gt;版本需要18及以上，否则下载最</summary>
      
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="工程化" scheme="https://wutiaowu5t5.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Webpack创建React项目</title>
    <link href="https://wutiaowu5t5.github.io/posts/11f6c0d3/"/>
    <id>https://wutiaowu5t5.github.io/posts/11f6c0d3/</id>
    <published>2024-04-15T07:24:24.000Z</published>
    <updated>2024-04-15T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="工程化" scheme="https://wutiaowu5t5.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Vite创建Vue3项目</title>
    <link href="https://wutiaowu5t5.github.io/posts/8dce8b29/"/>
    <id>https://wutiaowu5t5.github.io/posts/8dce8b29/</id>
    <published>2024-04-14T07:24:24.000Z</published>
    <updated>2024-04-14T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="工程化" scheme="https://wutiaowu5t5.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Vite创建React项目</title>
    <link href="https://wutiaowu5t5.github.io/posts/8dce8b29/"/>
    <id>https://wutiaowu5t5.github.io/posts/8dce8b29/</id>
    <published>2024-04-13T07:24:24.000Z</published>
    <updated>2024-04-13T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="工程化" scheme="https://wutiaowu5t5.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>学习ThreeJS汇总</title>
    <link href="https://wutiaowu5t5.github.io/posts/b058a725/"/>
    <id>https://wutiaowu5t5.github.io/posts/b058a725/</id>
    <published>2024-04-10T07:24:24.000Z</published>
    <updated>2024-04-10T07:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<div class='checkbox gray'><input type="checkbox" />            <p><a href="">基础环境搭建</a></p>            </div><h2 id="Camera"><a href="#Camera" class="headerlink" title="Camera"></a>Camera</h2><div class='checkbox gray'><input type="checkbox" />            <p><a href="">Camara</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="">Array Camera</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="">Cinematic Camera</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="">Logarithmicdepthbuffer Camera</a></p>            </div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&#39;checkbox gray&#39;&gt;&lt;input type=&quot;checkbox&quot; /&gt;
            &lt;p&gt;&lt;a href=&quot;&quot;&gt;基础环境搭建&lt;/a&gt;&lt;/p&gt;
            &lt;/div&gt;
&lt;h2 id=&quot;Camera&quot;&gt;&lt;a href=&quot;#C</summary>
      
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="3D" scheme="https://wutiaowu5t5.github.io/tags/3D/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式汇总</title>
    <link href="https://wutiaowu5t5.github.io/posts/d342d2ec/"/>
    <id>https://wutiaowu5t5.github.io/posts/d342d2ec/</id>
    <published>2024-04-09T07:24:24.000Z</published>
    <updated>2024-04-09T07:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式是什么"><a href="#设计模式是什么" class="headerlink" title="设计模式是什么"></a>设计模式是什么</h2><p>设计模式是在软件工程中被反复使用的、经过验证的解决方案，用于解决特定问题或设计软件架构</p><p>它们提供了一种在设计和开发过程中重用的可靠方式，有助于解决常见的设计问题并促进代码的可维护性、可扩展性和可重用性</p><p><br/>设计模式并不是一种具体的编程语言特性或库，而是一种通用的解决方案</p><p>它们是从实际开发经验中总结出来的，并被广泛接受和使用</p><p>设计模式通常包括了面向对象设计的一些基本原则和惯例，通过它们可以更好地组织代码结构、降低耦合度、提高代码的灵活性和可维护性</p><p><br/>设计模式之所以出现，是因为在软件开发中经常会遇到一些常见的问题，比如对象创建、对象之间的关系、算法的选择等等</p><p>这些问题在不同的项目和场景中可能会多次出现，因此工程师们开始寻找并提炼出一些通用的解决方案，这就是设计模式产生的原因</p><p>设计模式有助于开发人员更快速地理解和解决问题，提高了开发效率</p><p>此外，它们还有助于提高代码的可读性和可维护性，因为它们是经过验证的、被广泛认可的解决方案，可以减少因为设计上的错误而造成的后续问题</p><p><br/></p><h2 id="设计模式遵循原则"><a href="#设计模式遵循原则" class="headerlink" title="设计模式遵循原则"></a>设计模式遵循原则</h2><p>设计模式的原则通常指的是一些基本的设计理念和规范，它们指导着设计模式的实现和应用。以下是一些常见的设计模式原则：</p><ol><li><p><strong>单一责任原则（Single Responsibility Principle, SRP）</strong>：</p><p>一个类应该只有一个引起变化的原因</p><p>换句话说，一个类应该只负责一项职责</p></li><li><p><strong>开放-封闭原则（Open-Closed Principle, OCP）</strong>：</p><p>软件实体（类、模块、函数等）应该对扩展开放，对修改关闭</p><p>即应该通过扩展现有代码来实现新功能，而不是直接修改已有代码</p></li><li><p><strong>里氏替换原则（Liskov Substitution Principle, LSP）</strong>：</p><p>所有能够使用父类对象的地方都应该能够使用子类对象</p><p>即子类应该能够替换父类并且不影响程序的正确性</p></li><li><p><strong>依赖倒置原则（Dependency Inversion Principle, DIP）</strong>：</p><p>高层模块不应该依赖于低层模块，两者都应该依赖于抽象</p><p>抽象不应该依赖于具体实现细节，具体实现细节应该依赖于抽象</p></li><li><p><strong>接口隔离原则（Interface Segregation Principle, ISP）</strong>：</p><p>客户端不应该被迫依赖于它们不使用的接口</p><p>即应该将大接口拆分成更小、更具体的接口，以便客户端只需要知道它们需要使用的接口</p></li><li><p><strong>合成/聚合复用原则（Composition/Aggregation Reuse Principle, CARP）</strong>：</p><p>优先使用对象组合/聚合，而不是继承来达到代码复用的目的</p><p>通过将对象组合到新的对象中，而不是通过继承来实现代码复用，可以更灵活地实现代码的复用</p></li></ol><p>这些原则是面向对象设计的基础，设计模式通常都遵循这些原则，以提高代码的可维护性、可扩展性和可重用性</p><h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><ol><li><p>创建型</p><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/4fda2d18/">单例模式</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/14ddad5d/">原型模式</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/7e9872a1/">工厂模式</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/7aab53ba/">抽象工厂模式</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/7e3e0f32/">建造者模式</a></p>            </div></li><li><p>结构型</p><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/edf2252f/">适配器模式</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/f51f74c/">装饰器模式</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/54233691/">代理模式</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/bd865a4b/">外观模式</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/2b8aa55b/">桥接模式</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/79a1bf69/">组合模式</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/469c39d8/">享元模式</a></p>            </div></li><li><p>行为型</p><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/73dbb689/">观察者模式</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/b1de33a6/">迭代器模式</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/1445619f/">策略模式</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/8472c90e/">模板方法模式</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/ae2b73e3/">职责链模式</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/25e1ecde/">命令模式</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/e88d43d9/">备忘录模式</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/d207f3e/">状态模式</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/edaaf222/">访问者模式</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/957fddbf/">中介者模式</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/29dbf566/">解释器模式</a></p>            </div></li></ol><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/wutiaowu5t5/DesignPattern"><img src="https://github-readme-stats.vercel.app/api/pin/?username=wutiaowu5t5&repo=DesignPattern&show_owner=true"/></a>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;设计模式是什么&quot;&gt;&lt;a href=&quot;#设计模式是什么&quot; class=&quot;headerlink&quot; title=&quot;设计模式是什么&quot;&gt;&lt;/a&gt;设计模式是什么&lt;/h2&gt;&lt;p&gt;设计模式是在软件工程中被反复使用的、经过验证的解决方案，用于解决特定问题或设计软件架构&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>面经汇总</title>
    <link href="https://wutiaowu5t5.github.io/posts/ed392c85/"/>
    <id>https://wutiaowu5t5.github.io/posts/ed392c85/</id>
    <published>2024-04-09T03:10:24.000Z</published>
    <updated>2024-05-23T08:36:28.799Z</updated>
    
    <content type="html"><![CDATA[<div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/556519a1/">Html</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/179be34f/">Css</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/e82d9764/">Javascript</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/cb2af883/">手写Javascript</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/376fa3ef/">Vue</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/f967bad7/">React</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/75cf67a1/">工程化</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/4d830755/">浏览器 &amp;&amp; 计算机网络</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>Node</p>            </div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&#39;checkbox green checked&#39;&gt;&lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot;/&gt;
            &lt;p&gt;&lt;a href=&quot;https://wutiaowu5t5.github.io/posts/5</summary>
      
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="面试" scheme="https://wutiaowu5t5.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Git提交规范记录</title>
    <link href="https://wutiaowu5t5.github.io/posts/a70ec0c6/"/>
    <id>https://wutiaowu5t5.github.io/posts/a70ec0c6/</id>
    <published>2024-04-07T07:24:24.000Z</published>
    <updated>2024-04-08T07:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Commit-Message作用"><a href="#Commit-Message作用" class="headerlink" title="Commit Message作用"></a>Commit Message作用</h2><ol><li><p>提供更多的历史信息，方便快速浏览</p><p>比如，下面的命令显示上次发布后的变动，每个commit占据一行。你只看行首，就知道某次 commit 的目的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> &lt;last tag&gt; HEAD --pretty=format:%s</span><br></pre></td></tr></table></figure></li><li><p>可以过滤某些commit（比如文档改动），便于快速查找信息</p><p>比如，下面的命令仅仅显示本次发布新增加的功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> &lt;last release&gt; HEAD --grep feature</span><br></pre></td></tr></table></figure></li><li><p>可以直接从commit生成Change log</p><p>Change Log 是发布新版本时，用来说明与上一个版本差异的文档</p></li></ol><p><br/></p><h2 id="Commit-Message-的格式"><a href="#Commit-Message-的格式" class="headerlink" title="Commit Message 的格式"></a>Commit Message 的格式</h2><p>每次提交，Commit message 都包括三个部分：Header，Body 和 Footer</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="built_in">type</span>&gt;(&lt;scope&gt;): &lt;subject&gt;// 空一行&lt;body&gt;// 空一行&lt;footer&gt;</span><br></pre></td></tr></table></figure><p>其中，Header 是必需的，Body 和 Footer 可以省略</p><p>不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）。这是为了避免自动换行影响美观</p><ol><li><p>Header</p><p>Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）</p><ul><li><p>type</p><p>type用于说明 commit 的类别，只允许使用下面7个标识</p><p>feat：新功能（feature）</p><p>fix：修补bug</p><p>docs：文档（documentation）</p><p>style： 格式（不影响代码运行的变动）</p><p>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</p><p>test：增加测试</p><p>chore：构建过程或辅助工具的变动</p></li><li><p>scope</p><p>scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同</p></li><li><p>subject</p><p>subject是 commit 目的的简短描述，不超过50个字符</p><p>以动词开头，使用第一人称现在时，比如change，而不是changed或changes</p><p>第一个字母小写</p><p>结尾不加句号（.）</p></li></ul></li><li><p>Body</p><p>Body 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">More detailed explanatory text, <span class="keyword">if</span> necessary.  Wrap it to </span><br><span class="line">about 72 characters or so. Further paragraphs come after blank lines.- Bullet points are okay, too- Use a hanging indent</span><br></pre></td></tr></table></figure><p>说明代码变动的动机，以及与以前行为的对比</p></li><li><p>Footer</p><ol><li><p>Footer 部分只用于两种情况</p><p>如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">BREAKING CHANGE: isolate scope bindings definition has changed.</span><br><span class="line"></span><br><span class="line">    To migrate the code follow the example below:</span><br><span class="line"></span><br><span class="line">    Before:</span><br><span class="line"></span><br><span class="line">    scope: &#123;</span><br><span class="line">      myAttr: <span class="string">&#x27;attribute&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    After:</span><br><span class="line"></span><br><span class="line">    scope: &#123;</span><br><span class="line">      myAttr: <span class="string">&#x27;@&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    The removed `inject` wasn<span class="string">&#x27;t generaly useful for directives so there should be no code using it.</span></span><br></pre></td></tr></table></figure></li><li><p>关闭 Issue</p><p>如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Closes <span class="comment">#234</span></span><br></pre></td></tr></table></figure><p>也可以一次关闭多个 issue </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Closes <span class="comment">#123, #245, #992</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>Revert</p><p>还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以revert:开头，后面跟着被撤销 Commit 的 Header</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">revert: feat(pencil): add <span class="string">&#x27;graphiteWidth&#x27;</span> option</span><br><span class="line"></span><br><span class="line">This reverts commit 667ecc1654a317a13331b17617d973392f415f02.</span><br></pre></td></tr></table></figure><p>Body部分的格式是固定的，必须写成This reverts commit <hash>.，其中的hash是被撤销 commit 的 SHA 标识符</p><p>如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的Reverts小标题下面</p></li></ol><p><br/></p><h2 id="Commitizen"><a href="#Commitizen" class="headerlink" title="Commitizen"></a>Commitizen</h2><p>Commitizen是一个撰写合格 Commit message 的工具。</p><p>安装命令如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g commitizen</span><br></pre></td></tr></table></figure><p>然后，在项目目录里，运行下面的命令，使其支持 Angular 的 Commit message 格式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ commitizen init cz-conventional-changelog --save --save-exact</span><br></pre></td></tr></table></figure><p>以后，凡是用到git commit命令，一律改为使用git cz。这时，就会出现选项，用来生成符合格式的 Commit message。</p><p><img src="https://s2.loli.net/2024/04/23/fuyUO5tDjYRo3Pv.png" alt="429b439c9f9f422039f8c2afbb4886bd034e5b3f.png"></p><p><br/></p><h2 id="validate-commit-msg"><a href="#validate-commit-msg" class="headerlink" title="validate-commit-msg"></a>validate-commit-msg</h2><p>validate-commit-msg 用于检查 Node 项目的 Commit message 是否符合格式</p><p>它的安装是手动的。首先，拷贝下面这个JS文件，放入你的代码库。文件名可以取为validate-commit-msg.js</p><p>接着，把这个脚本加入 Git 的 hook。下面是在package.json里面使用 ghooks，把这个脚本加为commit-msg时运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;config&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;ghooks&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;commit-msg&quot;</span>: <span class="string">&quot;./validate-commit-msg.js&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，每次git commit的时候，这个脚本就会自动检查 Commit message 是否合格。如果不合格，就会报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add -A </span><br><span class="line">$ git commit -m <span class="string">&quot;edit markdown&quot;</span> INVALID COMMIT MSG: does not match <span class="string">&quot;&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;&quot;</span> ! was: edit markdown</span><br></pre></td></tr></table></figure><p><br/></p><h2 id="生成-Change-log"><a href="#生成-Change-log" class="headerlink" title="生成 Change log"></a>生成 Change log</h2><p>如果你的所有 Commit 都符合 Angular 格式，那么发布新版本时， Change log 就可以用脚本自动生成（例1，例2，例3）</p><p>生成的文档包括以下三个部分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">New features</span><br><span class="line"></span><br><span class="line">Bug fixes</span><br><span class="line"></span><br><span class="line">Breaking changes.</span><br></pre></td></tr></table></figure><p>每个部分都会罗列相关的 commit ，并且有指向这些 commit 的链接。当然，生成的文档允许手动修改，所以发布前，你还可以添加其他内容</p><p>conventional-changelog 就是生成 Change log 的工具，运行下面的命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g conventional-changelog</span><br><span class="line">$ <span class="built_in">cd</span> my-project</span><br><span class="line">$ conventional-changelog -p angular -i CHANGELOG.md -w</span><br></pre></td></tr></table></figure><p>上面命令不会覆盖以前的 Change log，只会在CHANGELOG.md的头部加上自从上次发布以来的变动</p><p>如果你想生成所有发布的 Change log，要改为运行下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conventional-changelog -p angular -i CHANGELOG.md -w -r 0</span><br></pre></td></tr></table></figure><p>为了方便使用，可以将其写入package.json的scripts字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;changelog&quot;</span>: <span class="string">&quot;conventional-changelog -p angular -i CHANGELOG.md -w -r 0&quot;</span></span><br><span class="line">  &#125;&#125;</span><br></pre></td></tr></table></figure><p>以后，直接运行下面的命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run changelog</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Commit-Message作用&quot;&gt;&lt;a href=&quot;#Commit-Message作用&quot; class=&quot;headerlink&quot; title=&quot;Commit Message作用&quot;&gt;&lt;/a&gt;Commit Message作用&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;提供更多的</summary>
      
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="git" scheme="https://wutiaowu5t5.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《解释器模式（行为型）》</title>
    <link href="https://wutiaowu5t5.github.io/posts/29dbf566/"/>
    <id>https://wutiaowu5t5.github.io/posts/29dbf566/</id>
    <published>2024-04-07T07:24:24.000Z</published>
    <updated>2024-04-07T07:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>解释器模式（Interpreter Pattern）是一种行为型设计模式，它定义了一种语言的文法，并提供了一种解释器来解释该语言中的句子</p><p><br/></p><p>解释器模式通常涉及两个核心角色：解释器（Interpreter）和上下文（Context）</p><ul><li><p><strong>解释器（Interpreter）</strong></p><p>定义了一个抽象的解释操作接口，用于解释文法中的各种句子</p><p>解释器通常会包含多个解释方法，每个方法对应文法中的一个语法规则</p></li><li><p><strong>上下文（Context）</strong></p><p>包含了需要解释的文法内容</p><p>上下文对象通常会包含一些全局信息或者状态，供解释器对象使用</p></li></ul><p><br/></p><p>解释器模式的核心思想是将语言的文法抽象成一个解释器对象，并通过解释器对象来解释文法中的句子</p><p>这种模式的优点在于，可以将语言的解释和实现分离，使得解释过程更加灵活和可扩展</p><p>解释器模式适用于以下情况：</p><ul><li>当需要解释一种语言的文法，并且希望解释过程与实现解释的对象解耦时，可以使用解释器模式</li><li>当希望将解释过程封装到一个对象中，并提供一种统一的接口来解释不同类型的句子时，解释器模式也是一个很好的选择</li></ul><p><br/></p><p>举个简单的例子，考虑一个简单的数学表达式解析器</p><p>解释器模式可以将数学表达式的文法抽象成一个解释器对象，并通过解释器对象来解释和计算表达式的值</p><p>例如，给定一个表达式 “3 + 5 * 2”，解释器模式可以通过解释器对象来解析该表达式，并计算出其结果为 13</p><p><br/></p><h2 id="实现条件"><a href="#实现条件" class="headerlink" title="实现条件"></a>实现条件</h2><ol><li><p><strong>存在一种语言</strong></p><p>解释器模式适用于存在一种自定义语言或者规则的情况，需要解释和执行这种语言或者规则</p></li><li><p><strong>需要对语言进行解释和执行</strong></p><p>解释器模式适用于需要对一种自定义语言或者规则进行解释和执行的情况，例如编译器、解析器等</p></li><li><p><strong>语言的规则相对固定</strong></p><p>解释器模式适用于语言的规则相对固定，并且不太容易发生变化的情况</p><p>因为解释器模式需要定义一组解释器对象，并且需要根据语言的规则来实现这些解释器对象</p></li><li><p><strong>需要对语言进行扩展</strong></p><p>解释器模式适用于需要对语言进行扩展的情况，因为解释器模式可以通过定义新的解释器对象来扩展语言的功能</p></li></ol><p><br/></p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li><p><strong>性能问题</strong></p><p>解释器模式通常需要解释和执行语言的语法规则，因此可能会导致性能问题，特别是在处理大规模和复杂的语法规则时</p></li><li><p><strong>复杂度高</strong></p><p>解释器模式通常需要定义大量的解释器对象，并且需要正确地组合这些解释器对象来实现语言的语法规则，可能会导致系统的复杂度增加</p></li><li><p><strong>不适用于所有情况</strong></p><p>解释器模式适用于对语言进行解释和执行的情况，但并不适用于所有情况，特别是对性能要求较高或者语言规则变化频繁的情况</p></li><li><p><strong>难以维护</strong></p><p>解释器模式通常会涉及到大量的解释器对象和语法规则，可能会导致代码的维护成本增加</p></li></ol><p><br/></p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li><p><strong>性能问题</strong></p><p>解释器模式通常需要解释和执行语言的语法规则，因此可能会导致性能问题，特别是在处理大规模和复杂的语法规则时</p></li><li><p><strong>复杂度高</strong></p><p>解释器模式通常需要定义大量的解释器对象，并且需要正确地组合这些解释器对象来实现语言的语法规则，可能会导致系统的复杂度增加</p></li><li><p><strong>不适用于所有情况</strong></p><p>解释器模式适用于对语言进行解释和执行的情况，但并不适用于所有情况，特别是对性能要求较高或者语言规则变化频繁的情况</p></li><li><p><strong>难以维护</strong></p><p>解释器模式通常会涉及到大量的解释器对象和语法规则，可能会导致代码的维护成本增加</p></li></ol><p><br/></p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>解释器基类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主文件导入各个表达式子类并定义表达式相关类和方法。</span></span><br><span class="line"><span class="comment"> * 提供了基本的数学运算表达式及其组合的构建和解释能力。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入表达式子类</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AdditionExpression</span> <span class="keyword">from</span> <span class="string">&#x27;./SubClass/AdditionExpression&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">SubtractionExpression</span> <span class="keyword">from</span> <span class="string">&#x27;./SubClass/SubtractionExpression&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MultiplicationExpression</span> <span class="keyword">from</span> <span class="string">&#x27;./SubClass/MultiplicationExpression&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">DivisionExpression</span> <span class="keyword">from</span> <span class="string">&#x27;./SubClass/DivisionExpression&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ModuloExpression</span> <span class="keyword">from</span> <span class="string">&#x27;./SubClass/ModuloExpression&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表达式基类，定义了表达式的基本行为。</span></span><br><span class="line"><span class="comment"> * 子类需要实现interpret()方法来提供具体的解释执行逻辑。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Expression</span> &#123;</span><br><span class="line">    <span class="title function_">interpret</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;interpret() must be implemented in derived class&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 复合表达式基类，用于组合两个表达式进行运算。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@extends</span> Expression 表达式基类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CompoundExpression</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Expression</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数，初始化复合表达式。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">Expression</span>&#125; expression1 第一个操作数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">Expression</span>&#125; expression2 第二个操作数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> &#123;<span class="type">Error</span>&#125; 如果任一操作数不是Expression实例，则抛出错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">expression1, expression2</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="keyword">if</span> (!(expression1 <span class="keyword">instanceof</span> <span class="title class_">Expression</span>) || !(expression2 <span class="keyword">instanceof</span> <span class="title class_">Expression</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Both operands must be instances of Expression&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">expression1</span> = expression1</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">expression2</span> = expression2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数字表达式类，用于表示和解释一个简单的数字表达式。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@extends</span> Expression 表达式基类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumberExpression</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Expression</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数，初始化数字表达式。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; number 表达式代表的数字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> &#123;<span class="type">Error</span>&#125; 如果输入不是数字，则抛出错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">number</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> number !== <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;NumberExpression requires a number&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">number</span> = number</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解释执行数字表达式，直接返回数字本身。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span> &#123;<span class="type">number</span>&#125; 表达式代表的数字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">interpret</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">number</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 辅助方法，用于简化创建加法表达式的过程。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Expression</span>&#125; expression1 第一个加数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Expression</span>&#125; expression2 第二个加数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">AdditionExpression</span>&#125; 新创建的加法表达式实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">expression1, expression2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AdditionExpression</span>(expression1, expression2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 辅助方法，用于简化创建减法表达式的过程。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Expression</span>&#125; expression1 被减数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Expression</span>&#125; expression2 减数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">SubtractionExpression</span>&#125; 新创建的减法表达式实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">subtract</span>(<span class="params">expression1, expression2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SubtractionExpression</span>(expression1, expression2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 辅助方法，用于简化创建乘法表达式的过程。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Expression</span>&#125; expression1 第一个乘数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Expression</span>&#125; expression2 第二个乘数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">MultiplicationExpression</span>&#125; 新创建的乘法表达式实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">expression1, expression2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MultiplicationExpression</span>(expression1, expression2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 辅助方法，用于简化创建除法表达式的过程。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Expression</span>&#125; expression1 被除数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Expression</span>&#125; expression2 除数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">DivisionExpression</span>&#125; 新创建的除法表达式实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">divide</span>(<span class="params">expression1, expression2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DivisionExpression</span>(expression1, expression2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 辅助方法，用于简化创建取模表达式的过程。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Expression</span>&#125; expression1 被除数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Expression</span>&#125; expression2 除数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">ModuloExpression</span>&#125; 新创建的取模表达式实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">modulo</span>(<span class="params">expression1, expression2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ModuloExpression</span>(expression1, expression2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出各类表达式和辅助方法供外部使用</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    <span class="title class_">Expression</span>,</span><br><span class="line">    <span class="title class_">CompoundExpression</span>,</span><br><span class="line">    <span class="title class_">NumberExpression</span>,</span><br><span class="line">    add,</span><br><span class="line">    subtract,</span><br><span class="line">    multiply,</span><br><span class="line">    divide,</span><br><span class="line">    modulo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br/></p><p>表达式子类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ModuloExpression类继承自CompoundExpression，用于解释求模运算。</span></span><br><span class="line"><span class="comment"> * 它接收两个表达式作为分子和分母，并在求模运算时抛出零除错误。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CompoundExpression</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../InterpreterPattern&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ModuloExpression</span> <span class="keyword">extends</span> <span class="title class_ inherited__">CompoundExpression</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行求模运算。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span> &#123;<span class="type">number</span>&#125; 返回两个表达式求模后的结果。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> &#123;<span class="type">Error</span>&#125; 当分母为零时抛出错误。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">interpret</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 解释并获取分母的值</span></span><br><span class="line">        <span class="keyword">const</span> divisor = <span class="variable language_">this</span>.<span class="property">expression2</span>.<span class="title function_">interpret</span>()</span><br><span class="line">        <span class="comment">// 检查分母是否为零</span></span><br><span class="line">        <span class="keyword">if</span> (divisor === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Modulo by zero&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 执行求模运算并返回结果</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">expression1</span>.<span class="title function_">interpret</span>() % divisor</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ModuloExpression</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DivisionExpression 类继承自 CompoundExpression，</span></span><br><span class="line"><span class="comment"> * 用于实现除法表达式的解释操作。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CompoundExpression</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../InterpreterPattern&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DivisionExpression</span> <span class="keyword">extends</span> <span class="title class_ inherited__">CompoundExpression</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行除法操作并返回结果。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span> &#123;<span class="type">number</span>&#125; 两个表达式相除的结果。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> &#123;<span class="type">Error</span>&#125; 如果除数为零，则抛出错误。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">interpret</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 获取除数并检查是否为零</span></span><br><span class="line">        <span class="keyword">const</span> divisor = <span class="variable language_">this</span>.<span class="property">expression2</span>.<span class="title function_">interpret</span>()</span><br><span class="line">        <span class="keyword">if</span> (divisor === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Division by zero&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 计算并返回两个表达式相除的结果</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">expression1</span>.<span class="title function_">interpret</span>() / divisor</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">DivisionExpression</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MultiplicationExpression 类继承自 CompoundExpression，</span></span><br><span class="line"><span class="comment"> * 用于表示乘法运算的表达式。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CompoundExpression</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../InterpreterPattern&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MultiplicationExpression</span> <span class="keyword">extends</span> <span class="title class_ inherited__">CompoundExpression</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解释执行乘法运算。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span> &#123;<span class="type">number</span>&#125; 返回两个表达式相乘的结果。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">interpret</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 执行两个子表达式的解释操作，并返回其乘积</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">expression1</span>.<span class="title function_">interpret</span>() * <span class="variable language_">this</span>.<span class="property">expression2</span>.<span class="title function_">interpret</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MultiplicationExpression</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SubtractionExpression 类继承自 CompoundExpression，</span></span><br><span class="line"><span class="comment"> * 用于实现减法运算的解释器模式。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CompoundExpression</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../InterpreterPattern&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubtractionExpression</span> <span class="keyword">extends</span> <span class="title class_ inherited__">CompoundExpression</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行减法运算并返回结果。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span> &#123;<span class="type">number</span>&#125; 返回两个表达式相减的结果。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">interpret</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 调用两个子表达式的 interpret 方法并执行减法运算</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">expression1</span>.<span class="title function_">interpret</span>() - <span class="variable language_">this</span>.<span class="property">expression2</span>.<span class="title function_">interpret</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">SubtractionExpression</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AdditionExpression 类继承自 CompoundExpression，</span></span><br><span class="line"><span class="comment"> * 用于实现解释器模式中的加法表达式解释功能。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CompoundExpression</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../InterpreterPattern&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AdditionExpression</span> <span class="keyword">extends</span> <span class="title class_ inherited__">CompoundExpression</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解释执行加法表达式。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span> &#123;<span class="type">number</span>&#125; 表达式的解释结果，即两个表达式结果的和。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">interpret</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 对两个子表达式进行解释，并求和</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">expression1</span>.<span class="title function_">interpret</span>() + <span class="variable language_">this</span>.<span class="property">expression2</span>.<span class="title function_">interpret</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">AdditionExpression</span></span><br></pre></td></tr></table></figure><p>怎么使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 导入解释器模式中的加法、乘法函数及数字表达式类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123; add, multiply, <span class="title class_">NumberExpression</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../InterpreterPattern&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个表达式，该表达式表示 3 加上 5 乘以 2 的结果</span></span><br><span class="line"><span class="keyword">const</span> expression = <span class="title function_">add</span>(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">NumberExpression</span>(<span class="number">3</span>),</span><br><span class="line">    <span class="title function_">multiply</span>(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">NumberExpression</span>(<span class="number">5</span>),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">NumberExpression</span>(<span class="number">2</span>)</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出表达式的解释结果</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(expression.<span class="title function_">interpret</span>()) <span class="comment">// 输出: 13</span></span><br></pre></td></tr></table></figure><p><br/></p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ol><li><p><strong>语言解释器</strong></p><p>该模式最典型的应用场景是在编程语言解释器中，例如解释器可以解析并执行自定义的脚本或领域特定语言（DSL）</p></li><li><p><strong>正则表达式解析器</strong></p><p>在处理文本搜索、替换或验证等场景中，解释器模式可以用于解析和执行正则表达式</p></li><li><p><strong>配置解析器</strong></p><p>当需要解析复杂的配置文件或数据格式时，可以使用解释器模式来实现解析器，例如解析 XML、JSON 等格式</p></li><li><p><strong>查询语言解释器</strong></p><p>在数据库查询、搜索引擎等领域，解释器模式可以用于解析用户输入的查询语言，并执行相应的查询操作</p></li><li><p><strong>数学表达式求值器</strong></p><p>如前面所示的示例，解释器模式可以用于实现数学表达式的解析和求值</p></li></ol><p><br/></p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/wutiaowu5t5/DesignPattern/tree/main/BehaviorType/InterpreterPattern"><img src="https://github-readme-stats.vercel.app/api/pin/?username=wutiaowu5t5&repo=DesignPattern&show_owner=true"/></a>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;解释器模式（Interpreter Pattern）是一种行为型设计模式，它定义了一种语言的文法，并提供了一种解释器来解释该语言中的句子&lt;/</summary>
      
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《中介者模式（行为型）》</title>
    <link href="https://wutiaowu5t5.github.io/posts/957fddbf/"/>
    <id>https://wutiaowu5t5.github.io/posts/957fddbf/</id>
    <published>2024-04-06T07:24:24.000Z</published>
    <updated>2024-04-06T07:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>中介者模式（Mediator Pattern）是一种行为型设计模式，它通过引入一个中介者对象来封装一系列对象之间的交互，从而降低对象之间的耦合度</p><p><br/></p><p>中介者模式通常涉及三个核心角色：中介者（Mediator）、同事对象（Colleague）和具体中介者（Concrete Mediator）</p><ul><li><p><strong>中介者（Mediator）</strong></p><p>定义了一个接口用于与各个同事对象通信，并负责协调各个同事对象之间的交互</p><p>中介者对象通常包含一个或多个方法，用于处理不同类型的交互事件</p></li><li><p><strong>同事对象（Colleague）</strong></p><p>各个参与交互的对象。同事对象可以向中介者发送消息，也可以接收来自中介者的消息</p></li><li><p><strong>具体中介者（Concrete Mediator）</strong></p><p>实现了中介者接口，负责实际的协调和控制各个同事对象之间的交互</p><p>具体中介者对象通常包含了各个同事对象的引用，并根据收到的消息来进行相应的处理</p></li></ul><p><br/></p><p>中介者模式的核心思想是将系统中各个对象之间的交互行为集中到一个中介者对象中，从而降低对象之间的耦合度</p><p>这种模式的优点在于，可以减少对象之间的直接依赖关系，提高系统的灵活性和可维护性</p><p>中介者模式适用于以下情况：</p><ul><li>当系统中各个对象之间存在复杂的交互关系，并且希望将这些交互关系集中到一个对象中进行管理时，可以使用中介者模式</li><li>当系统中的对象之间的交互关系随着系统的演化而变得复杂时，中介者模式也是一个很好的选择</li></ul><p><br/></p><p>举个简单的例子，考虑一个聊天室系统</p><p>聊天室中的用户可以发送消息给其他用户，而消息发送过程中需要对消息进行广播和接收等操作</p><p>中介者模式可以将聊天室对象视为一个中介者对象，负责管理用户之间的消息发送和接收</p><p>当用户发送消息时，可以将消息发送给聊天室对象，由聊天室对象负责将消息广播给所有在线用户</p><p>这样，可以实现用户之间的交互行为集中到一个中介者对象中进行管理，从而降低系统的复杂度</p><p><br/></p><h2 id="实现条件"><a href="#实现条件" class="headerlink" title="实现条件"></a>实现条件</h2><ol><li><p><strong>存在多个对象之间的复杂交互</strong></p><p>中介者模式适用于存在多个对象之间的复杂交互，并且这些对象之间存在相互依赖的情况</p></li><li><p><strong>需要解耦对象之间的关系</strong></p><p>中介者模式适用于需要解耦对象之间的关系，避免对象之间的直接通信，从而降低对象之间的耦合度</p></li><li><p><strong>对象之间存在多对多的关系</strong></p><p>中介者模式适用于对象之间存在多对多的关系，并且对象之间的交互比较复杂的情况，通过引入中介者来统一管理对象之间的交互</p></li><li><p><strong>需要集中化控制对象之间的交互</strong></p><p>中介者模式适用于需要集中化控制对象之间的交互，通过引入中介者来协调对象之间的交互，避免交互逻辑分散在多个对象中</p></li></ol><p><br/></p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li><p><strong>减少类之间的依赖关系</strong></p><p>中介者模式可以减少类之间的直接依赖关系，将对象之间的交互逻辑集中到中介者对象中，从而降低了类之间的耦合度</p></li><li><p><strong>简化对象的交互</strong></p><p>中介者模式可以简化对象之间的交互逻辑，将复杂的交互逻辑封装到中介者对象中，使得对象之间只需要与中介者进行通信，而无需直接相互交互</p></li><li><p><strong>提高系统的可维护性</strong></p><p>中介者模式将对象之间的交互逻辑集中到中介者对象中，使得系统的交互逻辑更加清晰和易于理解，从而提高了系统的可维护性</p></li><li><p><strong>提高系统的灵活性</strong></p><p>中介者模式可以通过引入新的中介者对象来扩展系统的功能，而无需修改已有的对象，从而提高了系统的灵活性</p></li><li><p><strong>降低了对象之间的直接耦合</strong></p><p>中介者模式可以避免对象之间的直接相互引用，降低了对象之间的耦合度，使得系统更加灵活和易于扩展</p></li></ol><p><br/></p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li><p><strong>中介者对象可能变得复杂</strong></p><p>随着系统的演化，中介者对象可能会变得复杂，包含大量的交互逻辑，导致中介者对象变得难以维护和理解</p></li><li><p><strong>可能导致单点故障</strong></p><p>如果中介者对象出现故障，可能会导致系统的其他部分无法正常工作，特别是系统的依赖性较高时</p></li><li><p><strong>可能导致性能问题</strong></p><p>由于中介者对象负责管理对象之间的交互逻辑，可能会导致中介者对象成为系统的瓶颈，特别是在处理大量请求时可能会出现性能问题</p></li><li><p><strong>增加了系统的复杂度</strong></p><p>中介者模式引入了一个额外的中介者对象，可能会增加系统的复杂度，特别是当系统中存在多个中介者对象时</p></li></ol><p><br/></p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>用户类与聊天室类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表示聊天系统的用户。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个User实例。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">id</span> - 用户的唯一标识符。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">name</span> - 用户的名称。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">id, name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">id</span> = id</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">chatRoom</span> = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向当前聊天室发送消息。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">message</span> - 要发送的消息内容。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">sendMessage</span>(<span class="params">message</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">chatRoom</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">chatRoom</span>.<span class="title function_">sendMessage</span>(<span class="variable language_">this</span>, message)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;您还没有加入聊天室！&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收来自其他用户的消息。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">message</span> - 接收到的消息内容。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">senderName</span> - 发送者的名称。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">receive</span>(<span class="params">message, senderName</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> 收到了来自 <span class="subst">$&#123;senderName&#125;</span> 的消息：<span class="subst">$&#123;message&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加入聊天室。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">ChatRoom</span>&#125; <span class="variable">chatRoom</span> - 要加入的聊天室对象。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">joinChatRoom</span>(<span class="params">chatRoom</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (chatRoom <span class="keyword">instanceof</span> <span class="title class_">ChatRoom</span>) &#123; <span class="comment">// 检查传入的是否是有效的ChatRoom实例</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">chatRoom</span> = chatRoom</span><br><span class="line">            chatRoom.<span class="title function_">addUser</span>(<span class="variable language_">this</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;提供的聊天室无效。&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退出聊天室。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">leaveChatRoom</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">chatRoom</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">chatRoom</span>.<span class="title function_">removeUser</span>(<span class="variable language_">this</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">chatRoom</span> = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户名称。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span> &#123;<span class="type">string</span>&#125; - 用户的名称。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表示一个聊天室，包含多个用户和消息传递功能。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatRoom</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个ChatRoom实例。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">users</span> = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加用户到聊天室。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">User</span>&#125; <span class="variable">user</span> - 要添加的用户对象。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">addUser</span>(<span class="params">user</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">has</span>(user.<span class="property">id</span>)) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">set</span>(user.<span class="property">id</span>, user)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;user.getName()&#125;</span> 已加入聊天室。`</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">`ID为 <span class="subst">$&#123;user.id&#125;</span> 的用户已在聊天室中。`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从聊天室中移除用户。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">User</span>&#125; <span class="variable">user</span> - 要移除的用户对象。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">removeUser</span>(<span class="params">user</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">has</span>(user.<span class="property">id</span>)) &#123;</span><br><span class="line">            <span class="keyword">const</span> userName = user.<span class="title function_">getName</span>()</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">delete</span>(user.<span class="property">id</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;userName&#125;</span> 已离开聊天室。`</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">`ID为 <span class="subst">$&#123;user.id&#125;</span> 的用户不在聊天室中。`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将消息广播给聊天室中的其他用户。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">User</span>&#125; <span class="variable">sender</span> - 发送消息的用户对象。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">message</span> - 要发送的消息内容。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">sendMessage</span>(<span class="params">sender, message</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> senderName = sender.<span class="title function_">getName</span>()</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> [userId, user] <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">users</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (userId !== sender.<span class="property">id</span>) &#123;</span><br><span class="line">                user.<span class="title function_">receive</span>(message, senderName)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出User和ChatRoom类</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    <span class="title class_">User</span>,</span><br><span class="line">    <span class="title class_">ChatRoom</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br/>怎么使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 导入ChatRoom和User类</span></span><br><span class="line"><span class="comment"> * 从&#x27;../MediatorPattern&#x27;路径导入ChatRoom和User类，用于创建聊天室和用户实例。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ChatRoom</span>, <span class="title class_">User</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../MediatorPattern&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个聊天室实例</span></span><br><span class="line"><span class="comment"> * 创建一个名为chatRoom的ChatRoom实例，作为用户交流的平台。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> chatRoom = <span class="keyword">new</span> <span class="title class_">ChatRoom</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建用户实例</span></span><br><span class="line"><span class="comment"> * 创建三个不同的User实例，分别代表用户1、用户2和用户3。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> user1 = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;User 1&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> user2 = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;User 2&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> user3 = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;User 3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户加入聊天室</span></span><br><span class="line"><span class="comment"> * 将三个用户实例加入到chatRoom聊天室中，使他们能够进行通信。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">user1.<span class="title function_">joinChatRoom</span>(chatRoom)</span><br><span class="line">user2.<span class="title function_">joinChatRoom</span>(chatRoom)</span><br><span class="line">user3.<span class="title function_">joinChatRoom</span>(chatRoom)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户发送消息</span></span><br><span class="line"><span class="comment"> * 用户1和用户2分别向聊天室发送消息，演示了消息的发送过程。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">user1.<span class="title function_">sendMessage</span>(<span class="string">&#x27;Hello, everyone!&#x27;</span>)</span><br><span class="line">user2.<span class="title function_">sendMessage</span>(<span class="string">&#x27;Hi, there!&#x27;</span>)</span><br></pre></td></tr></table></figure><p><br/></p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ol><li><p><strong>聊天应用程序</strong></p><p>聊天室就是一个很好的中介者模式的应用场景</p><p>用户通过聊天室发送和接收消息，而不需要直接与其他用户通信</p></li><li><p><strong>GUI 应用程序</strong></p><p>在复杂的 GUI 应用程序中，不同的组件可能需要相互通信，例如窗口、面板、按钮等</p><p>中介者模式可以用来管理这些组件之间的通信，以减少耦合度</p></li><li><p><strong>游戏开发</strong></p><p>在多人在线游戏中，玩家之间可能需要进行交互，例如发送消息、交易物品等</p><p>中介者模式可以用来管理玩家之间的交互，以及处理游戏中的事件</p></li><li><p><strong>交通系统</strong></p><p>在城市交通系统中，交通信号灯可以被视为中介者，管理交通流量并协调不同方向上的车辆行驶</p><p>通过中介者模式，交通信号灯可以控制交通流量，避免交通拥堵和事故发生</p></li></ol><p><br/></p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/wutiaowu5t5/DesignPattern/tree/main/BehaviorType/MediatorPattern"><img src="https://github-readme-stats.vercel.app/api/pin/?username=wutiaowu5t5&repo=DesignPattern&show_owner=true"/></a>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;中介者模式（Mediator Pattern）是一种行为型设计模式，它通过引入一个中介者对象来封装一系列对象之间的交互，从而降低对象之间的耦</summary>
      
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《访问者模式（行为型）》</title>
    <link href="https://wutiaowu5t5.github.io/posts/edaaf222/"/>
    <id>https://wutiaowu5t5.github.io/posts/edaaf222/</id>
    <published>2024-04-05T07:24:24.000Z</published>
    <updated>2024-04-05T07:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>访问者模式（Visitor Pattern）是一种行为型设计模式，它允许在不改变被访问对象的类的前提下定义对其进行操作的新操作</p><p><br/></p><p>访问者模式通常涉及两个核心角色：访问者（Visitor）和被访问元素（Element）</p><ul><li><p><strong>访问者（Visitor）</strong></p><p>定义了对每个被访问元素的操作方法</p><p>每个操作方法都对应着被访问元素的不同类型，可以通过访问者来实现对被访问元素的不同操作</p></li><li><p><strong>被访问元素（Element）</strong></p><p>定义了一个接受访问者对象的方法，并将自身作为参数传递给访问者对象</p><p>被访问元素可以是单个对象或者对象的集合</p></li></ul><p><br/></p><p>访问者模式的核心思想是将对对象的操作（算法）从对象本身中提取出来，并将其封装到不同的访问者对象中，从而实现对对象操作的解耦</p><p>这种模式的优点在于，可以在不修改被访问对象的类的情况下定义新的操作，同时也使得新增操作的扩展更加灵活和可控</p><p>访问者模式适用于以下情况：</p><ul><li>当需要对一个对象结构中的元素进行不同类型的操作，并且希望将操作与对象的数据结构解耦时，可以使用访问者模式</li><li>当希望在不修改对象类的情况下定义新的操作，并且希望新增操作的扩展更加灵活和可控时，访问者模式也是一个很好的选择</li></ul><p><br/></p><p>举个简单的例子，考虑一个文件系统中的不同类型的文件对象（如文本文件、图像文件、音频文件等）</p><p>访问者模式可以将对文件对象的操作（如打印文件内容、压缩文件、加密文件等）抽象成访问者对象，并在不修改文件对象类的情况下定义新的操作，从而实现对文件对象的不同操作的解耦</p><p><br/></p><h2 id="实现条件"><a href="#实现条件" class="headerlink" title="实现条件"></a>实现条件</h2><ol><li><p><strong>存在一组不同类型的对象</strong></p><p>访问者模式适用于存在一组不同类型的对象，并且这些对象之间存在一定的复杂关系，例如对象之间存在继承关系或者对象之间存在组合关系等</p></li><li><p><strong>需要对对象进行不同的操作</strong></p><p>访问者模式适用于需要对一组不同类型的对象进行不同的操作，并且这些操作可能会随着对象的类型而变化的情况</p></li><li><p><strong>对象的结构相对稳定</strong></p><p>访问者模式适用于对象的结构相对稳定，并且不太容易发生变化的情况</p><p>因为访问者模式需要将不同类型的对象和操作进行解耦，如果对象的结构经常发生变化，可能会导致访问者对象的变化较大</p></li><li><p><strong>需要对对象进行多种操作</strong></p><p>访问者模式适用于需要对一组对象进行多种不同操作的情况，并且这些操作之间可能没有直接关联</p></li></ol><p><br/></p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li><p><strong>增加新的操作很容易</strong></p><p>访问者模式使得增加新的操作很容易，只需要定义一个新的访问者对象即可，无需修改现有的对象结构</p></li><li><p><strong>符合开闭原则</strong></p><p>访问者模式通过将操作封装在访问者对象中，并将访问者对象与对象结构分离，使得可以在不修改现有对象结构的情况下增加新的操作，符合开闭原则</p></li><li><p><strong>解耦了对象结构和操作</strong></p><p>访问者模式将对象结构和操作进行了解耦，使得可以独立地改变对象结构或者操作，并且可以相互独立地进行扩展</p></li><li><p><strong>支持不同类型的访问者</strong></p><p>访问者模式支持定义不同类型的访问者对象，并且可以在不同的情况下选择合适的访问者对象进行操作，从而提高了系统的灵活性和可扩展性</p></li></ol><p><br/></p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li><p><strong>增加新的元素类很困难</strong></p><p>访问者模式使得增加新的元素类变得很困难，因为需要在每个访问者对象中添加对应的操作，可能会导致访问者对象的数量和复杂度增加</p></li><li><p><strong>破坏封装性</strong></p><p>访问者模式将操作封装在访问者对象中，可能会破坏对象的封装性，因为访问者对象需要访问对象的内部状态和结构</p></li><li><p><strong>可能导致性能问题</strong></p><p>访问者模式需要在访问者对象和元素对象之间建立关联，可能会导致访问者对象过多或者访问者对象过于庞大，从而可能会导致性能问题</p></li></ol><p><br/></p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>访问者基类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个Visitor类，提供访问者模式的基本结构。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Visitor</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问给定的文件对象。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; file 文件对象，需要有getType方法用于获取文件类型。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="type">any</span>&#125; 返回调用的具体访问方法的结果。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> &#123;<span class="type">Error</span>&#125; 如果找不到对应的访问方法，则抛出错误。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">visit</span>(<span class="params">file</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span>[file.<span class="title function_">getType</span>()] === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>[file.<span class="title function_">getType</span>()](file)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Visitor does not support files of type: <span class="subst">$&#123;file.getType()&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br/></p><p>访问者子类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PrintVisitor类继承自Visitor类，实现对不同文件类型的打印操作。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PrintVisitor</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Visitor</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印文本文件。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; file 文本文件对象，需要包含name和content属性。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">text</span>(<span class="params">file</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Printing text file <span class="subst">$&#123;file.name&#125;</span>:`</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(file.<span class="property">content</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印图像文件。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; file 图像文件对象，需要包含name属性。</span></span><br><span class="line"><span class="comment">     * 此方法为示例，实际的图像打印逻辑需要根据需求实现。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">image</span>(<span class="params">file</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Printing image file <span class="subst">$&#123;file.name&#125;</span>`</span>)</span><br><span class="line">        <span class="comment">// 实际的图像打印逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印音频文件。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; file 音频文件对象，需要包含name属性。</span></span><br><span class="line"><span class="comment">     * 此方法为示例，实际的音频打印逻辑需要根据需求实现。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">audio</span>(<span class="params">file</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Printing audio file <span class="subst">$&#123;file.name&#125;</span>`</span>)</span><br><span class="line">        <span class="comment">// 实际的音频打印逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * CompressVisitor类继承自Visitor类，实现对不同文件类型的压缩操作。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CompressVisitor</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Visitor</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 压缩文本文件。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; file 文本文件对象，需要包含name属性。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">text</span>(<span class="params">file</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Compressing text file <span class="subst">$&#123;file.name&#125;</span>`</span>)</span><br><span class="line">        <span class="comment">// 文本文件压缩逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 压缩图像文件。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; file 图像文件对象，需要包含name属性。</span></span><br><span class="line"><span class="comment">     * 此方法为示例，实际的图像压缩逻辑需要根据需求实现。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">image</span>(<span class="params">file</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Compressing image file <span class="subst">$&#123;file.name&#125;</span>`</span>)</span><br><span class="line">        <span class="comment">// 图像文件压缩逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 压缩音频文件。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; file 音频文件对象，需要包含name属性。</span></span><br><span class="line"><span class="comment">     * 此方法为示例，实际的音频压缩逻辑需要根据需求实现。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">audio</span>(<span class="params">file</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Compressing audio file <span class="subst">$&#123;file.name&#125;</span>`</span>)</span><br><span class="line">        <span class="comment">// 音频文件压缩逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * EncryptVisitor类继承自Visitor类，实现对不同文件类型的加密操作。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EncryptVisitor</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Visitor</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密文本文件。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; file 文本文件对象，需要包含name属性。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">text</span>(<span class="params">file</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Encrypting text file <span class="subst">$&#123;file.name&#125;</span>`</span>)</span><br><span class="line">        <span class="comment">// 文本文件加密逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密图像文件。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; file 图像文件对象，需要包含name属性。</span></span><br><span class="line"><span class="comment">     * 此方法为示例，实际的图像文件加密逻辑需要根据需求实现。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">image</span>(<span class="params">file</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Encrypting image file <span class="subst">$&#123;file.name&#125;</span>`</span>)</span><br><span class="line">        <span class="comment">// 图像文件加密逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密音频文件。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; file 音频文件对象，需要包含name属性。</span></span><br><span class="line"><span class="comment">     * 此方法为示例，实际的音频文件加密逻辑需要根据需求实现。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">audio</span>(<span class="params">file</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Encrypting audio file <span class="subst">$&#123;file.name&#125;</span>`</span>)</span><br><span class="line">        <span class="comment">// 音频文件加密逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出定义的类</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    <span class="title class_">Visitor</span>,</span><br><span class="line">    <span class="title class_">PrintVisitor</span>,</span><br><span class="line">    <span class="title class_">CompressVisitor</span>,</span><br><span class="line">    <span class="title class_">EncryptVisitor</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br/></p><p>文件基类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Visitor</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../VisitorPattern&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * FileSystem类表示文件系统的一个抽象基类。</span></span><br><span class="line"><span class="comment"> * 该类提供了基本的文件系统对象功能，包括接受访问者和获取文件类型的方法。</span></span><br><span class="line"><span class="comment"> * 该类不应该直接实例化，应由其子类实例化。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileSystem</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数初始化文件系统对象。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; name 文件系统的名称。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> &#123;<span class="type">TypeError</span>&#125; 如果尝试直接构造FileSystem实例，则抛出TypeError。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span>.<span class="property">target</span> === <span class="title class_">FileSystem</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Cannot construct File instances directly&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受一个访问者对象并对当前对象进行访问。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">Visitor</span>&#125; visitor 访问者对象。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> &#123;<span class="type">TypeError</span>&#125; 如果传入的参数不是Visitor类型，则抛出TypeError。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">accept</span>(<span class="params">visitor</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(visitor <span class="keyword">instanceof</span> <span class="title class_">Visitor</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Visitor object expected&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        visitor.<span class="title function_">visit</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文件类型的抽象方法。</span></span><br><span class="line"><span class="comment">     * 该方法应由子类实现，以提供具体的文件类型信息。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> &#123;<span class="type">Error</span>&#125; 当调用该方法时，抛出一个错误，提示必须由子类实现该方法。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">getType</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;getType method must be implemented by subclasses&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">FileSystem</span></span><br></pre></td></tr></table></figure><p><br/></p><p>文件子类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TextFile类继承自FileSystem类，用于处理文本文件的相关操作。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">FileSystem</span> <span class="keyword">from</span> <span class="string">&#x27;./File&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个TextFile实例。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; name 文件名。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; content 文件内容。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TextFile</span> <span class="keyword">extends</span> <span class="title class_ inherited__">FileSystem</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, content</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(name) <span class="comment">// 调用父类的构造函数</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">content</span> = content <span class="comment">// 设置文件内容</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文件类型。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span> &#123;<span class="type">string</span>&#125; 返回文件类型，此处固定为&#x27;text&#x27;。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">getType</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;text&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">TextFile</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ImageFile类继承自FileSystem类，用于处理图像文件相关操作。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">FileSystem</span> <span class="keyword">from</span> <span class="string">&#x27;./File&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个ImageFile实例。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; name 文件名。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Blob|Uint8Array</span>&#125; data 文件数据。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ImageFile</span> <span class="keyword">extends</span> <span class="title class_ inherited__">FileSystem</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, data</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(name) <span class="comment">// 调用父类构造函数</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">data</span> = data <span class="comment">// 存储文件数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文件类型。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125; 返回文件类型，此处固定为&#x27;image&#x27;。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">getType</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;image&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ImageFile</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 导入文件系统基础类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">FileSystem</span> <span class="keyword">from</span> <span class="string">&#x27;./File&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AudioFile 类，继承自 FileSystem，用于表示音频文件。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AudioFile</span> <span class="keyword">extends</span> <span class="title class_ inherited__">FileSystem</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数，创建一个 AudioFile 实例。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">name</span> - 音频文件的名称。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">string|Blob|MediaSource</span>&#125; <span class="variable">audio</span> - 音频数据，可以是文件路径、Blob对象或MediaSource对象。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, audio</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(name)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">audio</span> = audio</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文件类型，此处固定返回 &#x27;audio&#x27;。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125; 返回字符串 &#x27;audio&#x27;，表示此类处理的是音频文件。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">getType</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;audio&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 导出 AudioFile 类作为默认导出，便于其他模块使用。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">AudioFile</span></span><br></pre></td></tr></table></figure><p><br/></p><p>使用方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 导入各种文件类型的子类和访问者模式的相关类。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">TextFile</span> <span class="keyword">from</span> <span class="string">&#x27;../SubClass/TextFile&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ImageFile</span> <span class="keyword">from</span> <span class="string">&#x27;../SubClass/ImageFile&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AudioFile</span> <span class="keyword">from</span> <span class="string">&#x27;../SubClass/AudioFile&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CompressVisitor</span>, <span class="title class_">EncryptVisitor</span>, <span class="title class_">PrintVisitor</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../VisitorPattern&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建不同类型的文件实例</span></span><br><span class="line"><span class="keyword">const</span> textFile = <span class="keyword">new</span> <span class="title class_">TextFile</span>(<span class="string">&quot;document.txt&quot;</span>, <span class="string">&quot;This is the content of the text file.&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> imageFile = <span class="keyword">new</span> <span class="title class_">ImageFile</span>(<span class="string">&quot;photo.jpg&quot;</span>, <span class="string">&quot;Image data...&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> audioFile = <span class="keyword">new</span> <span class="title class_">AudioFile</span>(<span class="string">&quot;music.mp3&quot;</span>, <span class="string">&quot;Audio data...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建不同功能的访问者实例</span></span><br><span class="line"><span class="keyword">const</span> printVisitor = <span class="keyword">new</span> <span class="title class_">PrintVisitor</span>()</span><br><span class="line"><span class="keyword">const</span> compressVisitor = <span class="keyword">new</span> <span class="title class_">CompressVisitor</span>()</span><br><span class="line"><span class="keyword">const</span> encryptVisitor = <span class="keyword">new</span> <span class="title class_">EncryptVisitor</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对所有文件进行打印访问</span></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// Printing text file document.txt:</span></span><br><span class="line"><span class="comment">// This is the content of the text file.</span></span><br><span class="line">textFile.<span class="title function_">accept</span>(printVisitor)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// Printing image file photo.jpg</span></span><br><span class="line">imageFile.<span class="title function_">accept</span>(printVisitor)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// Printing audio file music.mp3</span></span><br><span class="line">audioFile.<span class="title function_">accept</span>(printVisitor)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对所有文件进行压缩访问</span></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// Compressing text file document.txt</span></span><br><span class="line">textFile.<span class="title function_">accept</span>(compressVisitor)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// Compressing image file photo.jpg</span></span><br><span class="line">imageFile.<span class="title function_">accept</span>(compressVisitor)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// Compressing audio file music.mp3</span></span><br><span class="line">audioFile.<span class="title function_">accept</span>(compressVisitor)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对所有文件进行加密访问</span></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// Encrypting text file document.txt</span></span><br><span class="line">textFile.<span class="title function_">accept</span>(encryptVisitor)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// Encrypting image file photo.jpg</span></span><br><span class="line">imageFile.<span class="title function_">accept</span>(encryptVisitor)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// Encrypting audio file music.mp3</span></span><br><span class="line">audioFile.<span class="title function_">accept</span>(encryptVisitor)</span><br></pre></td></tr></table></figure><p><br/></p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ol><li><p><strong>编译器设计</strong></p><p>编译器可以使用访问者模式来遍历语法树并执行不同的操作，例如语法分析、类型检查、代码生成等</p></li><li><p><strong>文件处理</strong></p><p>像你之前提到的文件系统中的不同类型的文件对象，可以使用访问者模式来实现文件的不同操作，如打印、压缩、加密等</p></li><li><p><strong>UI 组件</strong></p><p>在图形界面开发中，如果有不同类型的 UI 组件（如按钮、文本框、下拉菜单等），可以使用访问者模式来执行不同的操作，如渲染、验证、序列化等</p></li><li><p><strong>数据结构操作</strong></p><p>当需要对数据结构执行多种操作时，例如遍历树、图等，可以使用访问者模式来实现这些操作，而不必修改数据结构本身</p></li><li><p><strong>游戏开发</strong></p><p>在游戏开发中，访问者模式可以用于实现不同类型的游戏对象的行为，如处理碰撞、更新状态等</p></li><li><p><strong>医疗信息系统</strong></p><p>在医疗信息系统中，可以使用访问者模式来执行不同的操作，如数据采集、统计分析、报表生成等</p></li></ol><p><br/></p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/wutiaowu5t5/DesignPattern/tree/main/BehaviorType/VisitorPattern"><img src="https://github-readme-stats.vercel.app/api/pin/?username=wutiaowu5t5&repo=DesignPattern&show_owner=true"/></a>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;访问者模式（Visitor Pattern）是一种行为型设计模式，它允许在不改变被访问对象的类的前提下定义对其进行操作的新操作&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《状态模式（行为型）》</title>
    <link href="https://wutiaowu5t5.github.io/posts/d207f3e/"/>
    <id>https://wutiaowu5t5.github.io/posts/d207f3e/</id>
    <published>2024-04-04T07:24:24.000Z</published>
    <updated>2024-04-04T07:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>状态模式（State Pattern）是一种行为型设计模式，它允许对象在内部状态发生变化时改变其行为，使得对象看起来好像修改了其类</p><p><br/></p><p>状态模式通常涉及三个核心角色：上下文（Context）、状态（State）和具体状态（Concrete State）</p><ul><li><p><strong>上下文（Context）</strong></p><p>维护一个当前状态对象，并将状态相关的操作委托给当前状态对象处理</p><p>上下文对象通常会包含一个状态对象的引用，并提供方法来切换当前状态和执行状态相关的操作</p></li><li><p><strong>状态（State）</strong></p><p>定义了一个接口用于封装与上下文相关的行为</p><p>状态对象通常会包含多个方法，用于处理上下文对象的请求，并可能会改变上下文对象的状态</p></li><li><p><strong>具体状态（Concrete State）</strong></p><p>实现了状态接口，并负责实现具体的状态行为</p><p>具体状态对象通常会包含状态相关的业务逻辑，并根据需要改变上下文对象的状态</p></li></ul><p><br/></p><p>状态模式的核心思想是将对象的状态和行为进行分离，使得状态的改变不会影响对象的行为，从而实现对象的灵活性和可扩展性</p><p>这种模式的优点在于，可以将状态的转换和状态的行为封装到不同的状态对象中，使得状态之间的转换更加灵活和可扩展</p><p>状态模式适用于以下情况：</p><ul><li>当对象的行为取决于其状态，并且状态可能在运行时发生变化时，可以使用状态模式</li><li>当希望将状态的转换和状态的行为封装到不同的状态对象中，并且希望通过配置来动态地改变对象的行为时，状态模式也是一个很好的选择</li></ul><p><br/></p><p>举个简单的例子，考虑一个自动售货机系统</p><p>自动售货机的行为可能会根据不同的状态（如有货、缺货、正在出货等）而发生变化，而状态模式可以将每种状态抽象成一个状态对象，并根据当前状态来执行相应的行为</p><p>例如，当自动售货机处于有货状态时，可以执行出售商品的行为；当自动售货机处于缺货状态时，可以执行补货的行为</p><p>这样，可以通过改变状态对象来动态地改变自动售货机的行为，而不需要修改自动售货机的代码</p><p><br/></p><h2 id="实现条件"><a href="#实现条件" class="headerlink" title="实现条件"></a>实现条件</h2><ol><li><p><strong>存在多个状态</strong></p><p>状态模式适用于存在多个状态，并且对象在不同状态下会有不同的行为的情况</p></li><li><p><strong>状态之间存在转换关系</strong></p><p>状态模式适用于状态之间存在转换关系，并且状态转换是由一定的条件触发的情况</p></li><li><p><strong>需要封装对象的状态</strong></p><p>状态模式适用于需要封装对象的状态，并且根据对象的状态来决定对象的行为的情况</p></li><li><p><strong>行为随状态的改变而改变</strong></p><p>状态模式适用于对象的行为随状态的改变而改变的情况，状态模式将对象的行为分离成多个状态类，每个状态类负责管理对象在特定状态下的行为</p></li></ol><p><br/></p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li><p><strong>封装了状态相关行为</strong></p><p>状态模式将每个状态封装成一个类，使得每个状态都有独立的类实现，从而简化了状态之间的转换和管理</p></li><li><p><strong>消除了大量的条件判断语句</strong></p><p>状态模式将对象的行为随状态的改变而改变，避免了大量的条件判断语句，使得代码更加清晰和易于维护</p></li><li><p><strong>符合开闭原则</strong></p><p>状态模式符合开闭原则，可以通过增加新的状态类来扩展系统的功能，而无需修改已有的代码</p></li><li><p><strong>增强了对象的封装性</strong></p><p>状态模式将对象的状态封装到不同的状态类中，使得对象的状态对外部是透明的，增强了对象的封装性</p></li><li><p><strong>简化了对象的行为切换</strong></p><p>状态模式将对象的行为切换和状态转换都交由状态类来管理，使得对象的行为切换更加简单和灵活</p></li></ol><p><br/></p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li><p><strong>可能会增加类的数量</strong></p><p>状态模式会将每个状态都封装成一个类，可能会导致系统中类的数量增加，从而增加系统的复杂度</p></li><li><p><strong>状态之间的转换可能复杂</strong></p><p>状态模式要求状态之间存在转换关系，如果状态之间的转换关系比较复杂，可能会导致状态模式的实现变得复杂</p></li><li><p><strong>可能导致逻辑分散</strong></p><p>状态模式将对象的行为切换和状态转换都交由状态类来管理，可能会导致对象的行为和状态分散到多个状态类中，增加了代码的理解和维护难度</p></li></ol><p><br/></p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>自动售货机类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自动售货机类，管理产品状态和行为。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VendingMachineState</span> <span class="keyword">from</span> <span class="string">&#x27;./SubClass/VendingMachineState&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HasProductState</span> <span class="keyword">from</span> <span class="string">&#x27;./SubClass/HasProductState&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">SoldOutState</span> <span class="keyword">from</span> <span class="string">&#x27;./SubClass/SoldOutState&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VendingMachine</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数初始化自动售货机状态。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; initialStock 初始库存量。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">initialStock</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">hasProductState</span> = <span class="keyword">new</span> <span class="title class_">HasProductState</span>(<span class="variable language_">this</span>) <span class="comment">// 当有产品时的状态</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">soldOutState</span> = <span class="keyword">new</span> <span class="title class_">SoldOutState</span>(<span class="variable language_">this</span>) <span class="comment">// 当产品售罄时的状态</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">currentState</span> = initialStock &gt; <span class="number">0</span> ? <span class="variable language_">this</span>.<span class="property">hasProductState</span> : <span class="variable language_">this</span>.<span class="property">soldOutState</span> <span class="comment">// 根据初始库存设置当前状态</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置自动售货机的状态。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">VendingMachineState</span>&#125; newState 新的状态对象。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">setState</span>(<span class="params">newState</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (newState <span class="keyword">instanceof</span> <span class="title class_">VendingMachineState</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`状态变化：从<span class="subst">$&#123;<span class="variable language_">this</span>.currentState.constructor.name&#125;</span>到<span class="subst">$&#123;newState.constructor.name&#125;</span>`</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">currentState</span> = newState</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;无效的状态对象&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取有产品状态对象。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span> &#123;<span class="type">HasProductState</span>&#125; 有产品状态对象。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">getHasProductState</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">hasProductState</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取售罄状态对象。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span> &#123;<span class="type">SoldOutState</span>&#125; 售罄状态对象。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">getSoldOutState</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">soldOutState</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销售产品，行为取决于当前状态。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">sellProduct</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">currentState</span>.<span class="title function_">sellProduct</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 补充库存，行为取决于当前状态。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">restock</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">currentState</span>.<span class="title function_">restock</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">VendingMachine</span></span><br></pre></td></tr></table></figure><p><br/></p><p>状态基类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * VendingMachineState类定义了自动售货机状态的基类，为状态模式的一部分。</span></span><br><span class="line"><span class="comment"> * 这个类主要是为了提供给子类继承，子类需要实现其中的sellProduct和restock方法。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; vendingMachine 对象引用，指向自动售货机实例，允许状态对象访问或修改自动售货机的状态。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VendingMachineState</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数，初始化VendingMachineState实例。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; vendingMachine 自动售货机实例，用于在状态中控制和访问售货机功能。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">vendingMachine</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">vendingMachine</span> = vendingMachine; <span class="comment">// 绑定自动售货机实例到当前状态对象</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象方法，要求子类实现售出商品的逻辑。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> &#123;<span class="type">Error</span>&#125; 如果子类未实现此方法，抛出错误提示。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">sellProduct</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;子类必须实现此方法&#x27;</span>) <span class="comment">// 强制子类重写以实现具体售货逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象方法，要求子类实现补货的逻辑。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> &#123;<span class="type">Error</span>&#125; 如果子类未实现此方法，抛出错误提示。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">restock</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;子类必须实现此方法&#x27;</span>) <span class="comment">// 强制子类重写以实现具体补货逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出VendingMachineState类作为模块的默认导出项，便于其他模块使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">VendingMachineState</span></span><br></pre></td></tr></table></figure><p><br/></p><p>状态子类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 该类表示售货机已有商品的状态。</span></span><br><span class="line"><span class="comment"> * 继承自VendingMachineState，以提供特定于售出商品状态的行为。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VendingMachineState</span> <span class="keyword">from</span> <span class="string">&#x27;./VendingMachineState&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HasProductState</span> <span class="keyword">extends</span> <span class="title class_ inherited__">VendingMachineState</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出售产品的方法。当售出产品时，将状态切换到售罄状态。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">sellProduct</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;商品已售出&quot;</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">vendingMachine</span>.<span class="title function_">setState</span>(<span class="variable language_">this</span>.<span class="property">vendingMachine</span>.<span class="title function_">getSoldOutState</span>())</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试为售货机补货的方法。在已有商品的状态下，该操作不被允许，</span></span><br><span class="line"><span class="comment">     * 所以只是打印一条信息并不进行任何操作。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">restock</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;无法补货，售货机中已有商品&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">HasProductState</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SoldOutState类继承自VendingMachineState，用于表示自动售货机售罄状态。</span></span><br><span class="line"><span class="comment"> * 在这种状态下，自动售货机无法出售商品，但可以进行补货操作。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VendingMachineState</span> <span class="keyword">from</span> <span class="string">&#x27;./VendingMachineState&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SoldOutState</span> <span class="keyword">extends</span> <span class="title class_ inherited__">VendingMachineState</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试出售商品时的操作。</span></span><br><span class="line"><span class="comment">     * 由于售罄状态，此操作将不执行任何动作，仅输出一条信息。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">sellProduct</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;无法售出，商品已售罄&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行补货操作。</span></span><br><span class="line"><span class="comment">     * 当调用此方法时，自动售货机将改变状态为有货状态（HasProductState）。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">restock</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;补货成功&quot;</span>)</span><br><span class="line">        <span class="comment">// 切换状态至有货状态</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">vendingMachine</span>.<span class="title function_">setState</span>(<span class="variable language_">this</span>.<span class="property">vendingMachine</span>.<span class="title function_">getHasProductState</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">SoldOutState</span></span><br></pre></td></tr></table></figure><p><br/></p><p>怎么使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 导入VendingMachine类，该类实现了状态模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VendingMachine</span> <span class="keyword">from</span> <span class="string">&#x27;../StatePattern&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化一个拥有10个商品的自动售货机实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> vendingMachine = <span class="keyword">new</span> <span class="title class_">VendingMachine</span>(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在有货状态下进行商品销售和补货操作的示例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">vendingMachine.<span class="title function_">sellProduct</span>() <span class="comment">// 输出：商品已售出</span></span><br><span class="line">vendingMachine.<span class="title function_">restock</span>() <span class="comment">// 输出：无法补货，售货机中已有商品</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切换自动售货机到缺货状态，并进行操作示例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">vendingMachine.<span class="title function_">setState</span>(vendingMachine.<span class="title function_">getSoldOutState</span>())</span><br><span class="line">vendingMachine.<span class="title function_">sellProduct</span>() <span class="comment">// 输出：无法售出，商品已售罄</span></span><br><span class="line">vendingMachine.<span class="title function_">restock</span>() <span class="comment">// 输出：补货成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 尝试传入无效状态进行测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">vendingMachine.<span class="title function_">setState</span>(<span class="string">&quot;InvalidState&quot;</span>) <span class="comment">// 输出：无效的状态对象</span></span><br></pre></td></tr></table></figure><p><br/></p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ol><li><p><strong>自动售货机</strong></p><p>自动售货机是一个很好的状态模式的应用示例</p><p>根据货物存量的不同，自动售货机的行为会发生变化，比如有货时可以售卖商品，缺货时需要进行补货等</p></li><li><p><strong>订单状态管理</strong></p><p>在电子商务系统中，订单状态经常会发生变化，比如订单创建、支付、发货、完成等</p><p>可以使用状态模式来管理订单的各种状态，使得订单对象能够根据不同状态执行不同的行为</p></li><li><p><strong>文档编辑器</strong></p><p>在文档编辑器中，可以根据文档的当前状态（比如编辑中、已保存、已发布等）来决定编辑器的行为，比如保存、发布、撤销等操作</p></li><li><p><strong>多媒体播放器</strong></p><p>在多媒体播放器中，播放器的行为会根据当前播放状态（比如播放、暂停、停止等）来改变，使用状态模式可以方便地管理播放器的状态转换</p></li><li><p><strong>网络连接管理</strong></p><p>在网络应用中，网络连接的状态经常会发生变化，比如连接中、已连接、断开连接等</p><p>状态模式可以用来管理网络连接的状态，以便根据不同的状态执行不同的操作</p></li></ol><p><br/></p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/wutiaowu5t5/DesignPattern/tree/main/BehaviorType/StatePattern"><img src="https://github-readme-stats.vercel.app/api/pin/?username=wutiaowu5t5&repo=DesignPattern&show_owner=true"/></a>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;状态模式（State Pattern）是一种行为型设计模式，它允许对象在内部状态发生变化时改变其行为，使得对象看起来好像修改了其类&lt;/p&gt;
</summary>
      
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《备忘录模式（行为型）》</title>
    <link href="https://wutiaowu5t5.github.io/posts/e88d43d9/"/>
    <id>https://wutiaowu5t5.github.io/posts/e88d43d9/</id>
    <published>2024-04-03T07:24:24.000Z</published>
    <updated>2024-04-03T07:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>备忘录模式（Memento Pattern）是一种行为型设计模式，它允许在不暴露对象实现细节的情况下，捕获并存储对象的内部状态，并在需要时恢复到先前的状态</p><p><br/></p><p>备忘录模式通过引入三个核心角色来实现这一点：发起人（Originator）、备忘录（Memento）和管理者（Caretaker）</p><ul><li><p><strong>发起人（Originator）</strong></p><p>负责创建备忘录对象，并在需要时使用备忘录对象恢复其状态</p><p>发起人可以访问其内部状态，并在需要时将其保存到备忘录中或从备忘录中恢复状态</p></li><li><p><strong>备忘录（Memento）</strong></p><p>用于存储发起人对象的内部状态</p><p>备忘录对象可以是不可变的，以确保其状态不会被外部修改</p></li><li><p><strong>管理者（Caretaker）</strong></p><p>负责存储和管理备忘录对象</p><p>管理者通常不直接操作备忘录的内容，而是将备忘录对象传递给发起人，以便发起人可以恢复其状态</p></li></ul><p><br/></p><p>备忘录模式的核心思想是将对象的状态保存到备忘录对象中，并在需要时将状态恢复到先前的状态，从而实现对象状态的回溯</p><p>这种模式的优点在于，可以避免在对象内部暴露其状态的细节，同时也使得状态的存储和恢复变得更加灵活和可控</p><p>备忘录模式适用于以下情况：</p><ul><li>当需要保存和恢复对象的状态，并且不希望暴露对象内部状态细节时，可以使用备忘录模式</li><li>当需要实现撤销/重做功能或者历史记录功能时，备忘录模式也是一个很好的选择</li></ul><p><br/></p><p>举个简单的例子，考虑一个文本编辑器</p><p>用户在编辑文本时可以进行多次修改，而备忘录模式可以用来保存每次修改前的文本状态，以便用户可以撤销到先前的状态或者查看编辑历史记录</p><p><br/></p><h2 id="实现条件"><a href="#实现条件" class="headerlink" title="实现条件"></a>实现条件</h2><ol><li><p><strong>需要保存和恢复对象的状态</strong></p><p>备忘录模式适用于需要保存对象状态，并在需要时将其恢复到先前状态的情况</p><p>这通常涉及到对象的状态频繁变化，需要在某个时间点保存状态以便后续恢复</p></li><li><p><strong>需要实现状态保存和恢复的封装</strong></p><p>备忘录模式将状态的保存和恢复封装到备忘录对象中，因此需要定义备忘录对象和相应的接口来实现状态的保存和恢复</p></li><li><p><strong>需要保持备忘录对象与原发器对象之间的隔离</strong></p><p>备忘录模式通过备忘录对象来保存原发器对象的状态，因此需要保持备忘录对象与原发器对象之间的隔离，以防止原发器对象直接访问备忘录对象的内部状态</p></li><li><p><strong>需要提供恢复状态的接口</strong></p><p>备忘录模式通常需要提供一个接口或方法来将对象恢复到之前保存的状态</p><p>这样，在需要恢复状态时，可以通过调用该接口或方法来实现状态的恢复</p></li></ol><p><br/></p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li><p><strong>状态保存和恢复的封装</strong></p><p>备忘录模式将对象状态的保存和恢复封装到备忘录对象中，使得原发器对象可以专注于自身的业务逻辑，而不需要关心状态的保存和恢复</p></li><li><p><strong>状态的可控性</strong></p><p>备忘录模式允许在任意时间点保存对象的状态，并在需要时将其恢复到先前的状态，从而提供了一种灵活的方式来管理对象的状态</p></li><li><p><strong>隔离备忘录对象与原发器对象</strong></p><p>备忘录模式通过备忘录对象来保存原发器对象的状态，从而实现了备忘录对象与原发器对象之间的隔离，使得原发器对象无法直接访问备忘录对象的内部状态，保证了对象状态的封装性和安全性</p></li><li><p><strong>支持多次撤销和重做操作</strong></p><p>备忘录模式允许保存多个状态快照，并支持多次撤销和重做操作，从而提供了一种有效的方式来管理对象状态的变化历史</p></li></ol><p><br/></p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li><p><strong>可能导致内存消耗过大</strong></p><p>备忘录模式需要在备忘录对象中保存对象的状态信息，如果对象的状态信息较大或者状态信息保存的备忘录对象过多，可能会导致内存消耗过大</p></li><li><p><strong>可能导致性能下降</strong></p><p>备忘录模式需要在备忘录对象中保存对象的状态信息，如果频繁保存状态或者频繁恢复状态，可能会导致性能下降</p></li><li><p><strong>可能增加代码复杂度</strong></p><p>备忘录模式需要定义备忘录对象、原发器对象和负责人对象等多个角色，并且需要正确管理这些对象之间的关系，可能会增加代码的复杂度</p></li></ol><p><br/></p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>编辑器类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * EditorMemento 类用于保存编辑器的状态（内容）。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EditorMemento</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; content 编辑器的内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">content</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">content</span> = content</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TextEditor 类表示一个文本编辑器，支持打字、保存状态、撤销操作等功能。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TextEditor</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">content</span> = <span class="string">&#x27;&#x27;</span> <span class="comment">// 编辑器当前的内容</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">history</span> = [] <span class="comment">// 编辑器的状态历史记录</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">historySize</span> = <span class="number">10</span> <span class="comment">// 限制历史记录的最大大小</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在当前内容后添加文字。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; words 要添加的文字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">type</span>(<span class="params">words</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">content</span> += words</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存当前编辑器状态到历史记录。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">save</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">history</span>.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="title class_">EditorMemento</span>(<span class="variable language_">this</span>.<span class="property">content</span>)) <span class="comment">// 将当前内容状态保存到历史记录</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">history</span>.<span class="property">length</span> &gt; <span class="variable language_">this</span>.<span class="property">historySize</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">history</span>.<span class="title function_">shift</span>() <span class="comment">// 如果历史记录超过限制，则移除最旧的状态</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 撤销最后的操作，恢复之前的状态。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">undo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">history</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">history</span>.<span class="title function_">pop</span>() <span class="comment">// 移除最新保存的状态</span></span><br><span class="line">            <span class="comment">// 如果历史记录为空，则内容为空字符串；否则，内容恢复为最新保存的状态</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">content</span> = <span class="variable language_">this</span>.<span class="property">history</span>.<span class="property">length</span> === <span class="number">0</span> ? <span class="string">&#x27;&#x27;</span> : <span class="variable language_">this</span>.<span class="property">history</span>[<span class="variable language_">this</span>.<span class="property">history</span>.<span class="property">length</span> - <span class="number">1</span>].<span class="property">content</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;没有更多的历史状态可以撤销&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 恢复到指定历史记录的状态。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; index 要恢复的历史记录的索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">restore</span>(<span class="params">index</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="variable language_">this</span>.<span class="property">history</span>.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">content</span> = <span class="variable language_">this</span>.<span class="property">history</span>[index].<span class="property">content</span> <span class="comment">// 恢复指定索引的内容状态</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;无效的历史索引&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前编辑器的内容。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125; 编辑器的内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">getContent</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">content</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取编辑器的历史记录（状态内容的副本）。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="type">string[]</span>&#125; 历史记录中内容的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">getHistory</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">history</span>.<span class="title function_">map</span>(<span class="function"><span class="params">memento</span> =&gt;</span> memento.<span class="property">content</span>) <span class="comment">// 返回历史记录中内容的副本，而非引用</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清除编辑器的历史记录。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">clearHistory</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">history</span> = []</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">TextEditor</span></span><br></pre></td></tr></table></figure><p><br/></p><p>怎么使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入TextEditor类</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">TextEditor</span> <span class="keyword">from</span> <span class="string">&#x27;../MediatorPattern&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个TextEditor实例</span></span><br><span class="line"><span class="keyword">const</span> editor = <span class="keyword">new</span> <span class="title class_">TextEditor</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入文本并保存</span></span><br><span class="line">editor.<span class="title function_">type</span>(<span class="string">&#x27;Hello, &#x27;</span>)</span><br><span class="line">editor.<span class="title function_">save</span>()</span><br><span class="line"><span class="comment">// 继续输入文本并保存</span></span><br><span class="line">editor.<span class="title function_">type</span>(<span class="string">&#x27;world!&#x27;</span>)</span><br><span class="line">editor.<span class="title function_">save</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印当前编辑器内容</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(editor.<span class="title function_">getContent</span>()) <span class="comment">// 输出：Hello, world!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行撤销操作</span></span><br><span class="line">editor.<span class="title function_">undo</span>()</span><br><span class="line"><span class="comment">// 打印撤销后的内容</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(editor.<span class="title function_">getContent</span>()) <span class="comment">// 输出：Hello,</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 再次执行撤销操作</span></span><br><span class="line">editor.<span class="title function_">undo</span>()</span><br><span class="line"><span class="comment">// 打印再次撤销后的内容</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(editor.<span class="title function_">getContent</span>()) <span class="comment">// 输出：（空字符串）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试使用无效的历史索引进行恢复操作</span></span><br><span class="line">editor.<span class="title function_">restore</span>(<span class="number">1</span>) <span class="comment">// 输出：无效的历史索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印编辑器的历史记录</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(editor.<span class="title function_">getHistory</span>())</span><br></pre></td></tr></table></figure><p><br/></p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ol><li><p><strong>文本编辑器和IDE</strong>:</p><p>文本编辑器可以使用备忘录模式来保存编辑历史记录，以便用户可以撤销到先前的状态或者查看编辑历史</p></li><li><p><strong>图形编辑器</strong></p><p>图形编辑器（如绘图软件）可以使用备忘录模式来保存图形对象的状态，以便用户可以撤销/重做操作，或者在需要时恢复到先前的绘图状态</p></li><li><p><strong>电子邮件应用</strong></p><p>在电子邮件应用中，用户可以使用备忘录模式保存草稿状态，以便在稍后继续编辑或者恢复到先前的编辑状态</p></li><li><p><strong>游戏应用</strong></p><p>游戏应用中可以使用备忘录模式来保存游戏进度或者关卡状态，以便玩家可以在需要时回溯到先前的游戏状态</p></li><li><p><strong>事务管理</strong></p><p>在数据库系统中，备忘录模式可以用于事务管理，允许在执行事务时保存数据库状态，并在需要时回滚到先前的状态</p></li><li><p><strong>撤销/重做功能</strong></p><p>许多应用程序都提供了撤销/重做功能，备忘录模式是实现这种功能的常见方式之一</p><p>它可以记录每次操作前的状态，以便用户可以在需要时撤销或者重做操作</p></li></ol><p><br/></p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/wutiaowu5t5/DesignPattern/tree/main/BehaviorType/MediatorPattern"><img src="https://github-readme-stats.vercel.app/api/pin/?username=wutiaowu5t5&repo=DesignPattern&show_owner=true"/></a>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;备忘录模式（Memento Pattern）是一种行为型设计模式，它允许在不暴露对象实现细节的情况下，捕获并存储对象的内部状态，并在需要时恢</summary>
      
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《命令模式（行为型）》</title>
    <link href="https://wutiaowu5t5.github.io/posts/25e1ecde/"/>
    <id>https://wutiaowu5t5.github.io/posts/25e1ecde/</id>
    <published>2024-04-02T07:24:24.000Z</published>
    <updated>2024-04-02T07:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>命令模式（Command Pattern）是一种行为型设计模式，它将请求封装成一个对象，从而允许用不同的请求对客户进行参数化，队列或记录请求日志，并支持可撤销的操作</p><p><br/></p><p>命令模式通常涉及四个核心角色：命令（Command）、接收者（Receiver）、调用者（Invoker）和客户端（Client）</p><ul><li><p><strong>命令（Command）</strong></p><p>定义了执行操作的接口</p><p>通常包含一个执行操作的方法，以及可能包含一些其他方法用于支持命令的撤销、重做等操作</p></li><li><p><strong>接收者（Receiver）</strong></p><p>实际执行命令操作的对象</p><p>接收者包含了具体的业务逻辑，负责实现命令接口定义的操作</p></li><li><p><strong>调用者（Invoker）</strong></p><p>负责调用命令对象来执行请求</p><p>调用者通常不直接与接收者交互，而是通过调用命令对象的方法来执行具体的操作</p></li><li><p><strong>客户端（Client）</strong></p><p>创建命令对象，并将命令对象传递给调用者来执行请求</p><p>客户端通常不需要知道命令对象的具体实现，只需要知道如何创建命令对象，并将其传递给调用者即可</p></li></ul><p><br/></p><p>命令模式的核心思想是将请求封装成一个对象，使得请求的发送者和接收者之间解耦，从而可以灵活地添加、修改和重用命令对象，同时也提供了一种统一的方式来处理请求的执行、撤销和重做等操作</p><p>命令模式适用于以下情况：</p><ul><li>当需要将请求的发送者和接收者之间解耦，并且希望在不同的请求之间进行参数化时，可以使用命令模式</li><li>当希望支持命令的撤销、重做等操作，并且希望将这些操作封装到命令对象中时，命令模式也是一个很好的选择</li></ul><p><br/></p><p>举个简单的例子，考虑一个遥控器系统</p><p>遥控器可以控制不同的家电设备（如电视、音响等），而命令模式可以将每个控制命令（如打开、关闭、调高音量等）封装成一个命令对象，并将命令对象传递给遥控器来执行具体的控制操作</p><p>这样，可以实现遥控器与家电设备之间的解耦，同时也提供了一种统一的方式来处理控制命令的执行、撤销和重做等操作</p><p><br/></p><h2 id="实现条件"><a href="#实现条件" class="headerlink" title="实现条件"></a>实现条件</h2><ol><li><p><strong>存在命令对象</strong></p><p>命令模式适用于存在一组需要被执行的命令，并且希望将这些命令封装成独立的对象的情况</p></li><li><p><strong>需要将请求者和接收者解耦</strong></p><p>命令模式适用于需要将请求者和接收者解耦的情况，即请求者不需要知道接收者的具体实现细节，而是通过命令对象来与接收者进行通信</p></li><li><p><strong>需要支持撤销和重做操作</strong></p><p>命令模式适用于需要支持撤销和重做操作的情况，因为命令对象可以保存执行命令的历史记录，并且可以根据需要进行撤销和重做操作</p></li><li><p><strong>需要支持命令队列或者日志</strong></p><p>命令模式适用于需要支持命令队列或者日志的情况，因为命令对象可以将所有的命令保存在一个队列中，并且可以将执行命令的日志保存下来</p></li></ol><p><br/></p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li><p><strong>解耦请求者和接收者</strong></p><p>命令模式将请求封装成命令对象，使得请求者和接收者之间解耦，请求者不需要知道接收者的具体实现细节</p></li><li><p><strong>容易扩展新的命令</strong></p><p>由于命令模式将每个命令封装成独立的对象，因此容易扩展新的命令，只需要创建新的命令对象并实现对应的执行逻辑即可</p></li><li><p><strong>支持撤销和重做操作</strong></p><p>命令模式可以轻松地支持撤销和重做操作，因为每个命令对象都可以保存执行命令的历史记录，并且可以根据需要进行撤销和重做操作</p></li><li><p><strong>支持命令队列和日志</strong></p><p>命令模式可以支持命令队列和日志功能，因为命令对象可以将所有的命令保存在一个队列中，并且可以将执行命令的日志保存下来</p></li><li><p><strong>降低系统的耦合度</strong></p><p>命令模式降低了系统的耦合度，使得请求者和接收者之间的关系更加灵活，易于维护和扩展</p></li></ol><p><br/></p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li><p><strong>可能导致类爆炸</strong></p><p>命令模式可能会导致类爆炸，因为每个命令都需要定义一个独立的命令类，如果命令较多，可能会导致类的数量增加</p></li><li><p><strong>增加代码复杂度</strong></p><p>命令模式可能会增加代码的复杂度，因为需要定义大量的命令类，并且需要正确地组织和管理这些命令类</p></li><li><p><strong>可能降低性能</strong></p><p>命令模式可能会降低系统的性能，因为需要创建和管理大量的命令对象，并且需要保存命令的历史记录，可能会导致内存占用和执行时间增加</p></li></ol><p><br/></p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>控制器基类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Command</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./SubClass/Command&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 远程控制类，用于管理和执行命令</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RemoteControl</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数，初始化命令列表和历史记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">commands</span> = [] <span class="comment">// 储存待执行的命令</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">history</span> = [] <span class="comment">// 用于存储执行过的命令</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置命令</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">Command</span>&#125; <span class="variable">command</span> - 需要设置的命令对象，必须是Command的实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> &#123;<span class="type">Error</span>&#125; 会抛出错误如果传入的参数不是Command的实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">setCommand</span>(<span class="params">command</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(command <span class="keyword">instanceof</span> <span class="title class_">Command</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;传递的参数必须是Command的实例&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">commands</span>.<span class="title function_">push</span>(command)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按下按钮执行命令</span></span><br><span class="line"><span class="comment">     * 如果有可执行的命令，则执行队列中的第一个命令，并将其移出队列，存入历史记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">pressButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">commands</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> command = <span class="variable language_">this</span>.<span class="property">commands</span>.<span class="title function_">shift</span>() <span class="comment">// 执行队列中的第一个命令</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&#x27;execute&#x27;</span> <span class="keyword">in</span> command) &#123;</span><br><span class="line">                command.<span class="title function_">execute</span>()</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">history</span>.<span class="title function_">push</span>(command) <span class="comment">// 将执行的命令存入历史记录</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;无法执行命令：缺少execute方法&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;没有可执行的命令&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按下撤销按钮，执行撤销操作</span></span><br><span class="line"><span class="comment">     * 如果历史记录中有命令，则执行历史记录中的最后一个命令的undo方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">pressUndo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">history</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> command = <span class="variable language_">this</span>.<span class="property">history</span>.<span class="title function_">pop</span>() <span class="comment">// 取出历史记录中的最后一个命令</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&#x27;undo&#x27;</span> <span class="keyword">in</span> command) &#123;</span><br><span class="line">                command.<span class="title function_">undo</span>()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;无法撤销命令：缺少undo方法&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;没有可撤销的命令&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">RemoteControl</span></span><br></pre></td></tr></table></figure><p><br/></p><p>子类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Command 类定义了一个命令模式的基本结构。</span></span><br><span class="line"><span class="comment"> * 该类是抽象的，不应该直接实例化，它的目的是为了被子类继承。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@constructor</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; <span class="variable">device</span> - 与命令相关联的设备对象。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> 会抛出错误如果尝试直接实例化 Command 类。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">device</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span>.<span class="property">target</span> === <span class="title class_">Command</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;本类不能实例化&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">device</span> = device</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行命令的方法。该方法在子类中被重写，以提供具体的命令执行逻辑。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> &#123;<span class="type">Error</span>&#125; 会抛出错误如果该方法在子类中没有被重写。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">execute</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;execute 方法必须被重写&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 撤销命令的方法。该方法在子类中被重写，以提供具体的命令撤销逻辑。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> &#123;<span class="type">Error</span>&#125; 会抛出错误如果该方法在子类中没有被重写。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">undo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;undo 方法必须被重写&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TurnOnCommand 类继承自 Command 类，用于执行打开设备的操作。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TurnOnCommand</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Command</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行打开设备的操作。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">execute</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">device</span>.<span class="title function_">turnOn</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 撤销打开设备的操作，即关闭设备。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">undo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">device</span>.<span class="title function_">turnOff</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TurnOffCommand 类继承自 Command 类，用于执行关闭设备的操作。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TurnOffCommand</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Command</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行关闭设备的操作。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">execute</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">device</span>.<span class="title function_">turnOff</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 撤销关闭设备的操作，即打开设备。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">undo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">device</span>.<span class="title function_">turnOn</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出 Command, TurnOnCommand, TurnOffCommand 供其他模块使用。</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    <span class="title class_">Command</span>,</span><br><span class="line">    <span class="title class_">TurnOnCommand</span>,</span><br><span class="line">    <span class="title class_">TurnOffCommand</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Stereo类代表一个音响系统。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stereo</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打开音响。</span></span><br><span class="line"><span class="comment">     * 无参数。</span></span><br><span class="line"><span class="comment">     * 无返回值。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">turnOn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;音响已打开&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭音响。</span></span><br><span class="line"><span class="comment">     * 无参数。</span></span><br><span class="line"><span class="comment">     * 无返回值。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">turnOff</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;音响已关闭&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出Stereo类作为默认模块</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Stereo</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 电视类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Television</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打开电视</span></span><br><span class="line"><span class="comment">     * @无参数</span></span><br><span class="line"><span class="comment">     * @无返回值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">turnOn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;电视已打开&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭电视</span></span><br><span class="line"><span class="comment">     * @无参数</span></span><br><span class="line"><span class="comment">     * @无返回值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">turnOff</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;电视已关闭&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出电视类作为默认模块</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Television</span></span><br></pre></td></tr></table></figure><p><br/></p><p>怎么使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这段代码展示了使用命令模式来控制家电设备（电视和音响）的示例。</span></span><br><span class="line"><span class="comment"> * 它通过将具体的打开和关闭命令分配给遥控器的不同按键来实现对家电设备的控制，</span></span><br><span class="line"><span class="comment"> * 并且提供了撤销操作的功能。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入远程控制、电视和音响类以及开关命令类</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">RemoteControl</span> <span class="keyword">from</span> <span class="string">&#x27;../CommandPattern&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Television</span> <span class="keyword">from</span> <span class="string">&#x27;../SubClass/Television&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Stereo</span> <span class="keyword">from</span> <span class="string">&#x27;../SubClass/Stereo&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">TurnOffCommand</span>, <span class="title class_">TurnOnCommand</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../SubClass/Command&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建电视和音响实例</span></span><br><span class="line"><span class="keyword">const</span> tv = <span class="keyword">new</span> <span class="title class_">Television</span>()</span><br><span class="line"><span class="keyword">const</span> stereo = <span class="keyword">new</span> <span class="title class_">Stereo</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建电视和音响的开关命令实例</span></span><br><span class="line"><span class="keyword">const</span> turnOnTvCommand = <span class="keyword">new</span> <span class="title class_">TurnOnCommand</span>(tv)</span><br><span class="line"><span class="keyword">const</span> turnOffTvCommand = <span class="keyword">new</span> <span class="title class_">TurnOffCommand</span>(tv)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> turnOnStereoCommand = <span class="keyword">new</span> <span class="title class_">TurnOnCommand</span>(stereo)</span><br><span class="line"><span class="keyword">const</span> turnOffStereoCommand = <span class="keyword">new</span> <span class="title class_">TurnOffCommand</span>(stereo)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建远程控制实例，并设置命令</span></span><br><span class="line"><span class="keyword">const</span> remoteControl = <span class="keyword">new</span> <span class="title class_">RemoteControl</span>()</span><br><span class="line"></span><br><span class="line">remoteControl.<span class="title function_">setCommand</span>(turnOnTvCommand)</span><br><span class="line">remoteControl.<span class="title function_">setCommand</span>(turnOffTvCommand)</span><br><span class="line">remoteControl.<span class="title function_">setCommand</span>(turnOnStereoCommand)</span><br><span class="line">remoteControl.<span class="title function_">setCommand</span>(turnOffStereoCommand)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用遥控器控制电视和音响的开关，并演示撤销操作</span></span><br><span class="line">remoteControl.<span class="title function_">pressButton</span>() <span class="comment">// 输出：电视已打开</span></span><br><span class="line">remoteControl.<span class="title function_">pressButton</span>() <span class="comment">// 输出：电视已关闭</span></span><br><span class="line">remoteControl.<span class="title function_">pressButton</span>() <span class="comment">// 输出：音响已打开</span></span><br><span class="line">remoteControl.<span class="title function_">pressButton</span>() <span class="comment">// 输出：音响已关闭</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 演示撤销操作，每次按下undo按钮将撤销上一步的操作</span></span><br><span class="line">remoteControl.<span class="title function_">pressUndo</span>()   <span class="comment">// 输出：音响已打开</span></span><br><span class="line">remoteControl.<span class="title function_">pressUndo</span>()   <span class="comment">// 输出：音响已关闭</span></span><br><span class="line">remoteControl.<span class="title function_">pressUndo</span>()   <span class="comment">// 输出：电视已打开</span></span><br><span class="line">remoteControl.<span class="title function_">pressUndo</span>()   <span class="comment">// 输出：电视已关闭</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当没有更多的命令可以撤销时，给出相应提示</span></span><br><span class="line">remoteControl.<span class="title function_">pressUndo</span>()   <span class="comment">// 输出：没有可撤销的命令</span></span><br></pre></td></tr></table></figure><p><br/></p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ol><li><p><strong>GUI应用程序</strong></p><p>在GUI应用程序中，命令模式常用于实现菜单和工具栏按钮的操作</p><p>每个菜单项或按钮都可以关联一个命令对象，当用户点击时，执行与该命令对象关联的操作</p></li><li><p><strong>撤销和重做功能</strong></p><p>命令模式非常适合实现撤销和重做功能</p><p>通过记录执行的命令历史，可以轻松地撤销上一步操作，并且可以再次执行已经撤销的操作</p></li><li><p><strong>多线程请求处理</strong></p><p>在多线程环境下，命令模式可以用于将请求封装成独立的命令对象，这样可以安全地将请求发送给不同的线程进行处理</p></li><li><p><strong>日程安排</strong></p><p>在日程安排应用程序中，用户可以添加、编辑和删除日程事件</p><p>每个操作可以表示为一个命令对象，以便能够轻松地撤销或重做这些操作</p></li><li><p><strong>数据库事务</strong></p><p>在数据库操作中，命令模式可以用于实现事务管理</p><p>每个数据库操作可以表示为一个命令对象，并且可以将多个命令组合成一个事务，以便能够一次性地执行或回滚一系列操作</p></li><li><p><strong>远程控制</strong></p><p>类似于你提到的遥控器系统，远程控制设备也是命令模式的典型应用场景</p><p>通过将每个控制命令封装成一个命令对象，并将命令对象传递给远程设备执行具体的控制操作，可以实现设备之间的解耦</p></li></ol><p><br/></p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/wutiaowu5t5/DesignPattern/tree/main/BehaviorType/CommandPattern"><img src="https://github-readme-stats.vercel.app/api/pin/?username=wutiaowu5t5&repo=DesignPattern&show_owner=true"/></a>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;命令模式（Command Pattern）是一种行为型设计模式，它将请求封装成一个对象，从而允许用不同的请求对客户进行参数化，队列或记录请求</summary>
      
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《职责链模式（行为型）》</title>
    <link href="https://wutiaowu5t5.github.io/posts/ae2b73e3/"/>
    <id>https://wutiaowu5t5.github.io/posts/ae2b73e3/</id>
    <published>2024-04-01T07:24:24.000Z</published>
    <updated>2024-04-01T07:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>职责链模式（Chain of Responsibility Pattern）是一种行为型设计模式，它允许多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系</p><p><br/></p><p>职责链模式通常涉及两个核心角色：处理者（Handler）和客户端（Client）</p><ul><li><p><strong>处理者（Handler）</strong></p><p>定义了一个处理请求的接口，并维护了一个后继处理者的引用</p><p>处理者可以决定是否处理请求，或者将请求传递给后继处理者</p></li><li><p><strong>客户端（Client）</strong></p><p>创建处理者对象，并将请求发送给处理者链的第一个处理者</p><p>客户端通常不需要知道处理者链的具体结构，只需要将请求发送给第一个处理者即可</p></li></ul><p><br/></p><p>职责链模式的核心思想是将请求发送者和接收者解耦，使得多个对象都有机会处理请求，并且可以灵活地调整处理者链的结构</p><p>这种模式的优点在于，可以降低请求发送者和接收者之间的耦合度，提高系统的灵活性和可扩展性</p><p>职责链模式适用于以下情况：</p><ul><li>当有多个对象可以处理同一个请求，并且希望将请求发送者和接收者解耦时，可以使用职责链模式</li><li>当希望动态地调整处理者链的结构，并且希望在运行时决定请求的处理者时，职责链模式也是一个很好的选择</li></ul><p><br/></p><p>举个简单的例子，考虑一个请假审批系统</p><p>请假申请可以被多个领导依次审批，而每个领导都有不同的审批权限</p><p>职责链模式可以将每个领导视为一个处理者对象，并将请假申请发送给处理者链的第一个处理者</p><p>如果第一个处理者无法处理请求，则将请求传递给下一个处理者，直到找到能够处理请求的处理者为止</p><p>这样，可以实现请求发送者和接收者的解耦，同时也提供了一种灵活的方式来处理请求</p><p><br/></p><h2 id="实现条件"><a href="#实现条件" class="headerlink" title="实现条件"></a>实现条件</h2><ol><li><p><strong>多个对象处理同一请求</strong></p><p>职责链模式适用于多个对象处理同一请求的情况，请求会按照一定的顺序经过一系列的处理者，直到找到合适的处理者处理请求为止</p></li><li><p><strong>请求发送者不需要明确知道接收</strong></p></li><li><p>职责链模式适用于请求发送者不需要明确知道接收者是谁的情况，请求发送者只需要将请求发送给第一个处理者，由处理者之间相互传递请求，直到找到合适的处理者</p></li><li><p><strong>请求可以被任意处理者处理</strong></p><p>职责链模式适用于请求可以被任意处理者处理的情况，处理者之间没有严格的顺序要求，可以根据具体情况自由选择处理请求的方式</p></li><li><p><strong>需要动态添加或者删除处理者</strong></p><p>职责链模式适用于需要动态添加或者删除处理者的情况，处理者之间的关系是动态变化的，可以根据需要灵活地调整处理者的顺序和数量</p></li></ol><p><br/></p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li><p><strong>降低耦合度</strong></p><p>职责链模式将请求发送者和接收者解耦，请求发送者不需要知道具体的接收者是谁，接收者也不需要知道请求的发送者是谁，从而降低了对象之间的耦合度</p></li><li><p><strong>增强灵活性</strong></p><p>职责链模式允许请求沿着一条链传递，每个处理者都有机会处理请求或者将请求传递给下一个处理者，从而增强了系统的灵活性和可扩展性</p></li><li><p><strong>简化对象的相互连接</strong></p><p>职责链模式可以简化对象之间的相互连接，每个处理者只需要保存对下一个处理者的引用即可，无需了解整个处理链的结构，降低了系统的复杂度</p></li><li><p><strong>增强了请求的处理过程</strong></p><p>职责链模式将请求的处理过程分解成多个处理者来共同完成，每个处理者只负责自己能够处理的部分，使得请求的处理过程更加清晰和可控</p></li><li><p><strong>动态添加或者删除处理者</strong>职</p><p>责链模式允许动态地添加或者删除处理者，处理者之间的关系是动态变化的，可以根据需要灵活地调整处理者的顺序和数量</p></li></ol><p><br/></p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li><p><strong>请求可能未被处理</strong></p><p>如果请求没有合适的处理者来处理，可能会导致请求未被处理，需要额外的机制来处理这种情况，例如设置一个默认处理者</p></li><li><p><strong>性能问题</strong></p><p>职责链模式可能会导致性能问题，特别是处理链比较长或者请求频繁的情况下，可能会造成请求的传递和处理延迟</p></li><li><p><strong>调试困难</strong></p><p>由于请求的处理过程被分解到多个处理者中，可能会导致调试困难，难以确定请求的处理流程和具体是哪个处理者处理了请求</p></li><li><p><strong>可能导致循环引用</strong></p><p>如果处理链中存在循环引用的情况，可能会导致请求无法正常处理，甚至造成系统崩溃，需要谨慎设计处理链的结构</p></li></ol><p><br/></p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>处理者基类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Processor类定义了一个处理器的基本结构，包括处理器的名称、权限级别以及下一个处理器的设置。</span></span><br><span class="line"><span class="comment"> * 它是一个抽象类，不允许直接实例化，必须通过继承来扩展。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Processor</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数初始化处理器的名称和权限级别，并检查是否尝试直接实例化抽象类。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; name 处理器的名称。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; authorityLevel 处理器的权限级别。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> &#123;<span class="type">Error</span>&#125; 如果尝试直接实例化Processor类，则抛出错误。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, authorityLevel</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span>.<span class="property">target</span> === <span class="title class_">Processor</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;不能实例化抽象类Processor&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">authorityLevel</span> = authorityLevel</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">nextProcessor</span> = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置下一个处理器。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">Processor</span>&#125; nextProcessor 下一个处理器的实例。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> &#123;<span class="type">Error</span>&#125; 如果传入的不是Processor的实例，则抛出错误。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">setNextProcessor</span>(<span class="params">nextProcessor</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(nextProcessor <span class="keyword">instanceof</span> <span class="title class_">Processor</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;下一个审批者必须是Processor的实例&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">nextProcessor</span> = nextProcessor</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理请求的方法，这是一个抽象方法，必须在子类中实现。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; request 待处理的请求对象。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> &#123;<span class="type">Error</span>&#125; 必须在子类中实现此方法，否则抛出错误。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">processRequest</span>(<span class="params">request</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;必须实现processRequest方法&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Processor</span></span><br></pre></td></tr></table></figure><p><br/></p><p>子类基类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入链式责任模式的处理器基类</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Processor</span> <span class="keyword">from</span> <span class="string">&#x27;../ChainOfResponsibilityPattern&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 团队领导类，继承自处理器基类，处理员工请假请求。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TeamLeader</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Processor</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数，初始化团队领导实例。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(<span class="string">&quot;团队领导&quot;</span>, <span class="number">2</span>) <span class="comment">// 调用父类构造器，设置名称为“团队领导”，审批权限级别为2</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理请假请求的方法。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; request 请假请求对象，包含请假天数等信息。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">processRequest</span>(<span class="params">request</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果请假天数在团队领导的审批权限范围内，则审批通过</span></span><br><span class="line">        <span class="keyword">if</span> (request.<span class="property">leaveDays</span> &lt;= <span class="variable language_">this</span>.<span class="property">authorityLevel</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>审批了<span class="subst">$&#123;request.leaveDays&#125;</span>天的请假。`</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">nextProcessor</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果请假天数超出团队领导的审批范围，但存在下一个处理器（比如经理），则转交下一个处理器处理</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>无法处理，请转交给<span class="subst">$&#123;<span class="variable language_">this</span>.nextProcessor.name&#125;</span>`</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">nextProcessor</span>.<span class="title function_">processRequest</span>(request)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果请假天数超出团队领导的审批范围，并且不存在下一个处理器，则审批不通过</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`无法处理，请假天数过长。`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出TeamLeader类</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">TeamLeader</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入链式责任模式的处理器基类</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Processor</span> <span class="keyword">from</span> <span class="string">&#x27;../ChainOfResponsibilityPattern&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 部门经理类，继承自处理器基类，用于处理员工请假请求。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DepartmentManager</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Processor</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数初始化部门经理。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(<span class="string">&quot;部门经理&quot;</span>, <span class="number">5</span>) <span class="comment">// 调用父类构造函数，设置名称为“部门经理”，审批权限级别为5天</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理请假请求。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; request 请假请求对象，包含请假天数等信息。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">processRequest</span>(<span class="params">request</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果请假天数在部门经理的审批权限范围内，则审批通过</span></span><br><span class="line">        <span class="keyword">if</span> (request.<span class="property">leaveDays</span> &lt;= <span class="variable language_">this</span>.<span class="property">authorityLevel</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>审批了<span class="subst">$&#123;request.leaveDays&#125;</span>天的请假。`</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">nextProcessor</span>) &#123; <span class="comment">// 如果存在下一个处理器（上级领导），则将请求转交</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>无法处理，请转交给<span class="subst">$&#123;<span class="variable language_">this</span>.nextProcessor.name&#125;</span>`</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">nextProcessor</span>.<span class="title function_">processRequest</span>(request)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果没有下一个处理器，表示无法处理此请求</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`无法处理，请假天数过长。`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出部门经理类</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">DepartmentManager</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入链式责任模式的处理器基类</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Processor</span> <span class="keyword">from</span> <span class="string">&#x27;../ChainOfResponsibilityPattern&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 人力资源经理类，继承自处理器基类，用于处理员工请假请求。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HRManager</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Processor</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数初始化人力资源经理。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(<span class="string">&quot;人力资源经理&quot;</span>, <span class="number">10</span>) <span class="comment">// 调用父类构造函数，设置名称为“人力资源经理”，审批权限级别为10天</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理请假请求。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; request 请假请求对象，包含请假天数等信息。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">processRequest</span>(<span class="params">request</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果请假天数在权限级别内，审批通过</span></span><br><span class="line">        <span class="keyword">if</span> (request.<span class="property">leaveDays</span> &lt;= <span class="variable language_">this</span>.<span class="property">authorityLevel</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>审批了<span class="subst">$&#123;request.leaveDays&#125;</span>天的请假。`</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">nextProcessor</span>) &#123; <span class="comment">// 如果存在下一个处理器，则将请求转交给下一个处理器</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>无法处理，请转交给<span class="subst">$&#123;<span class="variable language_">this</span>.nextProcessor.name&#125;</span>`</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">nextProcessor</span>.<span class="title function_">processRequest</span>(request)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果没有下一个处理器，则表示无法处理该请求</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`无法处理，请假天数过长。`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出HRManager类</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">HRManager</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * LeaveRequest 类用于创建一个请假申请实例。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; leaveDays 请假天数。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LeaveRequest</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">leaveDays</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">leaveDays</span> = leaveDays; <span class="comment">// 初始化请假天数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">LeaveRequest</span>; <span class="comment">// 导出LeaveRequest类作为默认模块</span></span><br></pre></td></tr></table></figure><p><br/></p><p>怎么使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主程序入口用于演示如何处理员工请假流程。</span></span><br><span class="line"><span class="comment"> * 首先，创建了团队领导、部门经理和人力资源经理的实例。</span></span><br><span class="line"><span class="comment"> * 然后，设定它们之间的处理顺序，即团队领导先处理请假申请，然后传递给部门经理，最后由人力资源经理处理。</span></span><br><span class="line"><span class="comment"> * 接着，创建了几个请假申请实例，并通过团队领导的实例处理这些请假申请。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入相关的类</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">TeamLeader</span> <span class="keyword">from</span> <span class="string">&#x27;../SubClass/TeamLeader&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">DepartmentManager</span> <span class="keyword">from</span> <span class="string">&#x27;../SubClass/DepartmentManager&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HRManager</span> <span class="keyword">from</span> <span class="string">&#x27;../SubClass/HRManager&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">LeaveRequest</span> <span class="keyword">from</span> <span class="string">&#x27;../SubClass/LeaveRequest&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建团队领导、部门经理和人力资源经理的实例</span></span><br><span class="line"><span class="keyword">const</span> teamLeader = <span class="keyword">new</span> <span class="title class_">TeamLeader</span>()</span><br><span class="line"><span class="keyword">const</span> departmentManager = <span class="keyword">new</span> <span class="title class_">DepartmentManager</span>()</span><br><span class="line"><span class="keyword">const</span> hrManager = <span class="keyword">new</span> <span class="title class_">HRManager</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置处理流程的链式关系</span></span><br><span class="line">teamLeader.<span class="title function_">setNextProcessor</span>(departmentManager)</span><br><span class="line">departmentManager.<span class="title function_">setNextProcessor</span>(hrManager)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建请假申请实例，并提交给团队领导处理</span></span><br><span class="line"><span class="keyword">const</span> request1 = <span class="keyword">new</span> <span class="title class_">LeaveRequest</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> request3 = <span class="keyword">new</span> <span class="title class_">LeaveRequest</span>(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">const</span> request7 = <span class="keyword">new</span> <span class="title class_">LeaveRequest</span>(<span class="number">7</span>)</span><br><span class="line"><span class="keyword">const</span> request12 = <span class="keyword">new</span> <span class="title class_">LeaveRequest</span>(<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">teamLeader.<span class="title function_">processRequest</span>(request1)</span><br><span class="line">teamLeader.<span class="title function_">processRequest</span>(request3)</span><br><span class="line">teamLeader.<span class="title function_">processRequest</span>(request7)</span><br><span class="line">teamLeader.<span class="title function_">processRequest</span>(request12)</span><br></pre></td></tr></table></figure><p><br/></p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ol><li><p><strong>电子商务订单处理系统</strong> </p><p>假设一个电子商务平台，订单的处理包括库存检查、支付验证、地址验证、配送等多个环节</p><p>每个环节都有不同的处理者，可以使用职责链模式来构建订单处理流程</p><p>订单首先经过库存检查处理者，如果库存充足，则传递给支付验证处理者，依次类推，直到订单被完全处理</p></li><li><p><strong>工作流引擎</strong> </p><p>工作流引擎是一种用于管理和执行工作流程的系统</p><p>在工作流引擎中，每个工作流程包含多个步骤或任务，每个步骤都有对应的处理者</p><p>职责链模式可以用来管理工作流程中的步骤和处理者，以实现任务的自动化处理</p></li><li><p><strong>网络安全防护系统</strong> </p><p>在网络安全防护系统中，通常会对网络流量进行多层次的检测和过滤，包括入侵检测、恶意软件检测、数据包过滤等</p><p>每个检测和过滤功能可以作为一个处理者，通过职责链模式将它们串联起来，以便逐层检测和过滤网络流量</p></li><li><p><strong>工程质量检查系统</strong> </p><p>在软件开发中，经常需要进行代码审查和质量检查，以确保代码符合规范和质量标准</p><p>可以使用职责链模式来构建质量检查系统，其中每个质量检查功能（如代码格式检查、代码风格检查、代码性能检查等）作为一个处理者，根据需要逐个应用于待检查的代码</p></li><li><p><strong>文件处理系统</strong></p><p> 在文件处理系统中，可能需要对不同类型的文件进行处理，如文本文件、图像文件、音频文件等</p><p>每种类型的文件都需要不同的处理方式，可以使用职责链模式来管理文件处理流程，使得每个文件根据其类型被传递给相应的处理者进行处理</p></li></ol><p><br/></p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/wutiaowu5t5/DesignPattern/tree/main/BehaviorType/ChainOfResponsibilityPattern"><img src="https://github-readme-stats.vercel.app/api/pin/?username=wutiaowu5t5&repo=DesignPattern&show_owner=true"/></a>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;职责链模式（Chain of Responsibility Pattern）是一种行为型设计模式，它允许多个对象都有机会处理请求，从而避免请</summary>
      
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《模版方法模式（行为型）》</title>
    <link href="https://wutiaowu5t5.github.io/posts/8472c90e/"/>
    <id>https://wutiaowu5t5.github.io/posts/8472c90e/</id>
    <published>2024-03-30T07:24:24.000Z</published>
    <updated>2024-03-30T07:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>模板方法模式（Template Method Pattern）是一种行为型设计模式，它定义了一个算法的骨架，并允许子类为一个或多个步骤提供实现</p><p><br/></p><p>模板方法模式通常涉及两个核心角色：模板类（Abstract Class）和具体实现类（Concrete Class）</p><ul><li><p><strong>模板类（Abstract Class）</strong></p><p>定义了一个算法的骨架，其中包含了算法的各个步骤，其中某些步骤可能由子类实现</p></li><li><p><strong>具体实现类（Concrete Class）</strong></p><p>实现了模板类中定义的具体步骤。具体实现类负责实现模板类中定义的抽象方法，从而提供算法的具体实现</p></li></ul><p><br/></p><p>模板方法模式的核心思想是将算法的不变部分封装到模板类中，而将可变部分留给子类来实现</p><p>这种模式的优点在于，可以避免代码的重复，提高代码的复用性，并且可以在不修改模板类的情况下改变算法的某些部分</p><p>模板方法模式适用于以下情况：</p><ul><li>当希望定义一个算法的骨架，并允许子类为其中的某些步骤提供具体实现时，可以使用模板方法模式</li><li>当希望在不修改模板类的情况下改变算法的某些部分时，模板方法模式也是一个很好的选择</li></ul><p><br/></p><p>举个简单的例子，考虑一个制作咖啡和茶的过程</p><p>制作咖啡和茶的过程中都有一些共同的步骤（如煮水、冲泡、加调味品等），而某些步骤可能因为制作的饮料不同而有所不同</p><p>模板方法模式可以将制作饮料的算法抽象成一个模板类，并将其中的共同步骤封装到模板类中，而将可变步骤留给具体的实现类来实现</p><p>这样，就可以通过继承模板类并重写其中的部分方法来实现不同种类饮料的制作过程，而不需要重复编写相同的代码</p><p><br/></p><h2 id="实现条件"><a href="#实现条件" class="headerlink" title="实现条件"></a>实现条件</h2><ol><li><p><strong>存在多个子类</strong></p><p>模板方法模式适用于存在多个子类，并且这些子类之间存在一定的共同行为或者流程的情况</p></li><li><p><strong>需要定义一个算法的框架</strong></p><p>模板方法模式适用于需要定义一个算法的框架，并且允许子类根据需要重写其中的某些步骤的情况</p></li><li><p><strong>需要避免代码重复</strong></p><p>模板方法模式适用于需要避免代码重复的情况，通过将共同行为或者流程抽象到父类中，可以避免在每个子类中重复编写相同的代码</p></li><li><p><strong>需要在运行时动态确定算法的具体实现</strong></p><p>模板方法模式适用于需要在运行时动态确定算法的具体实现的情况，因为模板方法模式允许子类根据需要重写父类中的某些步骤，从而实现不同的算法</p></li></ol><p><br/></p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li><p><strong>提高代码复用性</strong></p><p>模板方法模式将共同的行为封装到父类中，子类只需要实现特定的步骤即可，从而提高了代码的复用性</p></li><li><p><strong>提高扩展性</strong></p><p>模板方法模式通过将算法的框架定义在父类中，并且允许子类重写特定的步骤，提高了系统的扩展性，可以灵活地增加或者修改算法的具体实现</p></li><li><p><strong>符合开闭原则</strong></p><p>模板方法模式符合开闭原则，父类中定义的算法框架是稳定的，而具体步骤的实现可以在子类中灵活扩展或者修改，因此对于扩展是开放的，对于修改是关闭的</p></li><li><p><strong>提高了系统的适应性</strong></p><p>模板方法模式可以定义一个算法的框架，并且允许子类根据具体情况来实现算法的特定步骤，从而提高了系统的适应性和灵活性</p></li></ol><p><br/></p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li><p><strong>可能导致代码的阅读和理解难度增加</strong></p><p>模板方法模式将算法的框架定义在父类中，而具体步骤的实现分散在不同的子类中，可能会导致代码的阅读和理解难度增加</p></li><li><p><strong>可能限制子类的灵活性</strong></p><p>模板方法模式将算法的框架固定在父类中，可能会限制子类的灵活性，如果算法的框架需要在运行时动态确定，可能会导致子类的扩展受到限制</p></li><li><p><strong>可能增加系统的复杂度</strong></p><p>模板方法模式将算法的具体实现分散在不同的子类中，可能会增加系统的复杂度，特别是当算法的具体实现比较复杂时</p></li></ol><p><br/></p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>模板基类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Beverage类，表示一个饮料的制作过程。这个基类定义了基本步骤，</span></span><br><span class="line"><span class="comment"> * 包括煮水、冲泡、倒入杯子和添加调料。子类需要覆盖brew和addCondiments方法</span></span><br><span class="line"><span class="comment"> * 来实现具体的饮料制作逻辑。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Beverage</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * prepareBeverage方法，执行饮品的制作流程。</span></span><br><span class="line"><span class="comment">     * 此方法调用了一系列抽象方法来完成整个制作过程。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">prepareBeverage</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">boilWater</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">brew</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">pourInCup</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">addCondiments</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * boilWater方法，模拟煮水的过程，并打印相关信息到控制台。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">boilWater</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;煮水&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * pourInCup方法，将煮好的水倒入杯子中。</span></span><br><span class="line"><span class="comment">     * 这是一个抽象方法，由子类具体实现。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">pourInCup</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;倒入杯子&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * brew方法，执行冲泡饮料的操作。</span></span><br><span class="line"><span class="comment">     * 这是一个抽象方法，需要子类根据具体饮料类型实现。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@abstract</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">brew</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;子类必须实现brew方法&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * addCondiments方法，向饮品中添加调料或附加物。</span></span><br><span class="line"><span class="comment">     * 这是一个抽象方法，需要子类根据具体饮料类型实现。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@abstract</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">addCondiments</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;子类必须实现addCondiments方法&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Beverage</span></span><br></pre></td></tr></table></figure><p><br/></p><p>模板子类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Coffee 类继承自 Beverage 类，实现了冲泡咖啡以及添加糖和牛奶的具体步骤。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Beverage</span> <span class="keyword">from</span> <span class="string">&#x27;../TemplateMethodPattern&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Coffee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Beverage</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 冲泡咖啡的具体步骤。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">brew</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;冲泡咖啡&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加糖和牛奶到咖啡中的具体步骤。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">addCondiments</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;加糖和牛奶&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Coffee</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Tea 类继承自 Beverage 类，实现了冲泡茶的具体步骤。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Beverage</span> <span class="keyword">from</span> <span class="string">&#x27;../TemplateMethodPattern&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tea</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Beverage</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 冲泡茶叶的方法。</span></span><br><span class="line"><span class="comment">     * 此方法为 Tea 类实现的抽象方法，具体冲泡过程为：冲泡茶叶。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">brew</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;冲泡茶叶&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加调料的方法。</span></span><br><span class="line"><span class="comment">     * 对于茶来说，通常不添加额外的调料，因此此方法实现为不进行任何操作。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">addCondiments</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不加东西&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Tea</span></span><br></pre></td></tr></table></figure><p><br/></p><p>怎么使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主函数演示如何制作咖啡和茶。</span></span><br><span class="line"><span class="comment"> * 本函数不接受参数，也不返回任何值。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Coffee</span> <span class="keyword">from</span> <span class="string">&#x27;../SubClass/Coffee&#x27;</span> <span class="comment">// 导入咖啡类</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Tea</span> <span class="keyword">from</span> <span class="string">&#x27;../SubClass/Tea&#x27;</span> <span class="comment">// 导入茶类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 制作咖啡的流程</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;制作咖啡：&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> coffee = <span class="keyword">new</span> <span class="title class_">Coffee</span>() <span class="comment">// 创建咖啡实例</span></span><br><span class="line">coffee.<span class="title function_">prepareBeverage</span>() <span class="comment">// 准备咖啡</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 制作茶的流程</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;\n制作茶：&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> tea = <span class="keyword">new</span> <span class="title class_">Tea</span>() <span class="comment">// 创建茶实例</span></span><br><span class="line">tea.<span class="title function_">prepareBeverage</span>() <span class="comment">// 准备茶</span></span><br></pre></td></tr></table></figure><p><br/></p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ol><li><p><strong>框架设计</strong></p><p>在软件框架中，可以使用模板方法模式定义框架的算法骨架，让具体的子类实现算法的细节</p><p>这样做可以确保框架的一致性，并且使得框架更容易扩展和定制</p></li><li><p><strong>库函数</strong></p><p>许多编程语言和库中都使用了模板方法模式，例如Java中的Collections.sort()方法就是一个模板方法，它定义了排序算法的骨架，具体的排序算法由Comparator接口的实现类来提供</p></li><li><p><strong>算法实现</strong></p><p>在算法设计中，如果一个算法有多个具体实现，但是它们共享相同的算法骨架，那么可以使用模板方法模式</p><p>这样做可以避免代码重复，并且更容易理解和维护</p></li><li><p><strong>生命周期管理</strong></p><p>在生命周期管理中，可以使用模板方法模式来定义对象的创建、初始化、销毁等过程</p><p>例如，Android中的Activity生命周期就是一个典型的模板方法模式</p></li><li><p><strong>流程控制</strong></p><p>在业务流程中，如果有一系列步骤需要按照特定顺序执行，但是某些步骤的具体实现可能不同，可以使用模板方法模式</p><p>这样做可以保持流程的一致性，并且提高代码的复用性</p></li></ol><p><br/></p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/wutiaowu5t5/DesignPattern/tree/main/BehaviorType/TemplateMethodPattern"><img src="https://github-readme-stats.vercel.app/api/pin/?username=wutiaowu5t5&repo=DesignPattern&show_owner=true"/></a>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;模板方法模式（Template Method Pattern）是一种行为型设计模式，它定义了一个算法的骨架，并允许子类为一个或多个步骤提供实</summary>
      
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《策略模式（行为型）》</title>
    <link href="https://wutiaowu5t5.github.io/posts/1445619f/"/>
    <id>https://wutiaowu5t5.github.io/posts/1445619f/</id>
    <published>2024-03-29T07:24:24.000Z</published>
    <updated>2024-03-29T07:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>策略模式（Strategy Pattern）是一种行为型设计模式，它定义了一系列算法，并将每个算法封装成单独的对象，使它们可以相互替换。策略模式允许算法的变化独立于使用算法的客户端</p><p><br/></p><p>策略模式通常涉及三个核心角色：上下文（Context）、策略接口（Strategy Interface）和具体策略类（Concrete Strategies）</p><ul><li><p><strong>上下文（Context）</strong></p><p>负责维护对策略对象的引用，并在需要时调用策略对象的算法</p><p>上下文通常会将请求委派给策略对象来执行特定的算法。</p></li><li><p><strong>策略接口（Strategy Interface）</strong></p><p>定义了所有具体策略类必须实现的算法接口</p><p>这个接口通常只有一个方法，用于执行具体的算法。</p></li><li><p><strong>具体策略类（Concrete Strategies）</strong></p><p>实现了策略接口，包含了具体的算法实现</p><p>每个具体策略类代表了一个具体的算法，可以根据需求增加或修改</p></li></ul><p><br/></p><p>策略模式的核心思想是将算法封装成独立的对象，并使这些对象可以相互替换，从而使得算法的变化不会影响到使用算法的客户端</p><p>这种模式的优点在于，提高了代码的灵活性和可维护性，使得算法可以在不修改客户端代码的情况下进行替换或者扩展</p><p>策略模式适用于以下情况：</p><ul><li>当一个系统需要支持多种算法，并且这些算法可以相互替换时，可以使用策略模式</li><li>当一个类的行为取决于一些动态变化的条件时，可以考虑使用策略模式</li></ul><p><br/></p><p>举个简单的例子，考虑一个电商系统中的支付功能</p><p>系统可以支持多种支付方式，如支付宝、微信支付、信用卡支付等</p><p>策略模式可以将每种支付方式封装成一个具体的策略类，然后根据用户选择的支付方式来动态地选择并使用相应的支付策略，从而实现支付功能的灵活性和可扩展性</p><p><br/></p><h2 id="实现条件"><a href="#实现条件" class="headerlink" title="实现条件"></a>实现条件</h2><ol><li><p><strong>存在一组相关的算法</strong></p><p>策略模式适用于存在一组相关的算法，并且客户端需要在运行时选择其中一个算法来使用的情况</p></li><li><p><strong>算法之间可以相互替换</strong></p><p>策略模式的核心思想是将算法封装成策略对象，并且允许客户端在不修改客户端代码的情况下替换算法</p></li><li><p><strong>需要避免使用条件语句来选择算法</strong></p><p>如果存在多个条件语句来选择不同的算法，可能会导致代码的可读性和可维护性下降</p><p>策略模式可以将条件语句替换为对象之间的关系，从而提高代码的可读性和可维护性</p></li><li><p><strong>需要将算法的实现和使用分离</strong></p><p>策略模式将算法的实现和使用分离，使得客户端可以独立于具体算法进行变化，从而提高系统的灵活性和可扩展性</p></li><li><p><strong>需要将变化的部分封装成独立的对象</strong></p><p>策略模式将算法封装成策略对象，并将策略对象作为客户端和上下文对象的一部分，从而将变化的部分封装成独立的对象，方便扩展和修改</p></li></ol><p><br/></p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li><p><strong>灵活性高</strong></p><p>策略模式允许客户端在运行时动态地选择算法，从而提高系统的灵活性和可扩展性</p></li><li><p><strong>可维护性好</strong></p><p>策略模式将算法封装成独立的策略对象，使得算法的实现和使用分离，从而提高了代码的可维护性</p></li><li><p><strong>避免使用条件语句</strong></p><p>策略模式避免了使用过多的条件语句来选择不同的算法，从而提高了代码的可读性和可维护性</p></li><li><p><strong>增加代码复用性</strong></p><p>策略模式将算法封装成独立的策略对象，可以在不同的上下文中重复使用相同的算法，从而提高了代码的复用性</p></li><li><p><strong>符合开闭原则</strong></p><p>策略模式通过定义一组算法族，并通过策略对象进行封装和使用，可以方便地添加新的算法或修改现有算法，从而符合开闭原则</p></li></ol><p><br/></p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li><p><strong>增加对象数量</strong></p><p>策略模式将每个算法都封装成独立的策略对象，可能会增加对象数量，从而增加了系统的复杂度</p></li><li><p><strong>客户端需要了解所有策略</strong></p><p>客户端需要了解所有可用的策略，并在运行时选择合适的策略，可能会增加客户端的复杂度</p></li><li><p><strong>可能增加系统的运行开销</strong></p><p>策略模式需要在运行时动态地选择算法，可能会增加系统的运行开销</p></li></ol><p><br/></p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>支付类实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 支付策略工厂类，用于创建和管理不同的支付策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PaymentStrategyFactory</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数，初始化一个空的策略映射</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">strategies</span> = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册一个新的支付策略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; name 策略的名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">PaymentStrategy</span>&#125; strategy 实现了PaymentStrategy接口的策略实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> &#123;<span class="type">Error</span>&#125; 如果策略没有实现PaymentStrategy接口，则抛出错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">register</span>(<span class="params">name, strategy</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(strategy <span class="keyword">instanceof</span> <span class="title class_">PaymentStrategy</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;注册的策略必须实现PaymentStrategy接口&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">strategies</span>.<span class="title function_">set</span>(name, strategy)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注销一个已注册的支付策略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; name 要注销的策略名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span> &#123;<span class="type">Error</span>&#125; 如果策略被成功注销，则无返回值；如果策略不存在，则打印警告</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">unregister</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">strategies</span>.<span class="title function_">has</span>(name)) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">strategies</span>.<span class="title function_">delete</span>(name)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">`尝试注销不存在的支付策略: <span class="subst">$&#123;name&#125;</span>`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取一个指定名称的支付策略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; name 策略的名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="type">PaymentStrategy</span>&#125; 返回指定名称的支付策略实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> &#123;<span class="type">Error</span>&#125; 如果未找到指定名称的策略，则抛出错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">getStrategy</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> strategy = <span class="variable language_">this</span>.<span class="property">strategies</span>.<span class="title function_">get</span>(name)</span><br><span class="line">        <span class="keyword">if</span> (!strategy) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`未找到名为 <span class="subst">$&#123;name&#125;</span> 的支付策略`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> strategy</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br/></p><p>基础支付类实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BasicPaymentStrategy</span> &#123;</span><br><span class="line">    <span class="title function_">pay</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;pay() 方法必须在子类中实现&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">BasicPaymentStrategy</span></span><br></pre></td></tr></table></figure><p><br/></p><p>收银台类实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 结账类，用于处理支付过程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Checkout</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数，初始化一个支付工厂</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">PaymentStrategyFactory</span>&#125; paymentFactory 用于创建支付策略的工厂</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">paymentFactory</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">paymentFactory</span> = paymentFactory</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理支付请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; amount 需要支付的金额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; strategyName 支付策略的名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> &#123;<span class="type">Error</span>&#125; 如果找不到指定的支付策略，则抛出错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">processPayment</span>(<span class="params">amount, strategyName</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> strategy = <span class="variable language_">this</span>.<span class="property">paymentFactory</span>.<span class="title function_">getStrategy</span>(strategyName)</span><br><span class="line">        strategy.<span class="title function_">pay</span>(amount)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br/></p><p>具体支付类实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 支付宝支付策略类，继承自基础支付策略类 BasicPaymentStrategy。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">BasicPaymentStrategy</span> <span class="keyword">from</span> <span class="string">&#x27;../Basic/BasicPaymentStrategy&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AliPayStrategy</span> <span class="keyword">extends</span> <span class="title class_ inherited__">BasicPaymentStrategy</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数，初始化支付宝支付策略。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>() <span class="comment">// 调用父类的构造函数</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_partnerId</span> = <span class="literal">null</span> <span class="comment">// 合作伙伴ID，初始化为null</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_sellerId</span> = <span class="literal">null</span> <span class="comment">// 卖家ID，初始化为null</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置支付所需的合作伙伴和卖家ID。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; partnerId 合作伙伴ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; sellerId 卖家ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span> &#123;<span class="type">AliPayStrategy</span>&#125; 返回当前实例，支持链式调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> &#123;<span class="type">Error</span>&#125; 如果缺少合作伙伴ID或卖家ID，则抛出错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">setCredentials</span>(<span class="params">partnerId, sellerId</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!partnerId || !sellerId) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;partnerId 和 sellerId 都是必填项&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_partnerId</span> = partnerId</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_sellerId</span> = sellerId</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行支付操作。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; amount 需要支付的金额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> &#123;<span class="type">Error</span>&#125; 如果未设置合作伙伴ID或卖家ID，则抛出错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">pay</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">_partnerId</span> || !<span class="variable language_">this</span>.<span class="property">_sellerId</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;请先调用 setCredentials 设置 PartnerId 和 SellerId&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`使用支付宝支付，PartnerId: <span class="subst">$&#123;<span class="variable language_">this</span>._partnerId&#125;</span>, SellerId: <span class="subst">$&#123;<span class="variable language_">this</span>._sellerId&#125;</span>, 金额: <span class="subst">$&#123;amount&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">AliPayStrategy</span> <span class="comment">// 导出一个初始化好的 AliPayStrategy 实例</span></span><br></pre></td></tr></table></figure><p><br/></p><p>怎么使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 导入策略模式相关的类和支付策略的实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CheckStand</span>, <span class="title class_">PaymentStrategy</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../StrategyPattern&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">WeChatPayStrategy</span> <span class="keyword">from</span> <span class="string">&#x27;../SubClass/Expansion/WeChatPayStrategy&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AliPayStrategy</span> <span class="keyword">from</span> <span class="string">&#x27;../SubClass/Expansion/AliPayStrategy&#x27;</span></span><br><span class="line"><span class="keyword">import</span> creditCardStrategy <span class="keyword">from</span> <span class="string">&#x27;../SubClass/Expansion/CreditCardStrategy&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册不同的支付策略并设置其凭证或细节</span></span><br><span class="line"><span class="comment"> * 1. 微信支付: 设置appId和apiKey</span></span><br><span class="line"><span class="comment"> * 2. 支付宝支付: 设置合作伙伴ID和卖家ID</span></span><br><span class="line"><span class="comment"> * 3. 信用卡支付: 设置卡号、安全码和到期日期</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">PaymentStrategy</span>.<span class="title function_">register</span>(<span class="string">&quot;wechat&quot;</span>, <span class="title class_">WeChatPayStrategy</span>.<span class="title function_">setCredentials</span>(<span class="string">&quot;wxAppId123&quot;</span>, <span class="string">&quot;apiKey456&quot;</span>))</span><br><span class="line"><span class="title class_">PaymentStrategy</span>.<span class="title function_">register</span>(<span class="string">&quot;alipay&quot;</span>, <span class="title class_">AliPayStrategy</span>.<span class="title function_">setCredentials</span>(<span class="string">&quot;aliPartnerId789&quot;</span>, <span class="string">&quot;sellerId012&quot;</span>))</span><br><span class="line"><span class="title class_">PaymentStrategy</span>.<span class="title function_">register</span>(<span class="string">&quot;creditCard&quot;</span>, creditCardStrategy.<span class="title function_">setCardDetails</span>(<span class="string">&#x27;1234567890123456&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;12/23&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理不同方式的支付</span></span><br><span class="line"><span class="comment"> * 1. 微信支付 100 元</span></span><br><span class="line"><span class="comment"> * 2. 支付宝支付 200 元</span></span><br><span class="line"><span class="comment"> * 3. 信用卡支付 200 元</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">CheckStand</span>.<span class="title function_">processPayment</span>(<span class="number">100</span>, <span class="string">&quot;wechat&quot;</span>) <span class="comment">// 使用微信支付</span></span><br><span class="line"><span class="title class_">CheckStand</span>.<span class="title function_">processPayment</span>(<span class="number">200</span>, <span class="string">&quot;alipay&quot;</span>) <span class="comment">// 使用支付宝支付</span></span><br><span class="line"><span class="title class_">CheckStand</span>.<span class="title function_">processPayment</span>(<span class="number">200</span>, <span class="string">&quot;creditCard&quot;</span>) <span class="comment">// 使用信用卡支付</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态添加新的支付策略</span></span><br><span class="line"><span class="comment"> * 可以通过扩展PaymentStrategy来创建新的支付方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewPaymentStrategy</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PaymentStrategy</span> &#123;</span><br><span class="line">    <span class="comment">// 代码参考其他具体支付策略类</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">PaymentStrategy</span>.<span class="title function_">register</span>(<span class="string">&quot;newMethod&quot;</span>, <span class="title class_">NewPaymentStrategy</span>.<span class="title function_">setCredentials</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试新添加的支付策略</span></span><br><span class="line"><span class="comment"> * 使用新方法支付50元</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">CheckStand</span>.<span class="title function_">processPayment</span>(<span class="number">50</span>, <span class="string">&quot;newMethod&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 移除不再支持的支付策略</span></span><br><span class="line"><span class="comment"> * 从支持列表中移除微信支付</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">PaymentStrategy</span>.<span class="title function_">unregister</span>(<span class="string">&quot;wechat&quot;</span>)</span><br></pre></td></tr></table></figure><p><br/></p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ol><li><p><strong>表单验证</strong></p><p>当需要根据不同的条件执行不同的验证逻辑时，可以使用策略模式</p><p>例如，根据用户输入的不同数据类型（文本、数字、日期等），选择不同的验证算法</p></li><li><p><strong>排序算法</strong></p><p>如果一个应用程序需要支持多种排序算法（如冒泡排序、快速排序、归并排序等），可以使用策略模式</p><p>根据数据量大小、数据结构等因素，选择合适的排序策略</p></li><li><p><strong>价格计算</strong></p><p>在线购物网站可能需要根据不同的促销活动或会员级别来计算产品的价格</p><p>使用策略模式可以使得价格计算算法独立于产品和促销活动的变化</p></li><li><p><strong>缓存策略</strong></p><p>在应用程序中实现缓存时，可能会有多种缓存策略可供选择，例如基于时间过期的策略、基于访问频率的策略等</p><p>策略模式可以用于管理这些不同的缓存策略</p></li><li><p><strong>日志记录</strong></p><p>根据日志级别（如调试、信息、警告、错误等），选择不同的日志记录策略</p><p>例如，在生产环境中可能只记录错误日志，而在开发环境中记录所有日志</p></li></ol><p><br/></p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/wutiaowu5t5/DesignPattern/tree/main/BehaviorType/StrategyPattern"><img src="https://github-readme-stats.vercel.app/api/pin/?username=wutiaowu5t5&repo=DesignPattern&show_owner=true"/></a>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;策略模式（Strategy Pattern）是一种行为型设计模式，它定义了一系列算法，并将每个算法封装成单独的对象，使它们可以相互替换。策略</summary>
      
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《迭代器模式（行为型）》</title>
    <link href="https://wutiaowu5t5.github.io/posts/b1de33a6/"/>
    <id>https://wutiaowu5t5.github.io/posts/b1de33a6/</id>
    <published>2024-03-28T07:24:24.000Z</published>
    <updated>2024-03-28T07:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>迭代器模式（Iterator Pattern）是一种行为型设计模式，它提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露该对象的内部表示</p><p><br/></p><p>迭代器模式通常涉及两个核心角色：迭代器（Iterator）和可迭代对象（Iterable）</p><ul><li><p><strong>迭代器（Iterator）</strong></p><p>负责定义访问和遍历聚合对象元素的接口</p><p>迭代器对象通常会追踪当前位置，并提供方法来获取下一个元素、检查是否还有下一个元素等</p></li><li><p><strong>可迭代对象（Iterable）</strong></p><p>表示包含一组元素的聚合对象，并提供一个方法来获取对应的迭代器</p><p>可迭代对象可以是集合类、数组、列表等</p></li></ul><p><br/></p><p>迭代器模式的核心思想是将遍历聚合对象的行为抽象出来，并将其封装到迭代器对象中，从而实现聚合对象与遍历算法的解耦</p><p>这种模式的优点在于，可以统一遍历接口，使得客户端代码与聚合对象的内部结构解耦，同时也提供了一种通用的遍历方法，适用于各种不同类型的聚合对象</p><p>迭代器模式适用于以下情况：</p><ul><li>当需要对聚合对象进行遍历，并且希望遍历算法与聚合对象的内部结构解耦时，可以使用迭代器模式</li><li>当希望提供一种统一的遍历接口，使得客户端代码可以统一处理不同类型的聚合对象时，迭代器模式也是一个很好的选择</li></ul><p><br/></p><p>举个简单的例子，考虑一个集合类（如列表、数组）中包含一组元素</p><p>而迭代器模式可以将遍历集合元素的算法抽象成一个迭代器对象，从而使得客户端代码可以通过迭代器对象来访问和遍历集合元素，而不需要了解集合对象的内部结构</p><p><br/></p><h2 id="实现条件"><a href="#实现条件" class="headerlink" title="实现条件"></a>实现条件</h2><ol><li><p><strong>存在一个聚合对象</strong></p><p>迭代器模式适用于需要遍历一组元素的情况，因此需要存在一个聚合对象来存储这组元素</p></li><li><p><strong>需要对元素进行遍历操作</strong></p><p>迭代器模式适用于需要对聚合对象中的元素进行遍历操作的情况</p></li><li><p><strong>需要对遍历方式进行抽象</strong></p><p>迭代器模式将遍历方式抽象成迭代器对象，并提供一组统一的接口来对元素进行遍历，从而使得客户端可以统一地处理不同类型的聚合对象</p></li><li><p><strong>需要支持多种遍历方式</strong></p><p>迭代器模式允许定义多种不同的迭代器对象，从而支持多种不同的遍历方式，例如正向遍历、逆向遍历、按照某种顺序遍历等</p></li></ol><p><br/></p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li><p><strong>简化聚合对象的接口</strong></p><p>迭代器模式将遍历操作封装在迭代器对象中，使得客户端可以统一地对聚合对象进行遍历操作，简化了聚合对象的接口</p></li><li><p><strong>解耦迭代算法和聚合对象</strong></p><p>迭代器模式将遍历算法与聚合对象进行了解耦，使得聚合对象的内部结构可以独立于其遍历算法的变化</p></li><li><p><strong>支持多种遍历方式</strong></p><p>迭代器模式允许定义多种不同的迭代器对象，从而支持多种不同的遍历方式，例如正向遍历、逆向遍历、按照某种顺序遍历等</p></li><li><p><strong>增加代码复用性</strong></p><p>迭代器模式将遍历操作封装在迭代器对象中，可以在不同的聚合对象之间重复使用相同的迭代器对象，从而提高了代码的复用性</p></li><li><p><strong>简化客户端代码</strong></p><p>迭代器模式使得客户端可以统一地对聚合对象进行遍历操作，不需要关心聚合对象的内部结构和遍历方式，从而简化了客户端的代码</p></li></ol><p><br/></p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li><p><strong>增加对象数量</strong></p><p>迭代器模式需要定义迭代器对象和聚合对象之间的关系，可能会增加对象数量，从而增加了系统的复杂度</p></li><li><p><strong>可能降低性能</strong></p><p>迭代器模式需要在迭代器对象中保存迭代状态，并且可能需要频繁地进行状态转换，可能会降低系统的性能</p></li><li><p><strong>可能增加代码复杂度</strong></p><p>迭代器模式需要定义迭代器对象和聚合对象之间的关系，并且可能需要在迭代器对象中保存迭代状态，可能会增加代码的复杂度</p></li></ol><p><br/></p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ListCollection类定义了一个列表集合，支持添加元素、删除元素、迭代遍历以及对函数执行或其它类型数据打印的功能。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListCollection</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数初始化集合元素数组。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">elements</span> = [] <span class="comment">// 初始化集合元素数组</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向集合中添加元素。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">any</span>&#125; element 要添加到集合中的元素。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">add</span>(<span class="params">element</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">elements</span>.<span class="title function_">push</span>(element)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从集合中删除指定索引的元素。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; index 要删除元素的索引。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> &#123;<span class="type">Error</span>&#125; 如果索引超出范围，则抛出错误。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">remove</span>(<span class="params">index</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="variable language_">this</span>.<span class="property">elements</span>.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">elements</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Index out of bounds&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现迭代器协议，允许集合被遍历。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@yields</span> &#123;<span class="type">any</span>&#125; 遍历集合中的每个元素。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    *[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> element <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">elements</span>) &#123;</span><br><span class="line">            <span class="keyword">yield</span> element</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历集合，如果元素是函数则执行，否则打印元素。</span></span><br><span class="line"><span class="comment">     * 该方法为内部方法，不直接暴露给外部使用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">forEachExecuteOrLog</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="variable language_">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">                <span class="title function_">item</span>() <span class="comment">// 执行函数</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(item) <span class="comment">// 输出其他类型数据</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">ListCollection</span></span><br></pre></td></tr></table></figure><p><br/></p><p>怎么使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ListCollection</span> <span class="keyword">from</span> <span class="string">&#x27;../IteratorPattern&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向列表中添加各种类型的元素。</span></span><br><span class="line"><span class="comment"> * 包括数字、函数、对象和字符串。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">ListCollection</span>.<span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line"><span class="title class_">ListCollection</span>.<span class="title function_">add</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Function executed!&#x27;</span>) &#125;)</span><br><span class="line"><span class="title class_">ListCollection</span>.<span class="title function_">add</span>(&#123; <span class="attr">key</span>: <span class="string">&#x27;value&#x27;</span> &#125;)</span><br><span class="line"><span class="title class_">ListCollection</span>.<span class="title function_">add</span>(<span class="string">&#x27;Text&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 遍历列表中的每个元素，并尝试执行它们。</span></span><br><span class="line"><span class="comment"> * 如果元素是函数，则执行该函数；</span></span><br><span class="line"><span class="comment"> * 如果元素是字符串或其他类型，则仅在控制台打印。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">ListCollection</span>.<span class="title function_">forEachExecuteOrLog</span>()</span><br></pre></td></tr></table></figure><p><br/></p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ol><li><p>数组的迭代方法</p><p>JavaScript 的原生数组方法，如 forEach, map, filter, reduce 等，都是迭代器模式的体现</p><p>这些方法让你能够遍历数组并对每个元素执行操作，而无需直接操作数组的索引</p></li><li><p>DOM 遍历</p><p>在处理DOM元素时，经常需要遍历节点树</p><p>虽然DOM API本身不是严格意义上的迭代器模式实现，但你可以使用类似迭代器的思维模式，比如使用 NodeList.prototype.forEach 或者创建自己的迭代器来遍历DOM子节点</p></li><li><p>React中的Keys</p><p>在React中，当渲染列表时，为列表项分配唯一key是一个最佳实践</p><p>虽然这不是直接的迭代器模式，但它体现了对集合元素进行迭代和管理的思想，确保高效更新虚拟DOM</p></li><li><p>Redux Saga / RxJS</p><p>在状态管理库Redux中，Redux Saga使用迭代器函数来处理异步操作流，这是一种高级的迭代器模式应用</p><p>同样，RxJS（Reactive Extensions for JavaScript）利用Observables来处理异步数据流，其背后的概念与迭代器模式紧密相关，提供了强大的数据处理能力</p></li><li><p><strong>Iterable Protocols</strong></p><p>ECMAScript中的可迭代协议（例如使用 [Symbol.iterator] 方法）允许对象定义自身的迭代行为</p><p>这使得任何实现了这个协议的对象都可以被 for…of 循环遍历，这是迭代器模式的直接应用</p></li><li><p><strong>Immutable.js</strong></p><p>这是一个流行的JavaScript库，用于不可变数据结构的处理</p><p>它内部广泛使用迭代器模式来遍历Map、List等数据结构，同时保持数据不变性</p></li><li><p><strong>Lodash/Underscore</strong></p><p>这些实用库提供了丰富的集合操作方法，如 <em>.each, </em>.map, _.filter 等，它们背后都运用了迭代器模式的理念，简化了对集合数据的操作</p></li><li><p><strong>Vue.js的v-for指令</strong></p><p>Vue框架中的v-for指令用来遍历数组或对象属性，并渲染每个项目到DOM</p><p>虽然这是模板语法的一部分，但它基于迭代器模式思想，让用户能以声明式的方式遍历数据</p></li></ol><p><br/></p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/wutiaowu5t5/DesignPattern/tree/main/BehaviorType/IteratorPattern"><img src="https://github-readme-stats.vercel.app/api/pin/?username=wutiaowu5t5&repo=DesignPattern&show_owner=true"/></a>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;迭代器模式（Iterator Pattern）是一种行为型设计模式，它提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露该对象的内部表</summary>
      
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
