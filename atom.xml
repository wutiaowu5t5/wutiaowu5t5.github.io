<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nanami Kento</title>
  
  
  <link href="https://wutiaowu5t5.github.io/atom.xml" rel="self"/>
  
  <link href="https://wutiaowu5t5.github.io/"/>
  <updated>2024-04-09T07:24:24.000Z</updated>
  <id>https://wutiaowu5t5.github.io/</id>
  
  <author>
    <name>Nanami Kento</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Javascript设计模式汇总</title>
    <link href="https://wutiaowu5t5.github.io/posts/d342d2ec/"/>
    <id>https://wutiaowu5t5.github.io/posts/d342d2ec/</id>
    <published>2024-04-09T07:24:24.000Z</published>
    <updated>2024-04-09T07:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式是什么"><a href="#设计模式是什么" class="headerlink" title="设计模式是什么"></a>设计模式是什么</h2><p>设计模式是在软件工程中被反复使用的、经过验证的解决方案，用于解决特定问题或设计软件架构。它们提供了一种在设计和开发过程中重用的可靠方式，有助于解决常见的设计问题并促进代码的可维护性、可扩展性和可重用性。</p><p>设计模式并不是一种具体的编程语言特性或库，而是一种通用的解决方案。它们是从实际开发经验中总结出来的，并被广泛接受和使用。设计模式通常包括了面向对象设计的一些基本原则和惯例，通过它们可以更好地组织代码结构、降低耦合度、提高代码的灵活性和可维护性。</p><p>设计模式之所以出现，是因为在软件开发中经常会遇到一些常见的问题，比如对象创建、对象之间的关系、算法的选择等等。这些问题在不同的项目和场景中可能会多次出现，因此工程师们开始寻找并提炼出一些通用的解决方案，这就是设计模式产生的原因。</p><p>设计模式有助于开发人员更快速地理解和解决问题，提高了开发效率。此外，它们还有助于提高代码的可读性和可维护性，因为它们是经过验证的、被广泛认可的解决方案，可以减少因为设计上的错误而造成的后续问题。</p><h2 id="设计模式遵循原则"><a href="#设计模式遵循原则" class="headerlink" title="设计模式遵循原则"></a>设计模式遵循原则</h2><p>设计模式的原则通常指的是一些基本的设计理念和规范，它们指导着设计模式的实现和应用。以下是一些常见的设计模式原则：</p><ol><li><p><strong>单一责任原则（Single Responsibility Principle, SRP）</strong>：</p><p>一个类应该只有一个引起变化的原因</p><p>换句话说，一个类应该只负责一项职责</p></li><li><p><strong>开放-封闭原则（Open-Closed Principle, OCP）</strong>：</p><p>软件实体（类、模块、函数等）应该对扩展开放，对修改关闭</p><p>即应该通过扩展现有代码来实现新功能，而不是直接修改已有代码</p></li><li><p><strong>里氏替换原则（Liskov Substitution Principle, LSP）</strong>：</p><p>所有能够使用父类对象的地方都应该能够使用子类对象</p><p>即子类应该能够替换父类并且不影响程序的正确性</p></li><li><p><strong>依赖倒置原则（Dependency Inversion Principle, DIP）</strong>：</p><p>高层模块不应该依赖于低层模块，两者都应该依赖于抽象</p><p>抽象不应该依赖于具体实现细节，具体实现细节应该依赖于抽象</p></li><li><p><strong>接口隔离原则（Interface Segregation Principle, ISP）</strong>：</p><p>客户端不应该被迫依赖于它们不使用的接口</p><p>即应该将大接口拆分成更小、更具体的接口，以便客户端只需要知道它们需要使用的接口</p></li><li><p><strong>合成/聚合复用原则（Composition/Aggregation Reuse Principle, CARP）</strong>：</p><p>优先使用对象组合/聚合，而不是继承来达到代码复用的目的</p><p>通过将对象组合到新的对象中，而不是通过继承来实现代码复用，可以更灵活地实现代码的复用</p></li></ol><p>这些原则是面向对象设计的基础，设计模式通常都遵循这些原则，以提高代码的可维护性、可扩展性和可重用性</p><h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><ol><li><p>创建型</p><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/4fda2d18/">单例模式</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/14ddad5d/">原型模式</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/7e9872a1/">工厂模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/7aab53ba/">抽象工厂模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/7e3e0f32/">建造者模式</a></p>            </div></li><li><p>结构型</p><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/edf2252f/">适配器模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/f51f74c/">装饰器模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/54233691/">代理模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/bd865a4b/">外观模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/2b8aa55b/">桥接模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/79a1bf69/">组合模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/469c39d8/">享元模式</a></p>            </div></li><li><p>行为型</p><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/73dbb689/">观察者模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/b1de33a6/">迭代器模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/1445619f/">策略模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/8472c90e/">模板方法模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/ae2b73e3/">职责链模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/25e1ecde/">命令模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/e88d43d9/">备忘录模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/d207f3e/">状态模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/edaaf222/">访问者模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/957fddbf/">中介者模式</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p><a href="https://wutiaowu5t5.github.io/posts/29dbf566/">解释器模式</a></p>            </div></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;设计模式是什么&quot;&gt;&lt;a href=&quot;#设计模式是什么&quot; class=&quot;headerlink&quot; title=&quot;设计模式是什么&quot;&gt;&lt;/a&gt;设计模式是什么&lt;/h2&gt;&lt;p&gt;设计模式是在软件工程中被反复使用的、经过验证的解决方案，用于解决特定问题或设计软件架构。它们提供了一</summary>
      
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>面经汇总</title>
    <link href="https://wutiaowu5t5.github.io/posts/ed392c85/"/>
    <id>https://wutiaowu5t5.github.io/posts/ed392c85/</id>
    <published>2024-04-09T03:10:24.000Z</published>
    <updated>2024-04-09T03:19:35.989Z</updated>
    
    <content type="html"><![CDATA[<div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/556519a1/">Html</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/179be34f/">Css</a></p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p><a href="https://wutiaowu5t5.github.io/posts/e82d9764/">Javascript</a></p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>手写Javascript</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>Vue</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>React</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>工程化</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>Http</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>浏览器</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>Node</p>            </div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&#39;checkbox green checked&#39;&gt;&lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot;/&gt;
            &lt;p&gt;&lt;a href=&quot;https://wutiaowu5t5.github.io/posts/5</summary>
      
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="面试" scheme="https://wutiaowu5t5.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《中介者模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/957fddbf/"/>
    <id>https://wutiaowu5t5.github.io/posts/957fddbf/</id>
    <published>2024-04-08T07:24:24.000Z</published>
    <updated>2024-04-08T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《单例模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/4fda2d18/"/>
    <id>https://wutiaowu5t5.github.io/posts/4fda2d18/</id>
    <published>2024-04-08T07:24:24.000Z</published>
    <updated>2024-04-08T07:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>如果一个类的实例会被频繁的使用，当重复创建的时候会消耗优先的资源（例如dialog弹窗），那么这时候就可以使这个实例在全局内只能创建唯一一个（例如Vuex，Redux），减少资源的消耗</p><p><strong>单例模式只涉及一个类，确保在系统中一个类只有一个实例，并提供一个全局访问入口</strong></p><p>许多时候整个系统只需要拥有一个全局对象，这样有利于我们协调系统整体的行为</p><ol><li><p>优点</p><p>适合于单一对象，只生成一个对象实例，避免频繁创建和销毁实例，减少栈内存占用<br>只有一个实例且全局可访问该实例，便于维护一个全局实例对象</p><p>划分命名空间，减少全局变量</p><p>增强模块性，把自己的代码组织在一个全局变量名下，放在单一位置，便于维护</p><p>且只会实例化一次。简化了代码的调试和维护</p></li><li><p>缺点</p><p>不适用动态扩展对象、创建多个相似对象的场景</p></li></ol><h2 id="实现条件"><a href="#实现条件" class="headerlink" title="实现条件"></a>实现条件</h2><ol><li>单例类的<strong>构造函数</strong>必须是<strong>私有的</strong>，这样才能将类的创建权控制在类的内部，从而使得类的外部不能创建类的实例。</li><li>单例类通过一个<strong>私有的静态变量</strong>来存储其唯一实例。</li><li>单例类通过提供一个<strong>公开的静态方法</strong>，使得外部使用者可以访问类的唯一实例</li></ol><blockquote><p>注意：</p><p>因为单例类的构造函数是私有的，所以单例类不能被继承</p></blockquote><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>使用一个变量存储类实例对象（值初始为 <code>null/undefined</code> ）</p><p>进行类实例化时，判断类实例对象是否存在，存在则返回该实例，不存在则创建类实例后返回</p><p>多次调用类生成实例方法，返回同一个实例对象</p><ol><li><p>利用导出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Func</span> ()</span><br></pre></td></tr></table></figure></li><li><p>惰性单例（使用时才new）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例模式类</span></span><br><span class="line"><span class="comment"> * 该类确保一个类只有一个实例，并且提供一个全局访问点来获得这个唯一实例。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GenericSingletonPattern</span> &#123;</span><br><span class="line">    <span class="comment">// 私有静态成员变量，用于保存唯一实例</span></span><br><span class="line">    <span class="keyword">static</span> #instance;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有构造函数</span></span><br><span class="line"><span class="comment">     * 防止通过new关键字创建多个实例。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">GenericSingletonPattern</span>.#instance) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Cannot instantiate singleton class using new operator.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公有静态方法，用于获取唯一实例</span></span><br><span class="line"><span class="comment">     * 如果实例不存在，则创建一个新的实例并返回；如果已存在，则直接返回该实例。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span> &#123;<span class="type">GenericSingletonPattern</span>&#125; 单例模式的唯一实例。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">getInstance</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title class_">GenericSingletonPattern</span>.#instance) &#123;</span><br><span class="line">            <span class="title class_">GenericSingletonPattern</span>.#instance = <span class="keyword">new</span> <span class="title class_">GenericSingletonPattern</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">GenericSingletonPattern</span>.#instance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">GenericSingletonPattern</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// region HOW TO USE</span></span><br><span class="line"><span class="comment">// 获取单例对象的实例</span></span><br><span class="line"><span class="keyword">const</span> instance1 = <span class="title class_">GenericSingletonPattern</span>.<span class="title function_">getInstance</span>();</span><br><span class="line"><span class="keyword">const</span> instance2 = <span class="title class_">GenericSingletonPattern</span>.<span class="title function_">getInstance</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查是否是同一个实例</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1 === instance2); <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 试图使用 new 关键字创建实例，会抛出错误</span></span><br><span class="line"><span class="keyword">const</span> instance3 = <span class="keyword">new</span> <span class="title class_">GenericSingletonPattern</span>(); <span class="comment">// 抛出错误: Cannot instantiate singleton class using new operator.</span></span><br><span class="line"><span class="comment">// endregion HOW TO USE</span></span><br></pre></td></tr></table></figure></li></ol><p>   这段代码定义了一个名为 <code>GenericSingletonPattern</code> 的类，它实现了单例模式。单例模式确保一个类只有一个实例，并提供一个全局访问点来获取这个唯一实例</p><ul><li>类中的 <code>#instance</code> 是一个私有的静态成员变量，用于保存唯一实例</li><li>构造函数 <code>constructor()</code> 是私有的，它会在实例化时被调用。如果已经存在实例，则会抛出一个错误，防止通过 <code>new</code> 关键字创建多个实例</li><li><code>getInstance()</code> 方法是一个公有的静态方法，用于获取唯一实例。如果实例不存在，则会创建一个新的实例并返回；如果已存在，则直接返回该实例</li></ul><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ol><li>定义命名空间和实现分支型方法</li><li>登录框</li><li>vuex 和 redux中的store</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;如果一个类的实例会被频繁的使用，当重复创建的时候会消耗优先的资源（例如dialog弹窗），那么这时候就可以使这个实例在全局内只能创建唯一一个</summary>
      
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《享元模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/469c39d8/"/>
    <id>https://wutiaowu5t5.github.io/posts/469c39d8/</id>
    <published>2024-04-08T07:24:24.000Z</published>
    <updated>2024-04-08T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《命令模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/25e1ecde/"/>
    <id>https://wutiaowu5t5.github.io/posts/25e1ecde/</id>
    <published>2024-04-08T07:24:24.000Z</published>
    <updated>2024-04-08T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《代理模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/54233691/"/>
    <id>https://wutiaowu5t5.github.io/posts/54233691/</id>
    <published>2024-04-08T07:24:24.000Z</published>
    <updated>2024-04-08T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《原型模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/14ddad5d/"/>
    <id>https://wutiaowu5t5.github.io/posts/14ddad5d/</id>
    <published>2024-04-08T07:24:24.000Z</published>
    <updated>2024-04-08T07:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>原型模式是一种创建型设计模式，它允许通过复制现有的对象来创建新的对象，而无需知道如何创建的细节</p><p>在JavaScript中，原型模式是一种基本的构造方式，因为JavaScript是一种基于原型的语言，它不使用类（class）（ES6之前），而是使用原型（prototype）来实现对象的继承和方法的共享</p><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><p>原型模式遵循的主要设计原则是“编程以接口而不是实现”，以及“优先使用对象组合而不是继承”</p><p>通过复制一个原型实例来创建新对象，你可以减少创建新实例所需的工作量，尤其是当对象的创建过程比较复杂时</p><h2 id="实现条件"><a href="#实现条件" class="headerlink" title="实现条件"></a>实现条件</h2><ol><li>当一个系统应该独立于它的产品创建、构成和表示时</li><li>当要实例化的类是在运行时指定时，例如，通过动态加载</li><li>为了避免创建一个与产品类层次平行的工厂类层次</li><li>当一个类的实例只有几个不同状态组合中的一种时。安装相应数量的原型并克隆它们可能比每次用适当的状态手动实例化该类更方便</li></ol><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>在ES6+中，最佳实践是使用<code>class</code>关键字来定义原型，并通过<code>Object.create</code>或者类的构造函数来创建新的实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Description: 创建型-原型模式</span></span><br><span class="line"><span class="comment"> * @Author: 5t5</span></span><br><span class="line"><span class="comment"> * @Time: 2024/4/9 17:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GenericPrototypePattern</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">properties</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> prop <span class="keyword">in</span> properties) &#123;</span><br><span class="line">            <span class="keyword">if</span> (properties.<span class="title function_">hasOwnProperty</span>(prop)) &#123;</span><br><span class="line">                <span class="variable language_">this</span>[prop] = properties[prop];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">printProperties</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> prop <span class="keyword">in</span> <span class="variable language_">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">hasOwnProperty</span>(prop)) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;prop&#125;</span>: <span class="subst">$&#123;<span class="variable language_">this</span>[prop]&#125;</span>`</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">clone</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 创建一个新的对象，将当前对象的属性复制到新对象上</span></span><br><span class="line">        <span class="keyword">let</span> clonedObject = <span class="keyword">new</span> <span class="title class_">GenericPrototypePattern</span>(&#123;&#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> prop <span class="keyword">in</span> <span class="variable language_">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">hasOwnProperty</span>(prop)) &#123;</span><br><span class="line">                clonedObject[prop] = <span class="variable language_">this</span>[prop];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clonedObject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">GenericPrototypePattern</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// region HOW TO USE</span></span><br><span class="line"><span class="comment">// 使用原型模式创建新对象</span></span><br><span class="line"><span class="keyword">const</span> obj1 = <span class="keyword">new</span> <span class="title class_">GenericPrototypePattern</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;Object 1&#x27;</span>, <span class="attr">value</span>: <span class="number">10</span>&#125;);</span><br><span class="line"><span class="keyword">const</span> obj2 = obj1.<span class="title function_">clone</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改克隆后的对象的属性</span></span><br><span class="line">obj2.<span class="property">name</span> = <span class="string">&#x27;Object 2&#x27;</span>;</span><br><span class="line">obj2.<span class="property">color</span> = <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用通用方法</span></span><br><span class="line">obj1.<span class="title function_">printProperties</span>(); <span class="comment">// 输出: name: Object 1, value: 10</span></span><br><span class="line">obj2.<span class="title function_">printProperties</span>(); <span class="comment">// 输出: name: Object 2, value: 10, color: blue</span></span><br><span class="line"><span class="comment">// endregion HOW TO USE</span></span><br></pre></td></tr></table></figure><p>这段代码定义了一个名为 <code>GenericPrototypePattern</code> 的类，它实现了原型模式。这个类包含了构造函数、一个打印属性的方法 <code>printProperties()</code> 和一个克隆方法 <code>clone()</code></p><ul><li>构造函数 <code>constructor(properties)</code> 接受一个参数 <code>properties</code>，它是一个对象，用于初始化实例的属性。构造函数将 <code>properties</code> 对象中的属性复制到新创建的对象上</li><li><code>printProperties()</code> 方法用于打印实例对象的所有属性</li><li><code>clone()</code> 方法用于克隆当前对象，并返回一个新的对象实例。克隆方法会创建一个新的对象，并将当前对象的属性复制到新对象上，从而实现了对象的克隆</li></ul><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ol><li><strong>对象创建开销大，但对象之间差异不大的情况下</strong>：例如在游戏开发中，可以使用原型模式来创建大量的敌人对象，它们可能有不同的外观、属性，但是大部分行为和属性都是相似的，这时候可以通过克隆原型对象来节省创建对象的开销。</li><li><strong>需要避免使用复杂的继承结构</strong>：有些场景中，类的继承结构非常复杂，使用原型模式可以简化对象的创建过程，避免过深的继承链带来的问题。</li><li><strong>动态加载类、对象或者模块</strong>：在一些需要动态加载类或者模块的场景中，原型模式可以用来在运行时创建新的对象，而无需提前知道对象的具体类型。</li><li><strong>保护性拷贝</strong>：有时候需要对对象进行保护性拷贝，以避免外部对原对象的修改影响到其他对象，原型模式提供了一种简单的方式来实现这一点。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;原型模式是一种创建型设计模式，它允许通过复制现有的对象来创建新的对象，而无需知道如何创建的细节&lt;/p&gt;
&lt;p&gt;在JavaScript中，原型</summary>
      
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《外观模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/bd865a4b/"/>
    <id>https://wutiaowu5t5.github.io/posts/bd865a4b/</id>
    <published>2024-04-08T07:24:24.000Z</published>
    <updated>2024-04-08T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《备忘录模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/e88d43d9/"/>
    <id>https://wutiaowu5t5.github.io/posts/e88d43d9/</id>
    <published>2024-04-08T07:24:24.000Z</published>
    <updated>2024-04-08T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《抽象工厂模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/7aab53ba/"/>
    <id>https://wutiaowu5t5.github.io/posts/7aab53ba/</id>
    <published>2024-04-08T07:24:24.000Z</published>
    <updated>2024-04-08T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《建造者模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/7e3e0f32/"/>
    <id>https://wutiaowu5t5.github.io/posts/7e3e0f32/</id>
    <published>2024-04-08T07:24:24.000Z</published>
    <updated>2024-04-08T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《模版方法模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/8472c90e/"/>
    <id>https://wutiaowu5t5.github.io/posts/8472c90e/</id>
    <published>2024-04-08T07:24:24.000Z</published>
    <updated>2024-04-08T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《桥接模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/2b8aa55b/"/>
    <id>https://wutiaowu5t5.github.io/posts/2b8aa55b/</id>
    <published>2024-04-08T07:24:24.000Z</published>
    <updated>2024-04-08T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《工厂模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/7e9872a1/"/>
    <id>https://wutiaowu5t5.github.io/posts/7e9872a1/</id>
    <published>2024-04-08T07:24:24.000Z</published>
    <updated>2024-04-08T07:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>工厂模式是一种设计模式，它提供了一种统一的方式来创建对象，而不需要暴露对象创建的细节</p><p>简单来说，工厂模式就像是一个工厂，负责生产对象，而客户端只需要告诉工厂需要什么样的对象，而不需要知道对象是如何创建的</p><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><p>工厂模式遵循着一些设计原则，其中主要的两个是：</p><ol><li><strong>单一职责原则</strong>：每个类应该只负责一件事情。工厂模式将对象的创建职责集中到一个单独的工厂类中，这样做不仅使代码更清晰，而且易于维护</li><li><strong>开闭原则</strong>：对扩展开放，对修改关闭。工厂模式通过使用接口和抽象类定义创建对象的方法，使得系统在需要添加新的产品类时不需要修改已有的代码，只需要扩展工厂类即可</li></ol><h2 id="实现条件"><a href="#实现条件" class="headerlink" title="实现条件"></a>实现条件</h2><p>工厂模式适用于一些特定的情况，包括但不限于：</p><ol><li>当一个系统需要独立于其产品的创建、组成和表示时，工厂模式能够帮助我们实现这一点</li><li>当要实例化的类在运行时才能确定时，例如，通过动态加载，工厂模式非常有用</li><li>当我们想要避免创建一个与产品类层次平行的工厂类层次时，工厂模式可以帮助我们减少类的数量</li><li>当一个类的实例只有几个不同状态组合中的一种时，使用工厂模式可能会比手动实例化更加方便，因为我们可以创建多个原型并根据需要克隆它们</li></ol><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表示一个人的类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@class</span> <span class="variable">Person</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">name</span> - 人的名字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">age</span> - 人的年龄</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向他人打招呼并介绍自己</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, my name is &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;, and I&#x27;m &quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span> + <span class="string">&quot; years old.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用工厂模式类，用于创建Person实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@class</span> <span class="variable">GenericFactoryPattern</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GenericFactoryPattern</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个Person实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@static</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">name</span> - 人的名字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">age</span> - 人的年龄</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span> &#123;<span class="type">Person</span>&#125; 返回一个初始化后的Person实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> &#123;<span class="type">Error</span>&#125; 如果名字不是字符串或年龄不是正数，则抛出错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">createPerson</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 验证输入参数的合法性</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> name !== <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Invalid input: &quot;name&quot; parameter must be a string.&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> age !== <span class="string">&#x27;number&#x27;</span> || <span class="built_in">isNaN</span>(age) || age &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Invalid input: &quot;age&quot; parameter must be a positive number.&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建并返回Person实例</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(name, age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">GenericFactoryPattern</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// region HOW TO USE</span></span><br><span class="line"><span class="comment">// 使用工厂类创建对象</span></span><br><span class="line"><span class="keyword">let</span> person1 = <span class="title class_">GenericFactoryPattern</span>.<span class="title function_">createPerson</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">30</span>)</span><br><span class="line"><span class="keyword">let</span> person2 = <span class="title class_">GenericFactoryPattern</span>.<span class="title function_">createPerson</span>(<span class="string">&quot;Bob&quot;</span>, <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用对象的方法</span></span><br><span class="line">person1.<span class="title function_">greet</span>() <span class="comment">// 输出：Hello, my name is Alice, and I&#x27;m 30 years old.</span></span><br><span class="line">person2.<span class="title function_">greet</span>() <span class="comment">// 输出：Hello, my name is Bob, and I&#x27;m 25 years old.</span></span><br><span class="line"><span class="comment">// endregion HOW TO USE</span></span><br></pre></td></tr></table></figure><p>这段代码定义了一个 <code>Person</code> 类和一个通用的工厂模式类 <code>GenericFactoryPattern</code>，用于创建 <code>Person</code> 实例。下面是对这段代码的解释：</p><ol><li><strong>Person 类：</strong><ul><li>这个类表示一个人，具有两个属性 <code>name</code> 和 <code>age</code>，分别代表人的名字和年龄</li><li>类中有一个方法 <code>greet()</code>，用于向他人打招呼并介绍自己，它会在控制台输出一条打招呼的消息</li></ul></li><li><strong>GenericFactoryPattern 类：</strong><ul><li>这个类是一个通用的工厂模式类，用于创建 <code>Person</code> 实例</li><li>类中有一个静态方法 <code>createPerson(name, age)</code>，用于创建一个 <code>Person</code> 实例。该方法接收两个参数，分别是人的名字和年龄</li><li>方法内部对输入参数进行合法性验证，确保 <code>name</code> 是字符串且 <code>age</code> 是正数。如果参数不符合要求，则抛出相应的错误</li><li>如果参数验证通过，则使用输入参数创建并返回一个初始化后的 <code>Person</code> 实例</li></ul></li></ol><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ol><li>JQuery的$()</li><li>Vue异步组件</li><li>Moment.js 中的 <code>moment()</code></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;工厂模式是一种设计模式，它提供了一种统一的方式来创建对象，而不需要暴露对象创建的细节&lt;/p&gt;
&lt;p&gt;简单来说，工厂模式就像是一个工厂，负责生</summary>
      
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《策略模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/1445619f/"/>
    <id>https://wutiaowu5t5.github.io/posts/1445619f/</id>
    <published>2024-04-08T07:24:24.000Z</published>
    <updated>2024-04-08T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《装饰器模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/f51f74c/"/>
    <id>https://wutiaowu5t5.github.io/posts/f51f74c/</id>
    <published>2024-04-08T07:24:24.000Z</published>
    <updated>2024-04-08T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《状态模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/d207f3e/"/>
    <id>https://wutiaowu5t5.github.io/posts/d207f3e/</id>
    <published>2024-04-08T07:24:24.000Z</published>
    <updated>2024-04-08T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《组合模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/79a1bf69/"/>
    <id>https://wutiaowu5t5.github.io/posts/79a1bf69/</id>
    <published>2024-04-08T07:24:24.000Z</published>
    <updated>2024-04-08T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Javascript设计模式 - 《职责链模式》</title>
    <link href="https://wutiaowu5t5.github.io/posts/ae2b73e3/"/>
    <id>https://wutiaowu5t5.github.io/posts/ae2b73e3/</id>
    <published>2024-04-08T07:24:24.000Z</published>
    <updated>2024-04-08T07:24:24.000Z</updated>
    
    
    
    
    <category term="web" scheme="https://wutiaowu5t5.github.io/categories/web/"/>
    
    
    <category term="javascript" scheme="https://wutiaowu5t5.github.io/tags/javascript/"/>
    
    <category term="设计模式" scheme="https://wutiaowu5t5.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
